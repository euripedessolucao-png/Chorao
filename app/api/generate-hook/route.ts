import { NextResponse } from "next/server"
import { generateText } from "ai"
import { getGenreConfig, detectSubGenre, getGenreRhythm } from "@/lib/genre-config"
import { capitalizeLines } from "@/lib/utils/capitalize-lyrics"
import { countPoeticSyllables } from "@/lib/validation/syllable-counter" // ‚Üê CORRIGIDO

export async function POST(request: Request) {
  try {
    const { lyrics, genre, additionalRequirements, advancedMode } = await request.json()

    if (!lyrics) {
      return NextResponse.json({ error: "Letra √© obrigat√≥ria" }, { status: 400 })
    }

    const genreConfig = genre ? getGenreConfig(genre) : null
    const subGenreInfo = detectSubGenre(additionalRequirements || "")
    const defaultRhythm = genre ? getGenreRhythm(genre) : "Brasileiro"
    const finalRhythm = subGenreInfo.rhythm || defaultRhythm

    const prompt = `üåç REGRAS UNIVERSAIS DE IDIOMA (OBRIGAT√ìRIO)

‚úÖ PORTUGU√äS BRASILEIRO:
- HOOKS: 100% em portugu√™s do Brasil
- Linguagem coloquial aut√™ntica
- G√≠rias e express√µes regionais

‚úÖ INGL√äS:
- BACKING VOCALS (se houver): sempre em ingl√™s
  Exemplo: (Backing: "Oh, oh, oh")
- INSTRU√á√ïES: sempre em ingl√™s

‚ùå NUNCA MISTURE:
- N√£o escreva hooks em ingl√™s
- Mantenha separa√ß√£o clara

Voc√™ √© um especialista em criar hooks comerciais para m√∫sica brasileira.

TAREFA: Analise a letra abaixo e crie 3 varia√ß√µes de hooks ultra-memor√°veis.

LETRA:
${lyrics}

G√äNERO: ${genre || "Brasileiro"}
RITMO: ${finalRhythm}
${additionalRequirements ? `REQUISITOS: ${additionalRequirements}` : ""}

‚ö†Ô∏è REGRA ABSOLUTA DE S√çLABAS (INVIOL√ÅVEL):
- Hook: M√ÅXIMO 12 S√çLABAS PO√âTICAS
- Este √© o LIMITE HUMANO do canto
- NUNCA exceda 12 s√≠labas
- Se precisar de mais espa√ßo, use menos palavras
- Criatividade DENTRO do limite

REGRAS DE HOOK DE HIT:
- 4-8 palavras (m√°ximo 12 s√≠labas)
- Grudento e memor√°vel
- Linguagem coloquial brasileira
- F√°cil de repetir
- Potencial viral
- CADA VARIA√á√ÉO ‚â§ 12 S√çLABAS
- 100% em PORTUGU√äS BRASILEIRO

${
  advancedMode
    ? `
üî• MODO AVAN√áADO - HOOK PREMIUM:
- Gancho instant√¢neo (gruda em 3 segundos)
- Linguagem limpa (adequado para r√°dio)
- Potencial de bord√£o viral
- F√°cil de cantar em karaok√™
- Score m√≠nimo: 90/100
`
    : ""
}

FORMATO DE RESPOSTA (JSON):
{
  "hook": "melhor hook escolhido (‚â§12 s√≠labas, em portugu√™s)",
  "hookVariations": [
    "varia√ß√£o 1 (‚â§12 s√≠labas, em portugu√™s)",
    "varia√ß√£o 2 (‚â§12 s√≠labas, em portugu√™s)",
    "varia√ß√£o 3 (‚â§12 s√≠labas, em portugu√™s)"
  ],
  "score": 85,
  "suggestions": [
    "sugest√£o 1 de melhoria",
    "sugest√£o 2 de melhoria",
    "sugest√£o 3 de melhoria"
  ],
  "placement": [
    "Usar no in√≠cio do refr√£o para impacto m√°ximo",
    "Repetir 3-4 vezes na m√∫sica",
    "Colocar tamb√©m no outro para fixa√ß√£o"
  ],
  "tiktokTest": "Como soaria em clipe de 5 segundos: [descri√ß√£o]",
  "tiktokScore": 8,
  "transformations": [
    {
      "original": "trecho da letra original",
      "transformed": "vers√£o otimizada como hook (‚â§12 s√≠labas, em portugu√™s)",
      "reason": "por que funciona melhor"
    }
  ]
}

IMPORTANTE:
- Hook deve ter 4-8 palavras (M√ÅXIMO 12 S√çLABAS)
- 100% em PORTUGU√äS BRASILEIRO
- Score m√≠nimo: 80/100
- TikTok score m√≠nimo: 7/10
- Retorne APENAS o JSON, sem markdown`

    let attempts = 0
    let parsedResult: any = null
    let allValid = false

    while (attempts < 3 && !allValid) {
      attempts++
      console.log(`[v0] Tentativa ${attempts}/3 de gera√ß√£o de hook...`)

      const { text } = await generateText({
        model: "openai/gpt-4o",
        prompt: prompt,
        temperature: 0.85,
      })

      try {
        const cleanText = text
          .replace(/```json\n?/g, "")
          .replace(/```\n?/g, "")
          .trim()
        parsedResult = JSON.parse(cleanText)
      } catch (parseError) {
        if (attempts === 3) {
          console.error("[v0] ‚ùå Erro ao fazer parse do JSON:", parseError)
          return NextResponse.json({ error: "Erro ao processar resposta da IA. Tente novamente." }, { status: 500 })
        }
        continue
      }

      if (!parsedResult.hook || !Array.isArray(parsedResult.hookVariations)) {
        if (attempts === 3) {
          console.error("[v0] ‚ùå Estrutura JSON inv√°lida:", parsedResult)
          return NextResponse.json({ error: "Resposta da IA em formato inv√°lido. Tente novamente." }, { status: 500 })
        }
        continue
      }

      allValid = true
      const violations: string[] = []

      // ‚úÖ CORRE√á√ÉO: countSyllables ‚Üí countPoeticSyllables
      const mainHookSyllables = countPoeticSyllables(parsedResult.hook)
      if (mainHookSyllables > 12) {
        allValid = false
        violations.push(`Hook principal: "${parsedResult.hook}" = ${mainHookSyllables} s√≠labas (m√°x: 12)`)
      }

      parsedResult.hookVariations.forEach((variation: string, index: number) => {
        // ‚úÖ CORRE√á√ÉO: countSyllables ‚Üí countPoeticSyllables
        const syllables = countPoeticSyllables(variation)
        if (syllables > 12) {
          allValid = false
          violations.push(`Varia√ß√£o ${index + 1}: "${variation}" = ${syllables} s√≠labas (m√°x: 12)`)
        }
      })

      if (!allValid) {
        console.log(`[v0] ‚ö†Ô∏è Tentativa ${attempts} falhou - viola√ß√µes de s√≠labas:`)
        violations.forEach((v) => console.log(`[v0]   - ${v}`))
        if (attempts < 3) {
          console.log(`[v0] üîÑ Regenerando...`)
        }
      } else {
        console.log(`[v0] ‚úÖ Todos os hooks respeitam o limite de 12 s√≠labas!`)
      }
    }

    if (!allValid) {
      console.log(`[v0] ‚ö†Ô∏è Ap√≥s 3 tentativas, ainda h√° viola√ß√µes. Retornando melhor resultado.`)
    }

    if (parsedResult.hook) {
      parsedResult.hook = capitalizeLines(parsedResult.hook)
    }
    if (parsedResult.hookVariations && Array.isArray(parsedResult.hookVariations)) {
      parsedResult.hookVariations = parsedResult.hookVariations.map((variation: string) => capitalizeLines(variation))
    }
    if (parsedResult.transformations && Array.isArray(parsedResult.transformations)) {
      parsedResult.transformations = parsedResult.transformations.map((t: any) => ({
        ...t,
        transformed: capitalizeLines(t.transformed || t.hookVersion || ""),
      }))
    }

    const safeResult = {
      hook: parsedResult.hook,
      hookVariations: parsedResult.hookVariations || [],
      score: parsedResult.score || 75,
      suggestions: parsedResult.suggestions || [],
      placement: parsedResult.placement || ["Usar no refr√£o"],
      tiktokTest: parsedResult.tiktokTest || "Hook com potencial viral",
      tiktokScore: parsedResult.tiktokScore || 7,
      transformations: parsedResult.transformations || [],
    }

    console.log("[v0] ‚úÖ Hook gerado com sucesso!")
    console.log(`[v0] üìä Score: ${safeResult.score}/100`)
    console.log(`[v0] üéØ TikTok Score: ${safeResult.tiktokScore}/10`)

    return NextResponse.json(safeResult)
  } catch (error) {
    console.error("[v0] ‚ùå Erro ao gerar hook:", error)
    const errorMessage = error instanceof Error ? error.message : "Erro desconhecido"
    return NextResponse.json(
      {
        error: `Erro ao gerar hook: ${errorMessage}. Tente novamente.`,
      },
      { status: 500 },
    )
  }
}
