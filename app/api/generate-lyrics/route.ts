import { type NextRequest, NextResponse } from "next/server"
import { generateText } from "ai"
import { getGenreConfig } from "@/lib/genre-config"
import { capitalizeLines } from "@/lib/utils/capitalize-lyrics"

export async function POST(request: NextRequest) {
  try {
    const {
      genero,
      humor,
      tema,
      criatividade,
      inspiracao,
      metaforas,
      emocoes,
      titulo,
      formattingStyle,
      additionalRequirements,
      metrics,
    } = await request.json()

    if (!genero) {
      return NextResponse.json({ error: "G√™nero √© obrigat√≥rio" }, { status: 400 })
    }

    const genreConfig = getGenreConfig(genero)
    const isPerformanceMode = formattingStyle === "performatico"
    const isBachata = genero.toLowerCase().includes("bachata")

    const universalRules = `
üéµ REGRAS UNIVERSAIS DO SISTEMA

1. LINGUAGEM BRASILEIRA SIMPLES E COLOQUIAL
   - Use palavras do dia-a-dia, como um brasileiro fala naturalmente
   - PROIBIDO: vocabul√°rio rebuscado, po√©tico, liter√°rio
   - PERMITIDO: g√≠rias, contra√ß√µes, express√µes populares ("t√¥", "c√™", "pra", "n√©")

2. M√âTRICA E RESPIRA√á√ÉO
   - Cada verso deve caber em um f√¥lego natural ao cantar
   - M√°ximo 12 s√≠labas po√©ticas por verso
   - Versos empilhados (um por linha, sem par√°grafos longos)

3. ESTRUTURA DE VERSOS
   - Um verso por linha (empilhamento vertical)
   - Facilita contagem de s√≠labas e respira√ß√£o

4. RIMAS NATURAIS (N√ÉO FOR√áADAS)
   - Rimas devem surgir naturalmente da narrativa
   - Prefira rimas ricas (classes gramaticais diferentes)
   - Evite rimas √≥bvias ou clich√™s

5. EMO√á√ÉO AUT√äNTICA
   - Sentimentos diretos e honestos
   - Met√°foras concretas (n√£o abstratas)
   - Cenas visuais claras
`

    const chorusContext = additionalRequirements?.match(/\[CHORUS\]\s*([\s\S]+?)(?=\n\n|\[|$)/i)?.[1]
      ? `\n\nREFR√ÉO PR√â-DEFINIDO (use exatamente):\n${additionalRequirements.match(/\[CHORUS\]\s*([\s\S]+?)(?=\n\n|\[|$)/i)![1].trim()}\n\nConstrua a narrativa em torno deste refr√£o.`
      : ""

    const structureGuide = `
ESTRUTURA COMERCIAL (3:30 de dura√ß√£o):
[INTRO] (instrumental, 8-12 segundos)
[VERSE 1] (4 linhas empilhadas)
[PRE-CHORUS] (2 linhas) - prepara√ß√£o emocional
[CHORUS] (2-4 linhas) - grudento e memor√°vel
[VERSE 2] (4 linhas) - desenvolve a hist√≥ria
[PRE-CHORUS] (2 linhas)
[CHORUS] (repete)
[BRIDGE] (2-4 linhas) - momento de reflex√£o
[CHORUS] (repete)
[OUTRO] (fade out ou hook final)
`

    const performanceInstructions = isPerformanceMode
      ? `\n\nFORMATO PERFORM√ÅTICO:
- Adicione descri√ß√µes: (sobe o tom), (pausa dram√°tica), (repete 2x)
- Momentos instrumentais: [GUITAR SOLO], [DRUM BREAK]
- Din√¢micas: (suave), (crescendo), (explosivo)
- Final: (Instruments: [lista] | BPM: ${metrics?.bpm || 100} | Style: ${genero})`
      : `\n\nFORMATO PADR√ÉO:
- Marcadores em ingl√™s: [INTRO], [VERSE], [CHORUS], [BRIDGE], [OUTRO]
- Letra limpa e direta
- Final: (Instruments: [lista] | BPM: ${metrics?.bpm || 100} | Style: ${genero})`

    const prompt = `${universalRules}

Voc√™ √© um compositor profissional brasileiro especializado em ${genero}.

TAREFA: Escreva uma letra completa aplicando o processo TERCEIRA VIA em cada verso.

PROCESSO TERCEIRA VIA:
- Para cada verso, considere: (A) M√©trica/Fluidez + (B) Emo√ß√£o/Autenticidade = (C) S√≠ntese Final
- Cada linha deve ter ritmo natural E emo√ß√£o aut√™ntica
- M√°ximo 12 s√≠labas por verso
- Linguagem simples brasileira

ESPECIFICA√á√ïES:
TEMA: ${tema || "amor e relacionamento"}
HUMOR: ${humor || "neutro"}
CRIATIVIDADE: ${criatividade}
${inspiracao ? `INSPIRA√á√ÉO: ${inspiracao}` : ""}
${metaforas ? `MET√ÅFORAS (PRIORIDADE): ${metaforas}\nInsira naturalmente na letra.` : ""}
${emocoes?.length ? `EMO√á√ïES: ${emocoes.join(", ")}` : ""}
${titulo ? `T√çTULO: ${titulo}` : ""}
${additionalRequirements ? `\nREQUISITOS ADICIONAIS (PRIORIDADE ABSOLUTA):\n${additionalRequirements}` : ""}
${chorusContext}

${structureGuide}

REGRAS DE PROS√ìDIA (${genreConfig.name}):
- Com v√≠rgula: m√°x ${genreConfig.prosody_rules.syllable_count.with_comma.max_before_comma} s√≠labas antes, ${genreConfig.prosody_rules.syllable_count.with_comma.max_after_comma} depois
- Sem v√≠rgula: ${genreConfig.prosody_rules.syllable_count.without_comma.min}-${genreConfig.prosody_rules.syllable_count.without_comma.max} s√≠labas

${performanceInstructions}

Escreva a letra completa agora, aplicando Terceira Via em cada verso:`

    console.log("[v0] Gerando letra com Terceira Via...")

    const { text } = await generateText({
      model: "openai/gpt-4o",
      prompt,
      temperature: 0.8,
    })

    let finalLyrics = text.trim()

    let extractedTitle = titulo || ""
    const titleMatch = finalLyrics.match(/^Title:\s*(.+)$/m)
    if (titleMatch?.[1]) {
      extractedTitle = titleMatch[1].trim()
    } else if (!extractedTitle) {
      const chorusMatch = finalLyrics.match(/\[(?:CHORUS|REFR√ÉO)[^\]]*\]\s*\n([^\n]+)/i)
      if (chorusMatch?.[1]) {
        extractedTitle = chorusMatch[1].trim().split(" ").slice(0, 4).join(" ")
        finalLyrics = `Title: ${extractedTitle}\n\n${finalLyrics}`
      }
    }

    if (isPerformanceMode && !finalLyrics.includes("(Instruments:")) {
      const instruments = isBachata
        ? "electric guitar, synthesizer, electronic drums, accordion"
        : "guitar, bass, drums, keyboard"
      finalLyrics += `\n\n(Instruments: [${instruments}] | BPM: ${metrics?.bpm || 100} | Style: ${genero})`
    }

    finalLyrics = capitalizeLines(finalLyrics)

    console.log("[v0] Letra gerada com sucesso usando Terceira Via")

    return NextResponse.json({
      letra: finalLyrics,
      titulo: extractedTitle,
    })
  } catch (error) {
    console.error("[v0] Erro ao gerar letra:", error)
    return NextResponse.json(
      { error: "Erro ao gerar letra", details: error instanceof Error ? error.message : "Erro desconhecido" },
      { status: 500 },
    )
  }
}
