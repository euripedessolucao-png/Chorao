import { type NextRequest, NextResponse } from "next/server"
import { generateText } from "ai"
import { getGenreConfig, detectSubGenre, getGenreRhythm } from "@/lib/genre-config"
import { capitalizeLines } from "@/lib/utils/capitalize-lyrics"

export async function POST(request: NextRequest) {
  try {
    const {
      genero,
      humor,
      tema,
      criatividade,
      inspiracao,
      metaforas,
      emocoes,
      titulo,
      formattingStyle,
      additionalRequirements,
      metrics,
      advancedMode,
    } = await request.json()

    if (!genero) {
      return NextResponse.json({ error: "G√™nero √© obrigat√≥rio" }, { status: 400 })
    }

    const genreConfig = getGenreConfig(genero)
    const isPerformanceMode = formattingStyle === "performatico"
    const isBachata = genero.toLowerCase().includes("bachata")

    const subGenreInfo = detectSubGenre(additionalRequirements)
    const defaultRhythm = getGenreRhythm(genero)
    const finalRhythm = subGenreInfo.rhythm || defaultRhythm

    const universalRules = `
üéØ F√ìRMULA DE SUCESSO 2024-2025 (PRIORIDADES ABSOLUTAS)

1. REFR√ÉO ULTRA-MEMOR√ÅVEL (PRIORIDADE #1)
   - Primeira linha = GANCHO GRUDENTO que n√£o sai da cabe√ßa
   - M√°ximo 4 linhas, cada uma com 8-10 s√≠labas
   - Frases simples, diretas, f√°ceis de cantar junto
   - Repeti√ß√£o estrat√©gica de palavras-chave
   - TESTE: Se n√£o grudar na primeira escuta, refa√ßa!

2. LINGUAGEM COLOQUIAL BRASILEIRA INTENSA
   - Fale como brasileiro fala na rua, no bar, na festa
   - Use MUITO: "c√™", "t√¥", "pra", "n√©", "v√©io", "mano", "bicho"
   - G√≠rias regionais aut√™nticas do g√™nero
   - ZERO vocabul√°rio rebuscado ou po√©tico demais
   - Parece conversa real, n√£o poesia escrita

3. EMO√á√ÉO AUT√äNTICA > T√âCNICA
   - Sentimento genu√≠no √© mais importante que rima perfeita
   - Conte hist√≥ria REAL com detalhes concretos
   - Cenas visuais claras (n√£o abstra√ß√µes)
   - Frases completas e coerentes (NUNCA corte no meio)
   - Se precisar escolher: EMO√á√ÉO vence M√âTRICA

4. ESTRUTURA COMERCIAL (3:00-3:30 minutos)
   - INTRO curta (8-12 segundos)
   - VERSE 1 (8 linhas) ‚Üí PRE-CHORUS (2-4 linhas) ‚Üí CHORUS (4 linhas)
   - VERSE 2 (8 linhas) ‚Üí PRE-CHORUS ‚Üí CHORUS (repete)
   - BRIDGE (8 linhas) ‚Üí SOLO instrumental (8-16 segundos)
   - FINAL CHORUS (4 linhas com mais energia) ‚Üí OUTRO (4 linhas ou fade)

5. M√âTRICA FLEX√çVEL (N√ÉO R√çGIDA)
   - Alvo: 8-12 s√≠labas por verso
   - Pode chegar a 13 se a frase estiver completa e natural
   - PRIORIDADE: Frase completa > Contagem exata
   - Respira√ß√£o natural ao cantar

6. INSTRU√á√ïES MUSICAIS DETALHADAS (ESTILO CLONE)
   - Cada se√ß√£o tem nota de performance
   - Exemplo: [VERSE 1 - Voz suave, quase falada, ritmo de prosa sertaneja, foco na nostalgia]
   - Especifique: vocal, instrumenta√ß√£o, energia, emo√ß√£o
   - Guie o int√©rprete com precis√£o
`

    const advancedModeRules = advancedMode
      ? `
üî• MODO AVAN√áADO ATIVADO

RIMAS PERFEITAS OBRIGAT√ìRIAS:
- M√≠nimo 50% de rimas ricas (classes gramaticais diferentes)
- Zero rimas falsas ou for√ßadas
- Rimas naturais que surgem da narrativa

M√âTRICA RIGOROSA:
- M√°ximo 12 s√≠labas ABSOLUTO
- Contagem precisa em cada verso
- Respira√ß√£o natural garantida

GANCHOS PREMIUM:
- Refr√£o com hook na primeira linha
- Melodia grudenta e memor√°vel
- F√°cil de cantar em karaok√™

LINGUAGEM LIMPA:
- Zero palavr√µes pesados
- Respeito e bom gosto
- Adequado para r√°dio

FIDELIDADE DE ESTILO:
- 100% fiel ao g√™nero escolhido
- Instrumenta√ß√£o aut√™ntica
- Refer√™ncias culturais corretas
`
      : ""

    const chorusContext = additionalRequirements?.match(/\[CHORUS\]\s*([\s\S]+?)(?=\n\n|\[|$)/i)?.[1]
      ? `\n\n‚ú® REFR√ÉO PR√â-DEFINIDO (use exatamente como est√°):\n${additionalRequirements.match(/\[CHORUS\]\s*([\s\S]+?)(?=\n\n|\[|$)/i)![1].trim()}\n\nüéØ Construa toda a narrativa em torno deste refr√£o, fazendo os versos levarem naturalmente at√© ele.`
      : ""

    const structureGuide = `
üìä ESTRUTURA COMERCIAL OTIMIZADA (3:00-3:30 minutos para streaming)

[INTRO] (8-12 segundos instrumental)
Instru√ß√£o: [INTRO - Instrumental suave com ${subGenreInfo.instruments || "instrumentos principais"}, estabelecendo o clima]

[VERSE 1] (8 linhas empilhadas)
Instru√ß√£o: [VERSE 1 - Voz ${genero.includes("Funk") ? "confiante e direta" : "suave e narrativa"}, estabelecendo a hist√≥ria com detalhes concretos]
- Apresenta personagens, situa√ß√£o, contexto
- Linguagem coloquial intensa
- Cenas visuais claras

[PRE-CHORUS] (2-4 linhas)
Instru√ß√£o: [PRE-CHORUS - Energia crescente, preparando emocionalmente para o refr√£o]
- Transi√ß√£o suave para o refr√£o
- Aumenta tens√£o emocional

[CHORUS] (4 linhas - O MOMENTO MAIS IMPORTANTE)
Instru√ß√£o: [CHORUS - Energia m√°xima, grudento, f√°cil de cantar junto, repete palavras-chave]
- GANCHO na primeira linha
- M√°ximo 8-10 s√≠labas por linha
- Ultra-memor√°vel

[VERSE 2] (8 linhas)
Instru√ß√£o: [VERSE 2 - Desenvolve a hist√≥ria, novos detalhes, mant√©m energia]
- Avan√ßa a narrativa
- Novos √¢ngulos da hist√≥ria

[PRE-CHORUS] (2-4 linhas - repete ou varia levemente)
Instru√ß√£o: [PRE-CHORUS - Energia crescente novamente]

[CHORUS] (4 linhas - repete exatamente)
Instru√ß√£o: [CHORUS - Repete com mesma energia, p√∫blico j√° canta junto]

[BRIDGE] (8 linhas)
Instru√ß√£o: [BRIDGE - Momento de reflex√£o profunda, pode ter solo de ${subGenreInfo.instruments?.split(",")[0] || "guitarra"}, mudan√ßa de perspectiva]
- Quebra o padr√£o
- Reflex√£o ou cl√≠max emocional
- Prepara para final explosivo

[SOLO] (8-16 segundos instrumental)
Instru√ß√£o: [SOLO - Instrumental de ${subGenreInfo.instruments?.split(",")[0] || "guitarra"}, momento de virtuosismo]

[FINAL CHORUS] (4 linhas - repete com MAIS intensidade)
Instru√ß√£o: [FINAL CHORUS - Energia M√ÅXIMA, todos os instrumentos, p√∫blico cantando junto, apoteose]

[OUTRO] (4 linhas ou fade out)
Instru√ß√£o: [OUTRO - Fade out suave ou frase final marcante, deixa saudade]

(Instrumentos: [${subGenreInfo.instruments || (isBachata ? "electric guitar, synthesizer, electronic drums, accordion" : "guitar, bass, drums, keyboard")}] | BPM: ${subGenreInfo.bpm || metrics?.bpm || 100} | Ritmo: ${finalRhythm} | Estilo: ${genero})
`

    const prompt = `${universalRules}
${advancedModeRules}

üéµ Voc√™ √© um compositor PROFISSIONAL brasileiro especializado em criar HITS de ${genero}.

Seu objetivo: Criar uma m√∫sica que GRUDE NA CABE√áA e fa√ßa SUCESSO nas plataformas de streaming.

ESPECIFICA√á√ïES DO CLIENTE:
üìå TEMA: ${tema || "amor e relacionamento"}
üé≠ HUMOR: ${humor || "neutro"}
üé® CRIATIVIDADE: ${criatividade}/10
${inspiracao ? `üí° INSPIRA√á√ÉO: ${inspiracao}` : ""}
${metaforas ? `üåü MET√ÅFORAS (use naturalmente): ${metaforas}` : ""}
${emocoes?.length ? `‚ù§Ô∏è EMO√á√ïES: ${emocoes.join(", ")}` : ""}
${titulo ? `üìù T√çTULO: ${titulo}` : ""}
${additionalRequirements ? `\n‚ö° REQUISITOS ESPECIAIS (PRIORIDADE M√ÅXIMA):\n${additionalRequirements}` : ""}
${chorusContext}

${structureGuide}

üéØ REGRAS DE PROS√ìDIA (${genreConfig.name}):
- Alvo: 8-12 s√≠labas por verso (pode chegar a 13 se frase completa)
- Respira√ß√£o natural ao cantar
- Frases completas > Contagem exata

üî• LEMBRE-SE:
1. REFR√ÉO GRUDENTO √© prioridade #1
2. LINGUAGEM COLOQUIAL BRASILEIRA intensa
3. EMO√á√ÉO AUT√äNTICA > T√©cnica perfeita
4. FRASES COMPLETAS sempre
5. INSTRU√á√ïES MUSICAIS detalhadas em cada se√ß√£o

Escreva a letra completa AGORA, focando em criar um HIT:`

    console.log("[v0] Gerando letra otimizada para hit 2024-2025...")

    const { text } = await generateText({
      model: "openai/gpt-4o",
      prompt,
      temperature: 0.85, // Aumentado para mais criatividade
    })

    let finalLyrics = text.trim()

    finalLyrics = finalLyrics.replace(/^(?:T√≠tulo|Title):\s*.+$/gm, "").trim()
    finalLyrics = finalLyrics.replace(/^\*\*(?:T√≠tulo|Title):\s*.+\*\*$/gm, "").trim()
    finalLyrics = finalLyrics.replace(/^#+\s*(?:T√≠tulo|Title):\s*.+$/gm, "").trim()

    let extractedTitle = titulo || ""

    if (!extractedTitle) {
      const chorusMatch = finalLyrics.match(/\[(?:CHORUS|REFR√ÉO)[^\]]*\]\s*\n([^\n]+)/i)
      if (chorusMatch?.[1]) {
        extractedTitle = chorusMatch[1].trim().split(" ").slice(0, 4).join(" ")
      }
    }

    if (extractedTitle) {
      finalLyrics = `T√≠tulo: ${extractedTitle}\n\n${finalLyrics}`
    }

    finalLyrics = capitalizeLines(finalLyrics)

    console.log("[v0] Letra gerada com sucesso - otimizada para hit!")

    return NextResponse.json({
      letra: finalLyrics,
      titulo: extractedTitle,
    })
  } catch (error) {
    console.error("[v0] Erro ao gerar letra:", error)
    return NextResponse.json(
      { error: "Erro ao gerar letra", details: error instanceof Error ? error.message : "Erro desconhecido" },
      { status: 500 },
    )
  }
}
