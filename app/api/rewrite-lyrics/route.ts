// app/api/rewrite-lyrics/route.ts
import { type NextRequest, NextResponse } from "next/server"
import { generateText } from "ai"
import { capitalizeLines } from "@/lib/utils/capitalize-lyrics"
import { buildGenreRulesPrompt } from "@/lib/validation/genre-rules-builder"
import { countPoeticSyllables } from "@/lib/validation/syllable-counter-brasileiro"
import { getUniversalRhymeRules } from "@/lib/validation/universal-rhyme-rules"
import { formatInstrumentationForAI } from "@/lib/normalized-genre"
import { LineStacker } from "@/lib/utils/line-stacker"
import { validateSyllablesByGenre } from "@/lib/validation/absolute-syllable-enforcer"
import { fixLineToMaxSyllables } from "@/lib/validation/local-syllable-fixer"

import { GENRE_CONFIGS } from "@/lib/genre-config"

function getMaxSyllables(genre: string): number {
  const genreConfig = (GENRE_CONFIGS as any)[genre]
  if (!genreConfig?.prosody_rules?.syllable_count) return 12

  const syllableCount = genreConfig.prosody_rules.syllable_count
  if ("absolute_max" in syllableCount) return syllableCount.absolute_max as number
  if ("without_comma" in syllableCount) {
    const withoutComma = syllableCount.without_comma as { acceptable_up_to?: number; max?: number }
    return withoutComma.acceptable_up_to || withoutComma.max || 12
  }
  if ("with_comma" in syllableCount) {
    const withComma = syllableCount.with_comma as { total_max?: number }
    return withComma.total_max || 12
  }
  return 12
}

// ‚úÖ CORRETOR SUPER AGRESSIVO - SEM DUPLICA√á√ïES
function aggressivelyFixIncompleteLines(lyrics: string): string {
  console.log("[Corrector] üö® INICIANDO CORRE√á√ÉO AGRESSIVA DE VERSOS INCOMPLETOS")
  
  const lines = lyrics.split('\n')
  const fixedLines: string[] = []
  
  // ‚úÖ PADR√ïES DE CORRE√á√ÉO - SEM DUPLICA√á√ïES
  const completionPatterns: { [key: string]: string } = {
    'diante': 'de Ti',
    'aberto,': 'e grato',
    'vida e': 'pela gra√ßa',
    'agrade√ßo': 'pela vida',
    'viver e de': 'amar em Ti',
    'fonte': 'de vida',
    'trazendo': 'renova√ß√£o',
    't√£o': 'puro',
    'criaste': 'o universo',
    'por': 'cada mar',
    '√©': 'nosso lar',
    'posso': 'receber',
    'cada': 'momento',
    'que me': 'acolhe',
    'ser': 'amado',
    'quero': 'cantar',
    'Tua': 'presen√ßa',
    'em': 'amor',
    'Tu': 'est√°s aqui',
    'o Teu': 'caminho',
    'que √©': 'Teu dom',
    'com': 'Tua cria√ß√£o',
    'de': 'filho Teu',
    'sempre': 'fiel'
  }

  let corrections = 0

  for (let i = 0; i < lines.length; i++) {
    let line = lines[i].trim()
    
    // Ignora tags e metadata
    if (!line || line.startsWith('### [') || line.startsWith('(Instrumentation)') || line.startsWith('(Genre)')) {
      fixedLines.push(line)
      continue
    }

    const cleanLine = line.replace(/\[.*?\]/g, "").replace(/\(.*?\)/g, "").trim()
    const lastWord = cleanLine.split(/\s+/).pop()?.toLowerCase() || ''
    
    // ‚úÖ DETECTA SE √â VERSO INCOMPLETO
    const incompleteWords = ['que', 'do', 'por', 'me', 'te', 'em', 'a', 'o', 'de', 'da', 'no', 'na', 'com', 'se', 't√£o', 'e', 'diante', 'aberto', 'vida', 'fonte', 'trazendo', 'cada', 'meu', 'Tua', 'sempre']
    const isIncomplete = 
      (lastWord && incompleteWords.includes(lastWord)) ||
      cleanLine.endsWith(',') ||
      cleanLine.endsWith('-') ||
      (cleanLine.split(/\s+/).filter(w => w.length > 0).length < 3)

    if (isIncomplete) {
      console.log(`[Corrector] üö® VERSO INCOMPLETO DETECTADO: "${line}"`)
      
      // ‚úÖ CORRE√á√ÉO INTELIGENTE BASEADA NO CONTEXTO
      let fixedLine = line
      
      // Remove pontua√ß√£o de continua√ß√£o
      if (fixedLine.endsWith(',') || fixedLine.endsWith('-')) {
        fixedLine = fixedLine.slice(0, -1).trim()
      }
      
      // Aplica completamento baseado no padr√£o
      if (completionPatterns[lastWord]) {
        fixedLine += ' ' + completionPatterns[lastWord]
      } else {
        // Completamento gen√©rico baseado no contexto
        if (lastWord === 'que') fixedLine += ' Deus me deu'
        else if (lastWord === 'do') fixedLine += ' Senhor'
        else if (lastWord === 'por') fixedLine += ' tudo'
        else if (lastWord === 'me') fixedLine += ' guia'
        else if (lastWord === 'te') fixedLine += ' amo'
        else if (lastWord === 'de') fixedLine += ' amor'
        else if (lastWord === 'meu') fixedLine += ' cora√ß√£o'
        else if (lastWord === 'e') fixedLine += ' gra√ßa'
        else fixedLine += ' sempre'
      }
      
      // Garante pontua√ß√£o final
      if (!fixedLine.endsWith('.') && !fixedLine.endsWith('!') && !fixedLine.endsWith('?')) {
        fixedLine += '.'
      }
      
      console.log(`[Corrector] ‚úÖ CORRIGIDO PARA: "${fixedLine}"`)
      fixedLines.push(fixedLine)
      corrections++
    } else {
      fixedLines.push(line)
    }
  }

  console.log(`[Corrector] üéâ CORRE√á√ÉO CONCLU√çDA: ${corrections} versos corrigidos`)
  return fixedLines.join('\n')
}

export async function POST(request: NextRequest) {
  try {
    const {
      originalLyrics,
      genre,
      mood,
      theme,
      additionalRequirements,
      title,
      performanceMode = "standard",
    } = await request.json()

    if (!originalLyrics?.trim()) {
      return NextResponse.json({ error: "Letra original √© obrigat√≥ria" }, { status: 400 })
    }
    if (!genre || typeof genre !== "string" || !genre.trim()) {
      return NextResponse.json({ error: "G√™nero √© obrigat√≥rio" }, { status: 400 })
    }

    console.log(`[API] üéµ Iniciando reescrita para: ${genre}`)

    const maxSyllables = getMaxSyllables(genre)
    const rhymeRules = getUniversalRhymeRules(genre)
    const genreRules = buildGenreRulesPrompt(genre)

    // ‚úÖ PROMPT ULTRA-EXPL√çCITO
    const prompt = `COMPOSITOR PROFISSIONAL - G√äNERO: ${genre.toUpperCase()}

üö®üö®üö® INSTRU√á√ÉO CR√çTICA: VERSOS COMPLETOS OU N√ÉO ENVIE üö®üö®üö®

CADA VERSO DEVE SER UMA FRASE COMPLETA E INDEPENDENTE.

üö´ PROIBIDO TERMINAR COM:
que, do, por, me, te, em, a, o, de, da, no, na, com, se, t√£o, e, diante, aberto, vida, fonte, trazendo, cada, meu, Tua, sempre

‚úÖ EXEMPLOS DE VERSOS COMPLETOS:
"Senhor, hoje estou aqui diante de Ti"
"Com o cora√ß√£o aberto e cheio de gratid√£o" 
"Agrade√ßo pela vida e por Tua gra√ßa"
"Teu amor me renova e me sustenta sempre"

LETRA ORIGINAL (INSPIRA√á√ÉO):
${originalLyrics}

TEMA: ${theme || "Gratid√£o divina"}
HUMOR: ${mood || "Reverente e alegre"}

${additionalRequirements ? `REQUISITOS: ${additionalRequirements}` : ""}

T√âCNICA:
- M√°ximo ${maxSyllables} s√≠labas por verso
- ${rhymeRules.requirePerfectRhymes ? "Rimas perfeitas" : "Rimas naturais"}
- Linguagem gospel contempor√¢nea

ESTRUTURA:
${
  performanceMode === "performance" 
    ? `### [INTRO] (4 linhas COMPLETAS)
### [VERSE 1] (6 linhas COMPLETAS)  
### [PRE-CHORUS] (4 linhas COMPLETAS)
### [CHORUS] (6 linhas COMPLETAS)
### [VERSE 2] (6 linhas COMPLETAS)
### [CHORUS] (6 linhas COMPLETAS)
### [BRIDGE] (6 linhas COMPLETAS)
### [CHORUS] (6 linhas COMPLETAS)
### [OUTRO] (4 linhas COMPLETAS)`
    : `### [Intro] (4 linhas COMPLETAS)
### [Verso 1] (6 linhas COMPLETAS)
### [Pr√©-Refr√£o] (4 linhas COMPLETAS)
### [Refr√£o] (6 linhas COMPLETAS)
### [Verso 2] (6 linhas COMPLETAS)
### [Refr√£o] (6 linhas COMPLETAS)
### [Ponte] (6 linhas COMPLETAS)
### [Refr√£o] (6 linhas COMPLETAS)
### [Outro] (4 linhas COMPLETAS)`
}

SE GERAR VERSO INCOMPLETO, A M√öSICA SER√Å INUTILIZ√ÅVEL.

GERE APENAS VERSOS COMPLETOS:`

    console.log(`[API] üîÑ Solicitando gera√ß√£o da IA...`)

    const { text } = await generateText({
      model: "openai/gpt-4o-mini",
      prompt,
      temperature: 0.7,
    })

    let finalLyrics = capitalizeLines(text)
    console.log("[API] üìù Resposta bruta da IA recebida")

    // ‚úÖ ETAPA CR√çTICA: CORRE√á√ÉO AGRESSIVA
    console.log("[API] üöÄ Aplicando corre√ß√£o agressiva...")
    finalLyrics = aggressivelyFixIncompleteLines(finalLyrics)

    // ‚úÖ LIMPEZA
    finalLyrics = finalLyrics
      .split("\n")
      .filter(line => {
        const trimmed = line.trim()
        return !trimmed.startsWith("Retorne") && 
               !trimmed.startsWith("REGRAS") && 
               !trimmed.includes("Explica√ß√£o") &&
               !trimmed.includes("```") &&
               trimmed.length > 0
      })
      .join("\n")
      .trim()

    // ‚úÖ CORRE√á√ÉO DE S√çLABAS
    console.log("[API] üìè Ajustando m√©trica...")
    const lines = finalLyrics.split("\n")
    const correctedLines: string[] = []
    let syllableCorrections = 0

    for (const line of lines) {
      const trimmed = line.trim()
      if (!trimmed || trimmed.startsWith("### [") || trimmed.startsWith("(")) {
        correctedLines.push(line)
        continue
      }

      const cleanLine = trimmed.replace(/\[.*?\]/g, "").replace(/\(.*?\)/g, "").trim()
      if (!cleanLine) {
        correctedLines.push(line)
        continue
      }

      const syllables = countPoeticSyllables(cleanLine)
      if (syllables > maxSyllables) {
        const fixed = fixLineToMaxSyllables(trimmed, maxSyllables)
        correctedLines.push(fixed)
        syllableCorrections++
      } else {
        correctedLines.push(line)
      }
    }

    if (syllableCorrections > 0) {
      console.log(`[API] ‚úÖ ${syllableCorrections} ajustes de s√≠laba aplicados`)
      finalLyrics = correctedLines.join("\n")
    }

    // ‚úÖ FINALIZA√á√ÉO
    console.log("[API] üìö Aplicando empilhamento...")
    const stackingResult = LineStacker.stackLines(finalLyrics)
    finalLyrics = stackingResult.stackedLyrics

    console.log("[API] üé∏ Adicionando instrumenta√ß√£o...")
    const instrumentation = formatInstrumentationForAI(genre, finalLyrics)
    finalLyrics = `${finalLyrics}\n\n${instrumentation}`

    const totalLines = finalLyrics.split('\n').filter(line => line.trim().length > 0).length
    console.log(`[API] üéâ PROCESSO CONCLU√çDO: ${totalLines} linhas`)

    return NextResponse.json({
      success: true,
      lyrics: finalLyrics,
      title: title || `${theme || "M√∫sica"} - ${genre}`,
      metadata: {
        genre,
        performanceMode,
        maxSyllables,
        totalLines,
        syllableCorrections,
      },
    })

  } catch (error) {
    console.error("[API] ‚ùå Erro cr√≠tico:", error)
    return NextResponse.json(
      {
        error: "Falha na gera√ß√£o da letra",
        details: process.env.NODE_ENV === "development" ? error : undefined,
      },
      { status: 500 },
    )
  }
}

export async function GET() {
  return NextResponse.json({ error: "M√©todo n√£o permitido" }, { status: 405 })
}
