import { type NextRequest, NextResponse } from "next/server"
import { generateText } from "ai"
import { capitalizeLines } from "@/lib/utils/capitalize-lyrics"
import { buildGenreRulesPrompt } from "@/lib/validation/genre-rules-builder"
import { countPoeticSyllables } from "@/lib/validation/syllable-counter-brasileiro"
import { getUniversalRhymeRules } from "@/lib/validation/universal-rhyme-rules"
import { formatInstrumentationForAI } from "@/lib/normalized-genre"
import { LineStacker } from "@/lib/utils/line-stacker"
import { validateSyllablesByGenre } from "@/lib/validation/absolute-syllable-enforcer"
import { fixLineToMaxSyllables } from "@/lib/validation/local-syllable-fixer"

// ‚úÖ NOVA ABORDAGEM: Gera√ß√£o por partes com valida√ß√£o rigorosa
async function generateCompleteSection(
  sectionType: string,
  context: string,
  genre: string,
  maxSyllables: number,
  lineCount: number
): Promise<string> {
  const prompt = `COMPOSITOR ESPECIALIZADO EM ${genre.toUpperCase()}

GERAR APENAS ${sectionType.toUpperCase()} - ${lineCount} LINHAS COMPLETAS

CONTEXTO DA M√öSICA:
${context}

REGRAS ABSOLUTAS:
- CADA LINHA deve ser uma FRASE COMPLETA
- NUNCA termine com: "que", "do", "por", "me", "te", "nos", "em", "a", "o"
- Cada verso deve fazer sentido SOZINHO
- M√°ximo ${maxSyllables} s√≠labas por linha
- Use pontua√ß√£o final (. ! ?) em CADA linha

EXEMPLOS CORRETOS:
‚úÖ "Senhor, eu Te agrade√ßo pela vida"
‚úÖ "Tua gra√ßa me sustenta a cada dia" 
‚úÖ "O amor que sinto enche meu cora√ß√£o"
‚úÖ "A fam√≠lia que me abra√ßa com carinho"

EXEMPLOS ERRADOS (NUNCA FA√áA):
‚ùå "Senhor, eu Te agrade√ßo pela" (INCOMPLETO)
‚ùå "Tua gra√ßa me sustenta a cada" (INCOMPLETO)
‚ùå "O amor que sinto enche meu" (INCOMPLETO)

Gere ${lineCount} linhas COMPLETAS para ${sectionType}:

${sectionType.toUpperCase()}:`

  const { text } = await generateText({
    model: "openai/gpt-4o-mini",
    prompt,
    temperature: 0.7,
  })

  return text.split('\n')
    .filter(line => line.trim().length > 0)
    .slice(0, lineCount)
    .join('\n')
}

// ‚úÖ VALIDA√á√ÉO RIGOROSA DE VERSOS COMPLETOS
function validateCompleteLines(lyrics: string): { valid: boolean; errors: string[] } {
  const errors: string[] = []
  const lines = lyrics.split('\n')
  
  const incompleteEndings = [
    'que', 'do', 'por', 'me', 'te', 'nos', 'em', 'a', 'o', 'de', 'da', 
    'no', 'na', 'com', 'sem', 'se', 'que', 'um', 'uma', 'os', 'as'
  ]

  for (let i = 0; i < lines.length; i++) {
    const line = lines[i].trim()
    if (!line || line.startsWith('[') || line.startsWith('(')) continue

    const cleanLine = line.replace(/\[.*?\]/g, "").replace(/\(.*?\)/g, "").trim()
    const lastWord = cleanLine.split(/\s+/).pop()?.toLowerCase()

    if (lastWord && incompleteEndings.includes(lastWord)) {
      errors.push(`Linha ${i + 1}: Termina com palavra incompleta "${lastWord}" - "${cleanLine}"`)
    }

    if (cleanLine.endsWith(',') || cleanLine.endsWith('-')) {
      errors.push(`Linha ${i + 1}: Termina com pontua√ß√£o de continua√ß√£o - "${cleanLine}"`)
    }

    const words = cleanLine.split(/\s+/).filter(w => w.length > 0)
    if (words.length < 3 && !cleanLine.match(/^(Am√©m|Aleluia|Gl√≥ria|Oh|Ah)$/i)) {
      errors.push(`Linha ${i + 1}: Muito curta (${words.length} palavras) - "${cleanLine}"`)
    }
  }

  return { valid: errors.length === 0, errors }
}

export async function POST(request: NextRequest) {
  try {
    const {
      originalLyrics,
      genre,
      mood,
      theme,
      additionalRequirements,
      title,
      performanceMode = "standard",
    } = await request.json()

    if (!originalLyrics?.trim()) {
      return NextResponse.json({ error: "Letra original √© obrigat√≥ria" }, { status: 400 })
    }
    if (!genre || typeof genre !== "string" || !genre.trim()) {
      return NextResponse.json({ error: "G√™nero √© obrigat√≥rio" }, { status: 400 })
    }

    console.log(`[API] üéµ GERANDO LETRA COMPLETA para: ${genre}`)

    const syllableValidation = validateSyllablesByGenre("", genre)
    const maxSyllables = syllableValidation.maxSyllables
    const rhymeRules = getUniversalRhymeRules(genre)

    // ‚úÖ CONTEXTO PARA TODAS AS SE√á√ïES
    const musicContext = `TEMA: ${theme || "Gratid√£o a Deus"}
HUMOR: ${mood || "Alegre e reverente"}
G√äNERO: ${genre}
LETRA ORIGINAL COMO INSPIRA√á√ÉO:
${originalLyrics}

${additionalRequirements ? `REQUISITOS: ${additionalRequirements}` : ''}`

    // ‚úÖ GERAR CADA SE√á√ÉO SEPARADAMENTE
    console.log("[API] üéº Gerando se√ß√µes individualmente...")
    
    const intro = await generateCompleteSection("Intro", musicContext, genre, maxSyllables, 4)
    const verse1 = await generateCompleteSection("Verso 1", musicContext, genre, maxSyllables, 4)
    const preChorus = await generateCompleteSection("Pr√©-Refr√£o", musicContext, genre, maxSyllables, 2)
    const chorus = await generateCompleteSection("Refr√£o", musicContext, genre, maxSyllables, 4)
    const verse2 = await generateCompleteSection("Verso 2", musicContext, genre, maxSyllables, 4)
    const bridge = await generateCompleteSection("Ponte", musicContext, genre, maxSyllables, 4)
    const outro = await generateCompleteSection("Outro", musicContext, genre, maxSyllables, 3)

    // ‚úÖ MONTAR LETRA COMPLETA
    let finalLyrics = ""
    if (performanceMode === "performance") {
      finalLyrics = `[INTRO]
${intro}

[VERSE 1]
${verse1}

[PRE-CHORUS]
${preChorus}

[CHORUS]
${chorus}

[VERSE 2]
${verse2}

[CHORUS]
${chorus}

[BRIDGE]
${bridge}

[CHORUS]
${chorus}

[OUTRO]
${outro}`
    } else {
      finalLyrics = `[Intro]
${intro}

[Verso 1]
${verse1}

[Pr√©-Refr√£o]
${preChorus}

[Refr√£o]
${chorus}

[Verso 2]
${verse2}

[Refr√£o]
${chorus}

[Ponte]
${bridge}

[Refr√£o]
${chorus}

[Outro]
${outro}`
    }

    // ‚úÖ CAPITALIZAR E VALIDAR
    finalLyrics = capitalizeLines(finalLyrics)
    
    console.log("[API] üîç Validando versos completos...")
    const validation = validateCompleteLines(finalLyrics)
    
    if (!validation.valid) {
      console.log("[API] ‚ö†Ô∏è Versos incompletos detectados, aplicando corre√ß√µes...")
      validation.errors.forEach(error => console.log(`[API]   - ${error}`))
      
      // ‚úÖ CORRE√á√ÉO AUTOM√ÅTICA DE S√çLABAS
      const lines = finalLyrics.split('\n')
      const correctedLines: string[] = []
      let corrections = 0

      for (const line of lines) {
        const trimmed = line.trim()
        if (!trimmed || trimmed.startsWith("(") || trimmed.startsWith("[")) {
          correctedLines.push(line)
          continue
        }

        const lineWithoutBrackets = trimmed.replace(/\[.*?\]/g, "").replace(/\(.*?\)/g, "").trim()
        if (!lineWithoutBrackets) {
          correctedLines.push(line)
          continue
        }

        const syllables = countPoeticSyllables(lineWithoutBrackets)
        if (syllables > maxSyllables) {
          const fixed = fixLineToMaxSyllables(trimmed, maxSyllables)
          correctedLines.push(fixed)
          corrections++
        } else {
          correctedLines.push(line)
        }
      }

      if (corrections > 0) {
        finalLyrics = correctedLines.join("\n")
        console.log(`[API] ‚úÖ ${corrections} verso(s) corrigido(s) para m√©trica`)
      }
    }

    // ‚úÖ EMPILHAR LINHAS E ADICIONAR INSTRUMENTA√á√ÉO
    console.log("[API] üìö Empilhando versos...")
    const stackingResult = LineStacker.stackLines(finalLyrics)
    finalLyrics = stackingResult.stackedLyrics

    console.log("[API] üé∏ Adicionando instrumenta√ß√£o...")
    const instrumentation = formatInstrumentationForAI(genre, finalLyrics)
    finalLyrics = `${finalLyrics}\n\n${instrumentation}`

    // ‚úÖ M√âTRICAS FINAIS
    const finalValidation = validateCompleteLines(finalLyrics)
    const lineCount = finalLyrics.split('\n').filter(line => line.trim().length > 0).length

    console.log(`[API] ‚úÖ Gera√ß√£o conclu√≠da: ${lineCount} linhas`)
    console.log(`[API] ‚úÖ Versos completos: ${finalValidation.valid ? 'SIM' : 'COM ERROS'}`)

    return NextResponse.json({
      success: true,
      lyrics: finalLyrics,
      title: title || `${theme || "M√∫sica"} - ${genre}`,
      metadata: {
        genre,
        performanceMode,
        maxSyllables,
        totalLines: lineCount,
        completeVerses: finalValidation.valid,
        validationErrors: finalValidation.errors,
        rhymeStyle: rhymeRules.requirePerfectRhymes ? "Rimas perfeitas" : "Rimas naturais",
      },
    })

  } catch (error) {
    console.error("[API] ‚ùå Erro na gera√ß√£o:", error)
    return NextResponse.json(
      {
        error: "Erro ao gerar letra completa",
        details: process.env.NODE_ENV === "development" ? (error as any)?.stack : undefined,
      },
      { status: 500 },
    )
  }
}

export async function GET() {
  return NextResponse.json({ error: "M√©todo n√£o permitido" }, { status: 405 })
}
