import { type NextRequest, NextResponse } from "next/server"
import { MetaComposer } from "@/lib/orchestrator/meta-composer"
import { capitalizeLines } from "@/lib/utils/capitalize-lyrics"

export async function POST(request: NextRequest) {
  try {
    const {
      letraOriginal,
      genero,
      humor,
      tema,
      criatividade,
      formattingStyle,
      additionalRequirements,
      advancedMode,
      universalPolish,
      syllableTarget,
      metrics,
      emocoes,
      inspiracao,
      metaforas,
      titulo,
      performanceMode,
    } = await request.json()

    // Valida√ß√µes b√°sicas
    if (!letraOriginal?.trim()) {
      return NextResponse.json({ error: "Letra original √© obrigat√≥ria" }, { status: 400 })
    }

    if (!genero) {
      return NextResponse.json({ error: "G√™nero √© obrigat√≥rio" }, { status: 400 })
    }

    console.log("[v0] üéµ Iniciando reescrita com MetaComposer...")
    console.log("[v0] üìä Par√¢metros:", {
      genero,
      tema: tema || "N√£o especificado",
      humor: humor || "N√£o especificado",
      performanceMode: performanceMode || "standard",
    })

    const compositionRequest = {
      genre: genero,
      theme: tema || "Reescrita melhorada",
      mood: humor || "Adaptado ao tema",
      additionalRequirements: `REESCRITA DA LETRA ORIGINAL:
${letraOriginal}

${additionalRequirements || ""}

INSTRU√á√ïES:
- Melhore a qualidade mantendo o tema e estrutura
- Corrija problemas de m√©trica e rimas
- Mantenha a ess√™ncia da letra original`,
      syllableTarget: syllableTarget || { min: 9, max: 11, ideal: 10 },
      applyFinalPolish: universalPolish !== false,
    }

    const result = await MetaComposer.compose(compositionRequest)

    const finalLyrics = capitalizeLines(result.lyrics)

    console.log("[v0] ‚úÖ Reescrita conclu√≠da com MetaComposer!")
    console.log("[v0] üìù Resultado:", {
      titulo: result.title,
      score: result.metadata.finalScore,
    })

    return NextResponse.json({
      letra: finalLyrics,
      titulo: result.title || titulo || "Sem T√≠tulo",
      metadata: {
        performanceMode: performanceMode || "standard",
        score: result.metadata.finalScore,
        polishingApplied: result.metadata.polishingApplied,
        iterations: result.metadata.iterations || 1,
        rhymeScore: result.metadata.rhymeScore,
        rhymeTarget: result.metadata.rhymeTarget,
      },
    })
  } catch (error) {
    console.error("[v0] üí• Erro na reescrita:", error)

    return NextResponse.json(
      {
        error: error instanceof Error ? error.message : "Erro interno ao reescrever letra",
        details: process.env.NODE_ENV === "development" ? String(error) : undefined,
      },
      { status: 500 },
    )
  }
}

// Handler para m√©todo n√£o permitido
export async function GET() {
  return NextResponse.json({ error: "M√©todo n√£o permitido. Use POST." }, { status: 405 })
}
