import { type NextRequest, NextResponse } from "next/server"
import { generateText } from "ai"
import { capitalizeLines } from "@/lib/utils/capitalize-lyrics"
import { buildGenreRulesPrompt } from "@/lib/validation/genre-rules-builder"
import { countPoeticSyllables } from "@/lib/validation/syllable-counter-brasileiro"
import { getUniversalRhymeRules } from "@/lib/validation/universal-rhyme-rules"
import {
  formatSertanejoPerformance,
  shouldUsePerformanceFormat,
} from "@/lib/formatters/sertanejo-performance-formatter"
import { formatInstrumentationForAI } from "@/lib/normalized-genre"
import { LineStacker } from "@/lib/utils/line-stacker"
import { enhanceLyricsRhymes } from "@/lib/validation/rhyme-enhancer"
import { validateRhymesForGenre } from "@/lib/validation/rhyme-validator"
import { validateSyllablesByGenre } from "@/lib/validation/absolute-syllable-enforcer"
import { fixLineToMaxSyllables } from "@/lib/validation/local-syllable-fixer"
import { validateVerseCompleteness, fixIncompleteVerses } from "@/lib/validation/verse-completeness-validator"
import { validateGenreIsolation, cleanGenreCrossContamination } from "@/lib/validation/genre-isolation-validator"

export async function POST(request: NextRequest) {
  try {
    const {
      originalLyrics,
      genre,
      mood,
      theme,
      additionalRequirements,
      title,
      performanceMode = "standard",
    } = await request.json()

    if (!originalLyrics?.trim()) {
      return NextResponse.json({ error: "Letra original √© obrigat√≥ria" }, { status: 400 })
    }
    if (!genre || typeof genre !== "string" || !genre.trim()) {
      return NextResponse.json({ error: "G√™nero √© obrigat√≥rio" }, { status: 400 })
    }

    console.log(`[API] üéµ Reescrevendo letra para: ${genre}`)

    const syllableValidation = validateSyllablesByGenre("", genre)
    const maxSyllables = syllableValidation.maxSyllables

    const rhymeRules = getUniversalRhymeRules(genre)
    const genreRules = buildGenreRulesPrompt(genre)

    const additionalReqsSection = additionalRequirements?.trim()
      ? `
‚ö†Ô∏è REQUISITOS ADICIONAIS (OBRIGAT√ìRIOS - N√ÉO PODEM SER IGNORADOS):
${additionalRequirements}

ATEN√á√ÉO CR√çTICA SOBRE HOOKS E REFR√ïES ESCOLHIDOS:
- Se houver [HOOK] nos requisitos acima, voc√™ DEVE usar esse hook LITERALMENTE na m√∫sica
- Se houver [CHORUS] ou [REFR√ÉO] nos requisitos acima, voc√™ DEVE usar esse refr√£o LITERALMENTE como O REFR√ÉO da m√∫sica
- N√ÉO crie um novo refr√£o se j√° foi fornecido um - USE O FORNECIDO
- N√ÉO crie um novo hook se j√° foi fornecido um - USE O FORNECIDO
- Os VERSOS devem ser escritos para COMPLETAR e CONECTAR com o hook/refr√£o escolhido
- A letra deve ser constru√≠da EM TORNO do hook/refr√£o fornecido, n√£o ignor√°-lo
- Voc√™ DEVE seguir TODOS os outros requisitos adicionais acima
- Os requisitos adicionais t√™m prioridade ABSOLUTA sobre qualquer outra instru√ß√£o
`
      : ""

    const genreIsolationInstructions = getGenreIsolationInstructions(genre)

    const prompt = `Voc√™ √© um compositor brasileiro especializado em ${genre}.

TAREFA: Reescrever COMPLETAMENTE a letra abaixo mantendo a ess√™ncia mas adaptando para ${genre}.

üéØ REGRA ABSOLUTA - VERSOS COMPLETOS:
- CADA VERSO deve ser uma FRASE COMPLETA com come√ßo, meio e FIM
- NUNCA corte versos no meio como "Aben√ßoado sou, por cada" ou "Teus presentes s√£o grandes, n√£o posso"
- Cada linha deve fazer sentido SOZINHA
- Termine CADA verso com pontua√ß√£o final (. ! ?) ou v√≠rgula natural

LETRA ORIGINAL PARA INSPIRA√á√ÉO:
${originalLyrics}

TEMA: ${theme || "Manter tema original"}
HUMOR: ${mood || "Manter humor original"}

${additionalReqsSection}

${genreIsolationInstructions}

REGRAS DE M√âTRICA:
- M√°ximo: ${maxSyllables} s√≠labas por verso (limite absoluto)
- Ideal: 8-10 s√≠labas por verso
- Use contra√ß√µes naturais ("c√™", "pra", "t√¥", "t√°")
- Se n√£o couber, REESCREVA o verso inteiro, N√ÉO CORTE

REGRAS DE RIMA:
- ${rhymeRules.requirePerfectRhymes ? "Rimas perfeitas obrigat√≥rias" : "Rimas naturais aceit√°veis"}
- ${rhymeRules.minRichRhymePercentage > 0 ? `M√≠nimo ${rhymeRules.minRichRhymePercentage}% rimas ricas` : ""}

${genreRules.fullPrompt}

ESTRUTURA OBRIGAT√ìRIA (COMPLETA):
${
  performanceMode === "performance"
    ? `[INTRO] (2-4 linhas)
[VERSE 1] (4-6 linhas)
[PRE-CHORUS] (2-4 linhas) 
[CHORUS] (4-6 linhas)
[VERSE 2] (4-6 linhas)
[CHORUS] (4-6 linhas)
[BRIDGE] (4-6 linhas)
[CHORUS] (4-6 linhas)
[OUTRO] (2-4 linhas)`
    : `[Intro] (2-4 linhas)
[Verso 1] (4-6 linhas)
[Pr√©-Refr√£o] (2-4 linhas)
[Refr√£o] (4-6 linhas)
[Verso 2] (4-6 linhas)
[Refr√£o] (4-6 linhas)
[Ponte] (4-6 linhas)
[Refr√£o] (4-6 linhas)
[Outro] (2-4 linhas)`
}

üö´ PROIBIDO ABSOLUTAMENTE - EXEMPLOS DO QUE N√ÉO FAZER:
- ‚ùå "Aben√ßoado sou, por cada" (INCOMPLETO)
- ‚ùå "Teus presentes s√£o grandes, n√£o posso" (INCOMPLETO) 
- ‚ùå "Levanta a voz, d√° gra√ßas, vem comigo" (INCOMPLETO)
- ‚ùå "No cora√ß√£o a alegria, n√£o podemos" (INCOMPLETO)
- ‚ùå Terminar com "por cada", "n√£o posso", "sempre a nos", "vamos juntos"
- ‚ùå Frases sem verbo principal
- ‚ùå Versos que dependem do pr√≥ximo para fazer sentido

‚úÖ EXEMPLOS DO QUE FAZER - VERSOS COMPLETOS:
- ‚úÖ "Aben√ßoado sou por cada d√°diva Tua"
- ‚úÖ "Teus presentes s√£o grandes, n√£o posso negar"
- ‚úÖ "Levanta a voz e d√° gra√ßas, vem comigo"
- ‚úÖ "No cora√ß√£o a alegria n√£o pode caber"
- ‚úÖ Cada verso = frase completa com sujeito + verbo + complemento

REGRAS DE COMPOSI√á√ÉO:
1. CADA VERSO = FRASE COMPLETA
2. Sujeito + verbo + complemento em CADA linha
3. Pontua√ß√£o correta no final de CADA verso
4. Se n√£o couber na m√©trica, REESCREVA completamente
5. Mantenha a mensagem central da letra original
6. Refr√£o memor√°vel e repet√≠vel (4-6 linhas COMPLETAS)
7. ${performanceMode === "performance" ? "Tags em ingl√™s, versos em portugu√™s" : "Tags em portugu√™s"}

üìè CONTROLE DE QUALIDADE:
- Letra FINAL: 25-35 linhas totais
- TODOS os versos devem ser frases COMPLETAS
- Estrutura completa com todas as se√ß√µes
- Refr√£o repetido 3 vezes (igual nas 3 repeti√ß√µes)

Retorne APENAS a letra reescrita COMPLETA com VERSOS COMPLETOS, sem explica√ß√µes.`

    console.log(`[API] üîÑ Reescrevendo com limite m√°ximo de ${maxSyllables} s√≠labas...`)
    if (additionalRequirements) {
      console.log(`[API] ‚ö†Ô∏è REQUISITOS ADICIONAIS OBRIGAT√ìRIOS DETECTADOS`)
    }

    // ‚úÖ GERA√á√ÉO COM VALIDA√á√ÉO EM LOOP
    let finalLyrics = ""
    let attempts = 0
    let hasCompleteVerses = false

    while (attempts < 3 && !hasCompleteVerses) {
      attempts++
      console.log(`[API] üîÑ Tentativa ${attempts} de gera√ß√£o...`)

      const { text } = await generateText({
        model: "openai/gpt-4o-mini",
        prompt: attempts === 1 ? prompt : `${prompt}\n\nüö® TENTATIVA ${attempts}: A letra anterior tinha versos incompletos. Gere TODOS os versos COMPLETOS agora!`,
        temperature: 0.7,
      })

      finalLyrics = capitalizeLines(text)

      // ‚úÖ VERIFICA√á√ÉO R√ÅPIDA DE VERSOS INCOMPLETOS
      const incompletePatterns = [
        /por cada$/i, /n√£o posso$/i, /sempre a nos$/i, /vamos juntos$/i, 
        /comigo$/i, /podemos$/i, /do meu$/i, /cada novo$/i, /onde posso$/i
      ]
      
      const lines = finalLyrics.split('\n')
      let hasIncomplete = false
      
      for (const line of lines) {
        const cleanLine = line.replace(/\[.*?\]/g, "").replace(/\(.*?\)/g, "").trim()
        if (cleanLine && incompletePatterns.some(pattern => pattern.test(cleanLine))) {
          console.log(`[API] ‚ö†Ô∏è Verso incompleto detectado: "${cleanLine}"`)
          hasIncomplete = true
          break
        }
      }

      if (!hasIncomplete) {
        hasCompleteVerses = true
        console.log(`[API] ‚úÖ Todos os versos est√£o completos na tentativa ${attempts}`)
      } else if (attempts < 3) {
        console.log(`[API] üîÑ Regenerando devido a versos incompletos...`)
      }
    }

    // ‚úÖ LIMPEZA DE LINHAS INDESEJADAS
    finalLyrics = finalLyrics
      .split("\n")
      .filter(
        (line) =>
          !line.trim().startsWith("Retorne") && 
          !line.trim().startsWith("REGRAS") && 
          !line.includes("Explica√ß√£o") &&
          !line.includes("```") &&
          line.trim().length > 0
      )
      .join("\n")
      .trim()

    // ‚úÖ VALIDA√á√ÉO E CORRE√á√ÉO AUTOM√ÅTICA
    console.log("[API] üîç Validando isolamento de g√™nero...")
    const isolationValidation = validateGenreIsolation(finalLyrics, genre)
    if (!isolationValidation.valid) {
      console.log(`[API] ‚ö†Ô∏è ${isolationValidation.violations.length} viola√ß√£o(√µes) de isolamento detectada(s)`)
      finalLyrics = cleanGenreCrossContamination(finalLyrics, genre)
    }

    console.log("[API] üìù Validando completude dos versos...")
    const verseValidation = validateVerseCompleteness(finalLyrics)
    if (!verseValidation.valid) {
      console.log("[API] üîß Corrigindo versos incompletos automaticamente...")
      const verseFixResult = await fixIncompleteVerses(finalLyrics, genre, theme)
      if (verseFixResult.changes.length > 0) {
        console.log(`[API] ‚úÖ ${verseFixResult.changes.length} verso(s) corrigido(s)`)
        finalLyrics = verseFixResult.fixed
      }
    }

    console.log("[API] üéµ Validando qualidade das rimas...")
    const rhymeValidation = validateRhymesForGenre(finalLyrics, genre)
    if (!rhymeValidation.valid) {
      console.log("[API] üîß Melhorando rimas automaticamente...")
      const rhymeEnhancement = await enhanceLyricsRhymes(finalLyrics, genre, theme || "reescrita", 0.7)
      if (rhymeEnhancement.improvements.length > 0) {
        finalLyrics = rhymeEnhancement.enhancedLyrics
      }
    }

    console.log("[API] üîß Aplicando corre√ß√£o autom√°tica de s√≠labas...")
    const lines = finalLyrics.split("\n")
    const correctedLines: string[] = []
    let corrections = 0

    for (const line of lines) {
      const trimmed = line.trim()
      if (!trimmed || trimmed.startsWith("(") || trimmed.startsWith("[")) {
        correctedLines.push(line)
        continue
      }

      const lineWithoutBrackets = trimmed.replace(/\[.*?\]/g, "").replace(/\(.*?\)/g, "").trim()
      if (!lineWithoutBrackets) {
        correctedLines.push(line)
        continue
      }

      const syllables = countPoeticSyllables(lineWithoutBrackets)
      if (syllables > maxSyllables) {
        const fixed = fixLineToMaxSyllables(trimmed, maxSyllables)
        correctedLines.push(fixed)
        corrections++
      } else {
        correctedLines.push(line)
      }
    }

    if (corrections > 0) {
      console.log(`[API] ‚úÖ ${corrections} verso(s) corrigido(s) automaticamente`)
      finalLyrics = correctedLines.join("\n")
    }

    // ‚úÖ FORMATA√á√ÉO FINAL
    if (shouldUsePerformanceFormat(genre, performanceMode)) {
      console.log("[API] üé≠ Aplicando formata√ß√£o de performance...")
      finalLyrics = formatSertanejoPerformance(finalLyrics, genre)
    }

    console.log("[API] üé∏ Adicionando instrumenta√ß√£o...")
    const instrumentation = formatInstrumentationForAI(genre, finalLyrics)
    finalLyrics = `${finalLyrics}\n\n${instrumentation}`

    // ‚úÖ M√âTRICAS FINAIS
    const finalValidation = validateSyllablesByGenre(finalLyrics, genre)
    const finalVerseValidation = validateVerseCompleteness(finalLyrics)
    const finalLineCount = finalLyrics.split('\n').filter(line => line.trim().length > 0).length

    console.log(`[API] ‚úÖ Valida√ß√£o final: ${finalVerseValidation.score}% versos completos`)
    console.log(`[API] ‚úÖ Tamanho final: ${finalLineCount} linhas`)

    return NextResponse.json({
      success: true,
      lyrics: finalLyrics,
      title: title || `${theme || "Reescrita"} - ${genre}`,
      metadata: {
        finalScore: finalVerseValidation.score,
        genre,
        performanceMode,
        maxSyllables,
        syllableCorrections: corrections,
        verseCompletenessScore: finalVerseValidation.score,
        incompleteVerses: finalVerseValidation.incompleteVerses.length,
        totalLines: finalLineCount,
        structureComplete: finalLineCount >= 20,
        generationAttempts: attempts,
      },
    })
  } catch (error) {
    console.error("[API] ‚ùå Erro na reescrita:", error)
    return NextResponse.json(
      {
        error: error instanceof Error ? error.message : "Erro interno",
        details: process.env.NODE_ENV === "development" ? (error as any)?.stack : undefined,
      },
      { status: 500 },
    )
  }
}

function getGenreIsolationInstructions(genre: string): string {
  const lowerGenre = genre.toLowerCase()

  if (lowerGenre.includes("gospel")) {
    return `
‚ö†Ô∏è ISOLAMENTO DE G√äNERO - GOSPEL:
- NUNCA use instrumentos de sertanejo: sanfona, accordion, viola caipira
- NUNCA use audience cues de sertanejo: "T√° ligado!", "Bicho!", "V√©io!", "√â n√≥is!"
- USE instrumentos de gospel: Piano, Acoustic Guitar, Bass, Drums, Keyboard, Strings
- USE audience cues de gospel: "Am√©m", "Aleluia", "Gl√≥ria a Deus"
- Mantenha tom reverente e inspirador
`
  }

  if (lowerGenre.includes("sertanejo")) {
    return `
‚ö†Ô∏è ISOLAMENTO DE G√äNERO - SERTANEJO:
- NUNCA use linguagem religiosa excessiva (altar, gra√ßa, senhor, deus, f√©, ora√ß√£o)
- USE instrumentos de sertanejo: Viola Caipira, Accordion, Acoustic Guitar, Bass, Drums
- USE audience cues de sertanejo: "T√° ligado!", "Bicho!", "V√©io!", "√â n√≥is!"
- Mantenha tom coloquial e brasileiro
`
  }

  return ""
}

export async function GET() {
  return NextResponse.json({ error: "M√©todo n√£o permitido" }, { status: 405 })
}
