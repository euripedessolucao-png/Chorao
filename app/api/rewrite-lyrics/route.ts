import { NextResponse } from "next/server"
import { generateText } from "ai"
import { getGenreConfig, detectSubGenre, getGenreRhythm } from "@/lib/genre-config"
import { capitalizeLines } from "@/lib/utils/capitalize-lyrics"
import { countPoeticSyllables } from "@/lib/validation/syllable-counter"

export async function POST(request: Request) {
  try {
    const body = await request.json()
    
    console.log('üîç DEBUG - Body completo:', JSON.stringify(body, null, 2))

    // ‚úÖ PROCURA A LETRA E PAR√ÇMETROS
    let finalLyrics = ''
    let finalGenero = ''
    let additionalRequirements = body.additionalRequirements || body.requisitos || ''
    
    // Procura por letra em qualquer campo
    for (const [key, value] of Object.entries(body)) {
      if (typeof value === 'string' && value.length > 10) {
        if (value.length > 50 && !finalLyrics && !key.toLowerCase().includes('requirement')) {
          finalLyrics = value
          console.log(`üìù Letra encontrada no campo: "${key}"`)
        }
      }
      
      // Procura por g√™nero
      if (typeof value === 'string' && 
          ['sertanejo', 'mpb', 'funk', 'forr√≥', 'rock', 'pop', 'gospel', 'piseiro']
            .some(genre => value.toLowerCase().includes(genre))) {
        finalGenero = value
        console.log(`üéµ G√™nero encontrado no campo: "${key}" = "${value}"`)
      }
    }

    // ‚úÖ CAMPOS PADR√ÉO
    if (!finalLyrics) {
      finalLyrics = body.lyrics || body.letra || body.text || body.content || ''
    }

    if (!finalGenero) {
      finalGenero = body.genero || body.genre || body.style || body.tipo || ''
    }

    const finalTema = body.tema || body.theme || body.subject || "Reescrita"
    const finalHumor = body.humor || body.mood || body.emocao || "Adaptado"
    const selectedChoruses = body.selectedChoruses || body.choruses || body.refroes || []

    console.log('üéØ PAR√ÇMETROS IDENTIFICADOS:', {
      finalLyrics: finalLyrics ? `‚úÖ ${finalLyrics.length} chars` : '‚ùå N√ÉO ENCONTRADA',
      finalGenero: finalGenero || '‚ùå N√ÉO ENCONTRADO',
      finalTema,
      finalHumor,
      additionalRequirements: additionalRequirements || 'Nenhum',
      selectedChoruses: selectedChoruses.length,
      allParams: Object.keys(body)
    })

    // ‚úÖ VALIDA√á√ÉO FINAL
    if (!finalLyrics || finalLyrics.trim().length < 10) {
      return NextResponse.json({ 
        error: "Letra n√£o encontrada ou muito curta",
        details: `Par√¢metros recebidos: ${Object.keys(body).join(', ')}`,
        suggestion: "Certifique-se de enviar a letra no par√¢metro 'lyrics' ou 'letra'",
        debug: {
          receivedParams: Object.keys(body),
          lyricsFound: !!finalLyrics,
          lyricsLength: finalLyrics?.length,
          lyricsPreview: finalLyrics?.substring(0, 100)
        }
      }, { status: 400 })
    }

    if (!finalGenero) {
      return NextResponse.json({ 
        error: "G√™nero n√£o encontrado",
        details: `Par√¢metros recebidos: ${Object.keys(body).join(', ')}`,
        suggestion: "Envie o g√™nero no par√¢metro 'genero' ou 'genre'",
        debug: {
          receivedParams: Object.keys(body)
        }
      }, { status: 400 })
    }

    console.log(`[Rewrite] ‚úÖ Iniciando reescrita inteligente - G√™nero: ${finalGenero}`)

    // ‚úÖ CONFIGURA√á√ÉO DO G√äNERO
    const genreConfig = getGenreConfig(finalGenero)
    const subGenreInfo = detectSubGenre(additionalRequirements)
    const defaultRhythm = getGenreRhythm(finalGenero)
    const finalRhythm = subGenreInfo.rhythm || defaultRhythm

    // ‚úÖ AN√ÅLISE DETALHADA DA ESTRUTURA ORIGINAL
    const structureAnalysis = analyzeSongStructure(finalLyrics)
    console.log('[Rewrite] üìä An√°lise estrutural detalhada:', structureAnalysis)

    // ‚úÖ SISTEMA DE PROMPT INTELIGENTE QUE PRESERVA ESTRUTURA
    const universalRules = `
üåç REGRAS DE REWRITE INTELIGENTE

üéØ OBJETIVO PRINCIPAL:
- PRESERVAR a estrutura original (se√ß√µes, ordem, formata√ß√£o)
- MANTER a ess√™ncia emocional e narrativa  
- MELHORAR apenas versos com problemas de m√©trica
- RESPEITAR as instru√ß√µes musicais originais ([INTRO], [VERSO], etc)

‚úÖ ESTRUTURA ORIGINAL (OBRIGAT√ìRIO PRESERVAR):
${structureAnalysis.sections.map(section => `- ${section.type}: ${section.lines.length} versos`).join('\n')}

‚ö†Ô∏è REGRAS DE S√çLABAS (APLICAR SOMENTE ONDE NECESS√ÅRIO):
- Versos problem√°ticos: M√ÅXIMO 12 s√≠labas po√©ticas
- Versos bons: MANTER como est√£o
- Foco em CORRIGIR, n√£o em reescrever tudo

üéµ PRESERVA√á√ÉO DE SE√á√ïES:
- Mantenha TODAS as tags originais: [INTRO], [VERSO], [REFRAO], etc
- Preserve a ORDEM das se√ß√µes
- Mantenha instru√ß√µes musicais: (Viol√£o, Bateria, Sanfona, etc)
- S√≥ altere o conte√∫do dos versos quando necess√°rio

üìù EXEMPLO DE FORMATA√á√ÉO CORRETA:

[INTRO - VIOL√ÉO LENTO, HARM√îNICA]  ‚Üê MANTIDO

[VERSO 1 - VIOL√ÉO AC√öSTICO, BATERIA SUAVE]  ‚Üê MANTIDO
Caf√© esfria, o tempo parou           ‚Üê MANTIDO (se bom)
Teu anel no prato me fez pensar       ‚Üê CORRIGIDO (se necess√°rio)

[REFRAO - SANFONA, PALMAS CONTRATEMPO]  ‚Üê MANTIDO
Sil√™ncio que corta o cora√ß√£o         ‚Üê MANTIDO (se bom)
Teu olhar √© um adeus em v√£o          ‚Üê MANTIDO (se bom)
`

    const lyricsContext = `
üìù LETRA ORIGINAL COMPLETA (PRESERVAR ESTRUTURA):
${finalLyrics}

üéµ AN√ÅLISE ESTRUTURAL IDENTIFICADA:
- Total de se√ß√µes: ${structureAnalysis.sections.length}
- Se√ß√µes: ${structureAnalysis.sections.map(s => s.type).join(' ‚Üí ')}
- Versos totais: ${structureAnalysis.totalLines}
- Versos problem√°ticos: ${structureAnalysis.problematicLines.length}

üéØ DIRETRIZES DE REWRITE:
1. MANTENHA a estrutura de se√ß√µes original
2. PRESERVE tags e instru√ß√µes musicais  
3. CORRIJA apenas versos com >12 s√≠labas
4. MANTENHA versos que j√° est√£o bons
5. RESPEITE o fluxo narrativo emocional
${additionalRequirements ? `6. ATENDER: ${additionalRequirements}` : ''}
`

    const preservedChorusesContext = selectedChoruses.length > 0 ? `
üéµ REFR√ïES PRESERVADOS (INTEGRAR NA ESTRUTURA):
${selectedChoruses.map((chorus: string, index: number) => 
  `Refr√£o ${index + 1}: ${chorus}`
).join('\n')}

IMPORTANTE: Substituir os refr√µes originais por estes, mantendo as tags [REFRAO].
` : ""

    const prompt = `${universalRules}

${lyricsContext}
${preservedChorusesContext}

üéµ Voc√™ √© um editor musical especializado em REWRITE ESTRUTURAL.

SUA TAREFA: Fazer uma reescrita INTELIGENTE que:
- ‚úÖ PRESERVA 90% da estrutura original
- ‚úÖ MANT√âM tags e instru√ß√µes musicais
- ‚úÖ CORRIGE apenas versos problem√°ticos
- ‚úÖ MANT√âM versos que j√° est√£o bons
- ‚úÖ RESPEITA o fluxo emocional da m√∫sica

PROCESSO:
1. ANALISE cada se√ß√£o da estrutura original
2. IDENTIFIQUE versos com problemas de s√≠labas (>12)
3. CORRIJA apenas esses versos problem√°ticos
4. MANTENHA versos bons exatamente como est√£o
5. PRESERVE todas as tags [SE√á√ÉO] e instru√ß√µes
6. USE refr√µes preservados se fornecidos

FORMATO DE SA√çDA (CR√çTICO):
- EXATAMENTE a mesma estrutura de se√ß√µes
- MESMAS tags [SE√á√ÉO - INSTRU√á√ïES]  
- Versos corrigidos apenas onde necess√°rio
- Mesma quantidade de linhas vazias entre se√ß√µes

EXEMPLO DE SA√çDA CORRETA:
[INTRO - VIOL√ÉO LENTO, HARM√îNICA]

[VERSO 1 - VIOL√ÉO AC√öSTICO, BATERIA SUAVE]
Caf√© esfria, o tempo parou
Teu anel no prato me fez pensar
Teu sorriso distante, olhar sem luz
Nosso amor aos poucos vai se apagar

[PR√â-REFRAO - TECLADO RHODES, PERCUSS√ÉO SUAVE]
Teu perfume j√° n√£o √© abrigo
A casa vazia pesa no peito
Cada canto guarda um fim tristonho
E o sil√™ncio cresce, toma tudo

... (continua mesma estrutura)

Gere a letra REEscrita ESTRUTURALMENTE ID√äNTICA agora:`

    console.log("[Rewrite] üéº Gerando reescrita que preserva estrutura...")

    let attempts = 0
    let result: any = null
    let allValid = false

    while (attempts < 3 && !allValid) {
      attempts++
      console.log(`[Rewrite] Tentativa ${attempts}/3...`)

      const { text } = await generateText({
        model: "openai/gpt-4o",
        prompt,
        temperature: 0.7, // Menor temperatura para mais consist√™ncia
      })

      // ‚úÖ CAPTURA A LETRA COMPLETA (n√£o apenas JSON)
      if (text) {
        result = {
          lyrics: text.trim(),
          title: "Letra Reescrita (Estrutura Preservada)",
          metadata: {
            structurePreserved: true,
            correctionType: "Seletiva"
          }
        }
        
        // ‚úÖ VALIDA√á√ÉO INTELIGENTE - s√≥ valida versos, ignora tags
        const validation = validateStructurePreservation(finalLyrics, result.lyrics)
        console.log(`[Rewrite] Valida√ß√£o estrutural:`, validation)
        
        const syllableValidation = validateLyricsSyllables(result.lyrics)
        console.log(`[Rewrite] Valida√ß√£o s√≠labas:`, syllableValidation)
        
        allValid = syllableValidation.valid || attempts === 3
        
        if (!allValid) {
          console.log(`[Rewrite] ‚ö†Ô∏è Viola√ß√µes:`, syllableValidation.violations)
        }
      }
    }

    // ‚úÖ CAPITALIZA√á√ÉO CONSERVADORA - s√≥ nos versos, n√£o nas tags
    if (result.lyrics) {
      result.lyrics = capitalizeSongLyrics(result.lyrics)
    }

    console.log("[Rewrite] ‚úÖ Reescrita estrutural conclu√≠da!")

    return NextResponse.json({
      letra: result.lyrics,
      titulo: result.title,
      metadata: {
        score: 90,
        structurePreserved: true,
        originalSections: structureAnalysis.sections.length,
        correctionsMade: structureAnalysis.problematicLines.length,
        syllableCompliance: "Estrutura preservada com corre√ß√µes seletivas"
      }
    })

  } catch (error) {
    console.error("[Rewrite] Erro:", error)
    
    return NextResponse.json(
      {
        error: "Erro na reescrita estrutural",
        details: error instanceof Error ? error.message : "Erro desconhecido",
        suggestion: "Tente com uma letra mais clara ou menos refr√µes selecionados"
      },
      { status: 500 }
    )
  }
}

// ‚úÖ AN√ÅLISE DETALHADA DA ESTRUTURA DA M√öSICA
function analyzeSongStructure(lyrics: string) {
  const lines = lyrics.split('\n')
  const sections: Array<{type: string, lines: string[], startIndex: number}> = []
  let currentSection: {type: string, lines: string[], startIndex: number} | null = null
  const problematicLines: Array<{line: string, syllables: number}> = []

  lines.forEach((line, index) => {
    const trimmed = line.trim()
    
    // Detecta in√≠cio de nova se√ß√£o
    if (trimmed.startsWith('[') && trimmed.endsWith(']')) {
      if (currentSection) {
        sections.push(currentSection)
      }
      currentSection = {
        type: trimmed,
        lines: [],
        startIndex: index
      }
    } 
    // Linha de verso normal
    else if (trimmed && currentSection) {
      currentSection.lines.push(trimmed)
      
      // Valida s√≠labas apenas em versos (n√£o tags)
      const syllables = countPoeticSyllables(trimmed)
      if (syllables > 12) {
        problematicLines.push({ line: trimmed, syllables })
      }
    }
  })

  // Adiciona a √∫ltima se√ß√£o
  if (currentSection) {
    sections.push(currentSection)
  }

  return {
    sections,
    totalLines: lines.filter(line => line.trim()).length,
    problematicLines,
    hasComplexStructure: sections.length > 3
  }
}

// ‚úÖ VALIDA√á√ÉO DE PRESERVA√á√ÉO ESTRUTURAL
function validateStructurePreservation(original: string, rewritten: string) {
  const originalLines = original.split('\n').filter(l => l.trim())
  const rewrittenLines = rewritten.split('\n').filter(l => l.trim())
  
  const originalSections = originalLines.filter(l => l.startsWith('[') && l.endsWith(']'))
  const rewrittenSections = rewrittenLines.filter(l => l.startsWith('[') && l.endsWith(']'))
  
  return {
    sectionsPreserved: originalSections.length === rewrittenSections.length,
    originalSectionCount: originalSections.length,
    rewrittenSectionCount: rewrittenSections.length,
    structureMatch: JSON.stringify(originalSections) === JSON.stringify(rewrittenSections)
  }
}

// ‚úÖ VALIDA√á√ÉO INTELIGENTE DE S√çLABAS (s√≥ versos)
function validateLyricsSyllables(lyrics: string) {
  const lines = lyrics.split('\n')
  const violations: Array<{line: string, syllables: number}> = []
  let validLines = 0

  lines.forEach(line => {
    const trimmed = line.trim()
    // S√≥ valida versos, ignora tags e linhas vazias
    if (trimmed && !(trimmed.startsWith('[') && trimmed.endsWith(']'))) {
      const syllables = countPoeticSyllables(trimmed)
      if (syllables > 12) {
        violations.push({ line: trimmed, syllables })
      } else {
        validLines++
      }
    }
  })

  const totalChecked = lines.filter(line => {
    const trimmed = line.trim()
    return trimmed && !(trimmed.startsWith('[') && trimmed.endsWith(']'))
  }).length

  return {
    valid: violations.length === 0,
    violations,
    validLines,
    totalChecked,
    complianceRate: totalChecked > 0 ? `${Math.round((validLines / totalChecked) * 100)}%` : '0%'
  }
}

// ‚úÖ CAPITALIZA√á√ÉO INTELIGENTE (s√≥ versos, n√£o tags)
function capitalizeSongLyrics(lyrics: string) {
  const lines = lyrics.split('\n')
  
  return lines.map(line => {
    const trimmed = line.trim()
    // S√≥ capitaliza versos, n√£o tags de se√ß√£o
    if (trimmed && !(trimmed.startsWith('[') && trimmed.endsWith(']'))) {
      return capitalizeLines(trimmed)
    }
    return line // Mant√©m tags como est√£o
  }).join('\n')
}
