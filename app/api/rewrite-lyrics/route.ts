// app/api/rewrite-lyrics/route.ts

import { type NextRequest, NextResponse } from "next/server"
import { generateText } from "ai"
import { capitalizeLines } from "@/lib/utils/capitalize-lyrics"
import { buildGenreRulesPrompt } from "@/lib/validation/genre-rules-builder"
import { getGenreMetrics } from "@/lib/metrics/brazilian-metrics"
import { countPoeticSyllables } from "@/lib/validation/syllable-counter-brasileiro"
import { getUniversalRhymeRules } from "@/lib/validation/universal-rhyme-rules"
import {
  formatSertanejoPerformance,
  shouldUsePerformanceFormat,
} from "@/lib/formatters/sertanejo-performance-formatter"
import { formatInstrumentationForAI } from "@/lib/normalized-genre"
import { AbsoluteSyllableEnforcer } from "@/lib/validation/absolute-syllable-enforcer"
import { LineStacker } from "@/lib/utils/line-stacker"

export async function POST(request: NextRequest) {
  try {
    const {
      originalLyrics, // nome correto
      genre, // nome correto
      mood,
      theme,
      additionalRequirements,
      title,
      syllableTarget,
      performanceMode = "standard",
    } = await request.json()

    // Valida√ß√£o robusta
    if (!originalLyrics?.trim()) {
      return NextResponse.json({ error: "Letra original √© obrigat√≥ria" }, { status: 400 })
    }

    if (!genre || typeof genre !== "string" || !genre.trim()) {
      return NextResponse.json({ error: "G√™nero √© obrigat√≥rio" }, { status: 400 })
    }

    console.log(`[API] üéµ Reescrevendo para g√™nero: ${genre}`)

    // Obt√©m m√©tricas reais do g√™nero
    const genreMetrics = getGenreMetrics(genre)

    const maxSyllables = Math.min(genreMetrics.syllableRange.max, 12)
    const minSyllables = genreMetrics.syllableRange.min

    // Obt√©m regras de rima
    const rhymeRules = getUniversalRhymeRules(genre)

    // Constr√≥i prompt com m√©trica realista
    const genreRules = buildGenreRulesPrompt(genre)
    const prompt = `Voc√™ √© um compositor brasileiro especializado em ${genre}.

TAREFA: Reescrever e melhorar a letra abaixo mantendo a ess√™ncia.

LETRA ORIGINAL:
${originalLyrics}

TEMA: ${theme || "Manter tema original"}
HUMOR: ${mood || "Manter humor original"}
${additionalRequirements ? `REQUISITOS: ${additionalRequirements}` : ""}

REGRAS DE M√âTRICA:
- Cada verso deve ter ENTRE ${minSyllables} E ${maxSyllables} S√çLABAS
- Use contra√ß√µes naturais: "voc√™" ‚Üí "c√™", "para" ‚Üí "pra", "estou" ‚Üí "t√¥"
- Evite versos com mais de ${maxSyllables} s√≠labas

REGRAS DE RIMA:
- ${rhymeRules.requirePerfectRhymes ? "Rimas devem ser perfeitas (consoantes)" : "Rimas naturais s√£o aceit√°veis"}
- ${rhymeRules.minRichRhymePercentage > 0 ? `M√≠nimo de ${rhymeRules.minRichRhymePercentage}% de rimas ricas` : "Rimas pobres aceit√°veis"}

${genreRules.fullPrompt}

INSTRU√á√ïES:
- Melhore a qualidade mantendo o tema e estrutura original
- Corrija problemas de m√©trica e rima naturalmente  
- Use linguagem brasileira aut√™ntica
- Evite clich√™s ("cora√ß√£ozinho", "l√°grimas no rosto")
- ${performanceMode === "performance" ? "Formate com tags em ingl√™s: [Verse], [Chorus], [Bridge]" : "Use tags em portugu√™s: [Verso], [Refr√£o], [Ponte]"}

Retorne APENAS a letra reescrita, sem explica√ß√µes.`

    console.log(`[API] üéµ Gerando com m√©trica ${minSyllables}-${maxSyllables} s√≠labas...`)

    const { text } = await generateText({
      model: "openai/gpt-4o-mini", // mais r√°pido e barato
      prompt,
      temperature: 0.85, // Aumentado para melhor varia√ß√£o mantendo ess√™ncia
    })

    // Valida√ß√£o p√≥s-gera√ß√£o
    let finalLyrics = capitalizeLines(text)

    // Remove explica√ß√µes da IA
    finalLyrics = finalLyrics
      .split("\n")
      .filter(
        (line) =>
          !line.trim().startsWith("Retorne") && !line.trim().startsWith("INSTRU√á√ïES") && !line.includes("Explica√ß√£o"),
      )
      .join("\n")
      .trim()

    console.log("[API] üîß Aplicando corre√ß√£o autom√°tica de s√≠labas...")
    const enforcementResult = AbsoluteSyllableEnforcer.validateAndFix(finalLyrics)
    if (enforcementResult.corrections > 0) {
      console.log(`[API] ‚úÖ ${enforcementResult.corrections} verso(s) corrigido(s) automaticamente`)
      finalLyrics = enforcementResult.correctedLyrics
    }

    console.log("[API] üìö Empilhando versos...")
    const stackResult = LineStacker.stackLines(finalLyrics)
    finalLyrics = stackResult.stackedLyrics
    if (stackResult.improvements.length > 0) {
      console.log(`[API] ‚úÖ ${stackResult.improvements.length} melhoria(s) de empilhamento aplicadas`)
    }

    if (shouldUsePerformanceFormat(genre, performanceMode)) {
      finalLyrics = formatSertanejoPerformance(finalLyrics, genre)
    }

    const instrumentation = formatInstrumentationForAI(genre, finalLyrics)
    finalLyrics = `${finalLyrics}\n\n${instrumentation}`

    const lines = finalLyrics.split("\n")
    let validLines = 0
    let totalLines = 0

    for (const line of lines) {
      if (line.trim() && !line.startsWith("[") && !line.startsWith("(")) {
        totalLines++
        const syllables = countPoeticSyllables(line)
        if (syllables >= minSyllables && syllables <= maxSyllables) {
          validLines++
        }
      }
    }

    const validityRatio = totalLines > 0 ? validLines / totalLines : 1
    const finalScore = Math.round(validityRatio * 100)

    console.log(`[API] ‚úÖ Valida√ß√£o: ${finalScore}% das linhas dentro da m√©trica`)

    return NextResponse.json({
      lyrics: finalLyrics, // nome consistente
      title: title || "Letra Reescrita",
      metadata: {
        finalScore,
        polishingApplied: true,
        performanceMode,
        syllableRange: { min: minSyllables, max: maxSyllables },
        genre: genre,
        syllableCorrections: enforcementResult.corrections,
      },
    })
  } catch (error) {
    console.error("[API] ‚ùå Erro na reescrita:", error)
    return NextResponse.json(
      {
        error: error instanceof Error ? error.message : "Erro interno",
        details: process.env.NODE_ENV === "development" ? (error as any)?.stack : undefined,
      },
      { status: 500 },
    )
  }
}

export async function GET() {
  return NextResponse.json({ error: "M√©todo n√£o permitido" }, { status: 405 })
}
