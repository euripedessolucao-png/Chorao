import { type NextRequest, NextResponse } from "next/server"
import { generateText } from "ai"
import { capitalizeLines } from "@/lib/utils/capitalize-lyrics"
import { buildGenreRulesPrompt } from "@/lib/validation/genre-rules-builder"
import { countPoeticSyllables } from "@/lib/validation/syllable-counter-brasileiro"
import { getUniversalRhymeRules } from "@/lib/validation/universal-rhyme-rules"
import {
  formatSertanejoPerformance,
  shouldUsePerformanceFormat,
} from "@/lib/formatters/sertanejo-performance-formatter"
import { formatInstrumentationForAI } from "@/lib/normalized-genre"
import { LineStacker } from "@/lib/utils/line-stacker"
import { enhanceLyricsRhymes } from "@/lib/validation/rhyme-enhancer"
import { validateRhymesForGenre } from "@/lib/validation/rhyme-validator"
import { validateSyllablesByGenre } from "@/lib/validation/absolute-syllable-enforcer"
import { fixLineToMaxSyllables } from "@/lib/validation/local-syllable-fixer"
import { validateVerseCompleteness, fixIncompleteVerses } from "@/lib/validation/verse-completeness-validator"
import { validateGenreIsolation, cleanGenreCrossContamination } from "@/lib/validation/genre-isolation-validator"

export async function POST(request: NextRequest) {
  try {
    const {
      originalLyrics,
      genre,
      mood,
      theme,
      additionalRequirements,
      title,
      performanceMode = "standard",
    } = await request.json()

    if (!originalLyrics?.trim()) {
      return NextResponse.json({ error: "Letra original √© obrigat√≥ria" }, { status: 400 })
    }
    if (!genre || typeof genre !== "string" || !genre.trim()) {
      return NextResponse.json({ error: "G√™nero √© obrigat√≥rio" }, { status: 400 })
    }

    console.log(`[API] üéµ Reescrevendo letra para: ${genre}`)

    const syllableValidation = validateSyllablesByGenre("", genre)
    const maxSyllables = syllableValidation.maxSyllables

    const rhymeRules = getUniversalRhymeRules(genre)
    const genreRules = buildGenreRulesPrompt(genre)

    const additionalReqsSection = additionalRequirements?.trim()
      ? `
‚ö†Ô∏è REQUISITOS ADICIONAIS (OBRIGAT√ìRIOS - N√ÉO PODEM SER IGNORADOS):
${additionalRequirements}

ATEN√á√ÉO: Voc√™ DEVE seguir TODOS os requisitos adicionais acima. Eles s√£o OBRIGAT√ìRIOS e t√™m prioridade sobre qualquer outra instru√ß√£o. Se houver conflito, os requisitos adicionais prevalecem.
`
      : ""

    const genreIsolationInstructions = getGenreIsolationInstructions(genre)

    const prompt = `Voc√™ √© um compositor brasileiro especializado em ${genre}.

TAREFA: Reescrever a letra abaixo mantendo a ess√™ncia mas adaptando para ${genre}.

LETRA ORIGINAL:
${originalLyrics}

TEMA: ${theme || "Manter tema original"}
HUMOR: ${mood || "Manter humor original"}

${additionalReqsSection}

${genreIsolationInstructions}

REGRAS DE M√âTRICA:
- M√°ximo: ${maxSyllables} s√≠labas por verso (limite absoluto)
- Use contra√ß√µes naturais ("c√™", "pra", "t√¥")
- Versos curtos s√£o permitidos
- NUNCA exceda ${maxSyllables} s√≠labas (limite humano de canto)

REGRAS DE RIMA:
- ${rhymeRules.requirePerfectRhymes ? "Rimas perfeitas obrigat√≥rias" : "Rimas naturais aceit√°veis"}
- ${rhymeRules.minRichRhymePercentage > 0 ? `M√≠nimo ${rhymeRules.minRichRhymePercentage}% rimas ricas` : ""}

${genreRules.fullPrompt}

ESTRUTURA:
${
  performanceMode === "performance"
    ? "[INTRO]\n[VERSE 1]\n[PRE-CHORUS]\n[CHORUS]\n[VERSE 2]\n[CHORUS]\n[BRIDGE]\n[CHORUS]\n[OUTRO]"
    : "[Intro]\n[Verso 1]\n[Pr√©-Refr√£o]\n[Refr√£o]\n[Verso 2]\n[Refr√£o]\n[Ponte]\n[Refr√£o]\n[Outro]"
}

REGRAS CR√çTICAS:
- NUNCA corte versos no meio
- Cada verso deve ser completo e fazer sentido sozinho
- Mantenha a mensagem central da letra original
- Adapte linguagem e estilo para ${genre}
- Refr√£o memor√°vel e repet√≠vel
- Evite clich√™s ("cora√ß√£ozinho", "l√°grimas no rosto")
- ${performanceMode === "performance" ? "Tags em ingl√™s, versos em portugu√™s" : "Tags em portugu√™s"}
${additionalRequirements ? "\n- CUMPRA TODOS OS REQUISITOS ADICIONAIS ACIMA (OBRIGAT√ìRIO)" : ""}

Retorne APENAS a letra reescrita, sem explica√ß√µes.`

    console.log(`[API] üîÑ Reescrevendo com limite m√°ximo de ${maxSyllables} s√≠labas...`)
    if (additionalRequirements) {
      console.log(`[API] ‚ö†Ô∏è REQUISITOS ADICIONAIS OBRIGAT√ìRIOS DETECTADOS`)
    }

    const { text } = await generateText({
      model: "openai/gpt-4o-mini",
      prompt,
      temperature: 0.8,
    })

    let finalLyrics = capitalizeLines(text)

    finalLyrics = finalLyrics
      .split("\n")
      .filter(
        (line) =>
          !line.trim().startsWith("Retorne") && !line.trim().startsWith("REGRAS") && !line.includes("Explica√ß√£o"),
      )
      .join("\n")
      .trim()

    console.log("[API] üîç Validando isolamento de g√™nero...")
    const isolationValidation = validateGenreIsolation(finalLyrics, genre)
    if (!isolationValidation.valid) {
      console.log(`[API] ‚ö†Ô∏è ${isolationValidation.violations.length} viola√ß√£o(√µes) de isolamento detectada(s)`)
      isolationValidation.violations.forEach((v) => console.log(`[API]   - ${v}`))
      console.log("[API] üîß Limpando contamina√ß√£o entre g√™neros...")
      finalLyrics = cleanGenreCrossContamination(finalLyrics, genre)
    }

    console.log("[API] üìù Validando completude dos versos...")
    const verseValidation = validateVerseCompleteness(finalLyrics)
    if (!verseValidation.valid || verseValidation.warnings.length > 0) {
      console.log("[API] üîß Corrigindo versos incompletos...")
      const verseFixResult = fixIncompleteVerses(finalLyrics)
      if (verseFixResult.changes.length > 0) {
        console.log(`[API] ‚úÖ ${verseFixResult.changes.length} verso(s) corrigido(s)`)
        finalLyrics = verseFixResult.fixed
      }
    }

    console.log("[API] üéµ Validando qualidade das rimas...")
    const rhymeValidation = validateRhymesForGenre(finalLyrics, genre)
    if (!rhymeValidation.valid || rhymeValidation.warnings.length > 0) {
      console.log("[API] üîß Melhorando rimas automaticamente...")
      const rhymeEnhancement = await enhanceLyricsRhymes(finalLyrics, genre, theme || "reescrita", 0.7)
      if (rhymeEnhancement.improvements.length > 0) {
        console.log(`[API] ‚úÖ ${rhymeEnhancement.improvements.length} rima(s) melhorada(s)`)
        finalLyrics = rhymeEnhancement.enhancedLyrics
      }
    }

    console.log("[API] üîß Aplicando corre√ß√£o autom√°tica de s√≠labas...")
    const lines = finalLyrics.split("\n")
    const correctedLines: string[] = []
    let corrections = 0

    for (const line of lines) {
      const trimmed = line.trim()
      if (!trimmed || trimmed.startsWith("(") || trimmed.startsWith("[")) {
        correctedLines.push(line)
        continue
      }

      const lineWithoutBrackets = trimmed.replace(/\[.*?\]/g, "").trim()
      if (!lineWithoutBrackets) {
        correctedLines.push(line)
        continue
      }

      const syllables = countPoeticSyllables(lineWithoutBrackets)
      if (syllables > maxSyllables) {
        const fixed = fixLineToMaxSyllables(trimmed, maxSyllables)
        correctedLines.push(fixed)
        corrections++
      } else {
        correctedLines.push(line)
      }
    }

    if (corrections > 0) {
      console.log(`[API] ‚úÖ ${corrections} verso(s) corrigido(s) automaticamente`)
      finalLyrics = correctedLines.join("\n")
    }

    console.log("[API] üìö Empilhando versos...")
    const stackingResult = LineStacker.stackLines(finalLyrics)
    if (stackingResult.improvements.length > 0) {
      console.log(`[API] ‚úÖ ${stackingResult.improvements.length} verso(s) empilhado(s)`)
    }
    finalLyrics = stackingResult.stackedLyrics

    if (shouldUsePerformanceFormat(genre, performanceMode)) {
      console.log("[API] üé≠ Aplicando formata√ß√£o de performance...")
      finalLyrics = formatSertanejoPerformance(finalLyrics, genre)
    }

    console.log("[API] üé∏ Adicionando instrumenta√ß√£o...")
    const instrumentation = formatInstrumentationForAI(genre, finalLyrics)
    finalLyrics = `${finalLyrics}\n\n${instrumentation}`

    const finalValidation = validateSyllablesByGenre(finalLyrics, genre)
    const validityRatio = finalValidation.violations.length === 0 ? 1 : 0
    const finalScore = Math.round(validityRatio * 100)

    const finalVerseValidation = validateVerseCompleteness(finalLyrics)

    console.log(`[API] ‚úÖ Valida√ß√£o final: ${finalScore}% dentro da m√©trica (${genre})`)
    console.log(`[API] ‚úÖ Completude dos versos: ${finalVerseValidation.score}%`)

    return NextResponse.json({
      success: true,
      lyrics: finalLyrics,
      title: title || `${theme || "Reescrita"} - ${genre}`,
      metadata: {
        finalScore,
        genre,
        performanceMode,
        maxSyllables,
        syllableCorrections: corrections,
        stackingScore: stackingResult.stackingScore,
        syllableViolations: finalValidation.violations.length,
        verseCompletenessScore: finalVerseValidation.score,
        incompleteVerses: finalVerseValidation.incompleteVerses.length,
        genreIsolationViolations: isolationValidation.violations.length,
        genreIsolationWarnings: isolationValidation.warnings.length,
      },
    })
  } catch (error) {
    console.error("[API] ‚ùå Erro na reescrita:", error)
    return NextResponse.json(
      {
        error: error instanceof Error ? error.message : "Erro interno",
        details: process.env.NODE_ENV === "development" ? (error as any)?.stack : undefined,
      },
      { status: 500 },
    )
  }
}

function getGenreIsolationInstructions(genre: string): string {
  const lowerGenre = genre.toLowerCase()

  if (lowerGenre.includes("gospel")) {
    return `
‚ö†Ô∏è ISOLAMENTO DE G√äNERO - GOSPEL:
- NUNCA use instrumentos de sertanejo: sanfona, accordion, viola caipira
- NUNCA use audience cues de sertanejo: "T√° ligado!", "Bicho!", "V√©io!", "√â n√≥is!"
- NUNCA use palavras de sertanejo moderno: biqu√≠ni, PIX, story, boteco, pickup, zap, rol√™
- USE instrumentos de gospel: Piano, Acoustic Guitar, Bass, Drums, Keyboard, Strings
- USE audience cues de gospel: "Am√©m", "Aleluia", "Gl√≥ria a Deus"
- Mantenha tom reverente e inspirador, n√£o coloquial de sertanejo
`
  }

  if (lowerGenre.includes("sertanejo")) {
    return `
‚ö†Ô∏è ISOLAMENTO DE G√äNERO - SERTANEJO:
- NUNCA use linguagem religiosa excessiva (altar, gra√ßa, senhor, deus, f√©, ora√ß√£o)
- Se o tema √© religioso, considere usar Gospel ao inv√©s de Sertanejo
- USE instrumentos de sertanejo: Viola Caipira, Accordion, Acoustic Guitar, Bass, Drums
- USE audience cues de sertanejo: "T√° ligado!", "Bicho!", "V√©io!", "√â n√≥is!"
- Mantenha tom coloquial e brasileiro, n√£o reverente
`
  }

  return ""
}

export async function GET() {
  return NextResponse.json({ error: "M√©todo n√£o permitido" }, { status: 405 })
}
