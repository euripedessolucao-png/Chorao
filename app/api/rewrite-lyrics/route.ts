import { NextResponse } from "next/server"
import { MetaComposer } from "@/lib/orchestrator/meta-composer"

export async function POST(request: Request) {
  try {
    const body = await request.json()
    
    console.log('üîç DEBUG - Body completo:', JSON.stringify(body, null, 2))

    // ‚úÖ PROCURA A LETRA EM QUALQUER PAR√ÇMETRO
    let finalLyrics = ''
    let finalGenero = ''
    
    // Procura por letra em qualquer campo que possa conter
    for (const [key, value] of Object.entries(body)) {
      if (typeof value === 'string' && value.length > 10) {
        // Se for um texto longo, provavelmente √© a letra
        if (value.length > 50 && !finalLyrics) {
          finalLyrics = value
          console.log(`üìù Letra encontrada no campo: "${key}"`)
        }
      }
      
      // Procura por g√™nero
      if (typeof value === 'string' && 
          ['sertanejo', 'mpb', 'funk', 'forr√≥', 'rock', 'pop', 'gospel']
            .some(genre => value.toLowerCase().includes(genre))) {
        finalGenero = value
        console.log(`üéµ G√™nero encontrado no campo: "${key}" = "${value}"`)
      }
    }

    // ‚úÖ SE N√ÉO ENCONTROU, TENTA OS CAMPOS MAIS COMUNS
    if (!finalLyrics) {
      finalLyrics = body.lyrics || body.letra || body.text || body.content || ''
    }

    if (!finalGenero) {
      finalGenero = body.genero || body.genre || body.style || body.tipo || ''
    }

    const finalTema = body.tema || body.theme || body.subject || "Reescrita"
    const finalHumor = body.humor || body.mood || body.emocao || "Adaptado"
    const selectedChoruses = body.selectedChoruses || body.choruses || body.refroes || []
    const additionalReqs = body.additionalRequirements || body.requisitos || ''
    const universalPolish = body.universalPolish !== false

    console.log('üéØ PAR√ÇMETROS IDENTIFICADOS:', {
      finalLyrics: finalLyrics ? `‚úÖ ${finalLyrics.length} chars` : '‚ùå N√ÉO ENCONTRADA',
      finalGenero: finalGenero || '‚ùå N√ÉO ENCONTRADO',
      finalTema,
      finalHumor,
      selectedChoruses: selectedChoruses.length,
      additionalReqsLength: additionalReqs.length,
      allParams: Object.keys(body)
    })

    // ‚úÖ VALIDA√á√ÉO FINAL
    if (!finalLyrics || finalLyrics.trim().length < 10) {
      return NextResponse.json({ 
        error: "Letra n√£o encontrada ou muito curta",
        details: `Par√¢metros recebidos: ${Object.keys(body).join(', ')}`,
        suggestion: "Certifique-se de enviar a letra no par√¢metro 'lyrics' ou 'letra'",
        debug: {
          receivedParams: Object.keys(body),
          lyricsFound: !!finalLyrics,
          lyricsLength: finalLyrics?.length,
          lyricsPreview: finalLyrics?.substring(0, 100)
        }
      }, { status: 400 })
    }

    if (!finalGenero) {
      return NextResponse.json({ 
        error: "G√™nero n√£o encontrado",
        details: `Par√¢metros recebidos: ${Object.keys(body).join(', ')}`,
        suggestion: "Envie o g√™nero no par√¢metro 'genero' ou 'genre'",
        debug: {
          receivedParams: Object.keys(body)
        }
      }, { status: 400 })
    }

    console.log(`[Rewrite] ‚úÖ Iniciando reescrita - G√™nero: ${finalGenero}, Letra: ${finalLyrics.length} chars`)

    // ‚úÖ CONFIGURA√á√ÉO DE S√çLABAS
    const getSyllableConfig = (genre: string) => {
      const configs: { [key: string]: { min: number; max: number; ideal: number } } = {
        "Sertanejo": { min: 9, max: 11, ideal: 10 },
        "Sertanejo Moderno": { min: 9, max: 11, ideal: 10 },
        "Sertanejo Universit√°rio": { min: 9, max: 11, ideal: 10 },
        "MPB": { min: 7, max: 12, ideal: 9 },
        "Bossa Nova": { min: 7, max: 12, ideal: 9 },
        "Funk": { min: 6, max: 10, ideal: 8 },
        "Pagode": { min: 7, max: 11, ideal: 9 },
        "Samba": { min: 7, max: 11, ideal: 9 },
        "Forr√≥": { min: 8, max: 11, ideal: 9 },
        "Ax√©": { min: 6, max: 10, ideal: 8 },
        "Rock": { min: 7, max: 11, ideal: 9 },
        "Pop": { min: 7, max: 11, ideal: 9 },
        "Gospel": { min: 8, max: 11, ideal: 9 }
      }
      return configs[genre] || { min: 7, max: 11, ideal: 9 }
    }

    // ‚úÖ CONSTR√ìI OS REQUISITOS DE REESCRITA ESPEC√çFICOS
    const rewriteRequirements = `
REESCRITA DE LETRA EXISTENTE - ${finalGenero.toUpperCase()}

üìù LETRA ORIGINAL PARA REESCREVER (MANTENHA A ESS√äNCIA):
${finalLyrics}

üéØ OBJETIVO DA REESCRITA:
1. MANTENHA a hist√≥ria, narrativa e ess√™ncia da letra original
2. APERFEI√áOE a estrutura, m√©trica e rimas
3. USE os refr√µes/hooks fornecidos abaixo
4. MELHORE a flu√™ncia e cantabilidade
5. PRESERVE o tom emocional: ${finalHumor}

üéµ REFR√ïES/HOOKS PARA USAR (OBRIGAT√ìRIO):
${selectedChoruses.length > 0 ? selectedChoruses.map((chorus: string, i: number) => 
  `REFRAÃÉO ${i+1}:\n${chorus.split('/').map(line => `‚Ä¢ ${line.trim()}`).join('\n')}`
).join('\n\n') : 'Nenhum refr√£o espec√≠fico fornecido'}

${additionalReqs ? `\n‚ö° REQUISITOS ADICIONAIS:\n${additionalReqs}` : ''}

üìã REGRAS DA REESCRITA:
- N√ÉO invente nova hist√≥ria - APERFEI√áOE a existente
- N√ÉO altere o significado original drasticamente
- INTEGRE os refr√µes fornecidos naturalmente
- MANTENHA personagens, situa√ß√µes e narrativa
- USE contra√ß√µes: "c√™", "t√¥", "pra", "t√°"
- FOCO em melhorar estrutura e flu√™ncia

üéº ESTRUTURA SUGERIDA:
- Versos que desenvolvem a hist√≥ria original
- REFR√ïES fornecidos nos momentos certos
- Ponte que conecta com a narrativa existente
- Final coerente com o in√≠cio

IMPORTANTE: Esta √© uma REESCRITA, n√£o uma NOVA COMPOSI√á√ÉO!`
    
    const compositionRequest = {
      genre: finalGenero,
      theme: finalTema,
      mood: finalHumor,
      syllableTarget: getSyllableConfig(finalGenero),
      applyFinalPolish: universalPolish,
      preservedChoruses: selectedChoruses,
      additionalRequirements: rewriteRequirements
    }

    // ‚úÖ TIMEOUT
    const timeoutPromise = new Promise<never>((_, reject) =>
      setTimeout(() => reject(new Error("Timeout")), 45000)
    )

    const compositionPromise = MetaComposer.compose(compositionRequest)
    const result = await Promise.race([compositionPromise, timeoutPromise])

    console.log(`[Rewrite] ‚úÖ Conclu√≠do! Score: ${result.metadata.finalScore}`)

    return NextResponse.json({
      letra: result.lyrics,
      titulo: result.title,
      metadata: {
        score: result.metadata.finalScore,
        polishingApplied: result.metadata.polishingApplied,
        preservedChorusesUsed: result.metadata.preservedChorusesUsed,
        chorusPreservation: result.metadata.chorusPreservation
      }
    })

  } catch (error) {
    console.error("[Rewrite] Erro:", error)
    
    return NextResponse.json(
      {
        error: "Erro na reescrita",
        details: error instanceof Error ? error.message : "Erro desconhecido",
        suggestion: "Tente novamente com menos refr√µes selecionados"
      },
      { status: 500 }
    )
  }
}
