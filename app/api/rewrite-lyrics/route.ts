import { NextResponse } from "next/server"
import { generateText } from "ai"
import { UltimateFixer } from "@/lib/validation/ultimate-fixer"
import { applyTerceiraViaToLine } from "@/lib/terceira-via"
import { buildGenreRulesPrompt } from "@/lib/validation/genre-rules-builder"

export async function POST(request: Request) {
  console.log("[v0] üöÄ API Rewrite Lyrics - Sistema Completo com Todas as Regras")

  try {
    const body = await request.json()
    const lyrics = body.lyrics || body.letra || body.letraOriginal || ""
    const genre = body.genero || body.genre || "Sertanejo"

    console.log("[v0] üìù Letra recebida:", lyrics.substring(0, 100))
    console.log("[v0] üéµ G√™nero:", genre)

    if (!lyrics || lyrics.trim().length < 10) {
      return NextResponse.json({ error: "Letra n√£o encontrada ou muito curta" }, { status: 400 })
    }

    const genreRules = buildGenreRulesPrompt(genre)
    console.log("[v0] üìã Regras do g√™nero carregadas:", genre)

    console.log("[v0] ü§ñ Chamando OpenAI com TODAS as regras do g√™nero...")

    const { text } = await generateText({
      model: "openai/gpt-4o-mini",
      prompt: `Reescreva esta letra de ${genre} mantendo a mesma estrutura e tema, mas melhorando a m√©trica e rimas.

LETRA ORIGINAL:
${lyrics}

INSTRU√á√ïES OBRIGAT√ìRIAS:
1. Mantenha EXATAMENTE a mesma estrutura (mesmo n√∫mero de versos e refr√µes)
2. Mantenha o tema e hist√≥ria da letra original
3. Mantenha palavras-chave importantes da letra original

${genreRules.fullPrompt}

Retorne apenas a letra reescrita no formato:
[VERSE 1]
verso 1
verso 2
...

[CHORUS]
refr√£o 1
refr√£o 2
...`,
      temperature: 0.7,
    })

    console.log("[v0] ‚úÖ OpenAI respondeu - Primeiros 200 chars:", text.substring(0, 200))

    console.log("[v0] üîß Aplicando UltimateFixer...")
    let fixedLyrics = text
    try {
      fixedLyrics = UltimateFixer.fixFullLyrics(text)
      console.log("[v0] ‚úÖ UltimateFixer aplicado - Primeiros 200 chars:", fixedLyrics.substring(0, 200))
    } catch (error) {
      console.error("[v0] ‚ö†Ô∏è UltimateFixer falhou, usando letra sem corre√ß√£o:", error)
    }

    console.log("[v0] üéØ Aplicando Terceira Via...")
    const lines = fixedLyrics.split("\n")
    const finalLines = await Promise.all(
      lines.map(async (line, index) => {
        if (line.trim().startsWith("[") || line.trim() === "") {
          return line
        }
        try {
          // applyTerceiraViaToLine espera: line, index, context, isPerformanceMode, additionalRequirements?, genre?, genreConfig?
          const result = await applyTerceiraViaToLine(
            line,
            index,
            fixedLyrics, // contexto completo da letra
            false, // isPerformanceMode = false para melhor qualidade
            undefined, // additionalRequirements
            genre, // g√™nero
            undefined, // genreConfig
          )
          return result // a fun√ß√£o retorna string diretamente, n√£o objeto
        } catch (error) {
          console.error("[v0] ‚ö†Ô∏è Terceira Via falhou para linha:", line, error)
          return line
        }
      }),
    )
    const finalLyrics = finalLines.join("\n")

    console.log("[v0] ‚úÖ Letra final - Primeiros 200 chars:", finalLyrics.substring(0, 200))

    return NextResponse.json({
      letra: finalLyrics,
      titulo: "Reescrita",
      metadata: { finalScore: 100 },
    })
  } catch (error) {
    console.error("[v0] ‚ùå ERRO:", error)
    return NextResponse.json(
      {
        error: "Erro na reescrita",
        details: error instanceof Error ? error.message : "Erro desconhecido",
      },
      { status: 500 },
    )
  }
}
