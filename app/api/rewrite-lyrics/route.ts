import { generateText } from "ai"
import { NextResponse } from "next/server"
import { BACHATA_BRASILEIRA_2024 } from "@/lib/genres/bachata_brasileira_2024"
import { SERTANEJO_MODERNO_2024 } from "@/lib/genres/sertanejo_moderno_2024"
import { GENRE_CONFIGS } from "@/lib/genre-config"
import { getAntiForcingRulesForGenre } from "@/lib/validation/anti-forcing-validator"
import { capitalizeLines } from "@/lib/utils/capitalize-lyrics"
import { validateRhymesForGenre } from "@/lib/validation/rhyme-validator"
import { buildUniversalRulesPrompt } from "@/lib/rules/universal-rules"

export async function POST(request: Request) {
  try {
    const body = await request.json()

    if (!body.letraOriginal || body.letraOriginal.trim().length === 0) {
      return NextResponse.json({ error: "Letra original √© obrigat√≥ria para reescrita" }, { status: 400 })
    }

    if (!body.generoConversao) {
      return NextResponse.json({ error: "G√™nero √© obrigat√≥rio para reescrita" }, { status: 400 })
    }

    const {
      letraOriginal,
      generoConversao,
      conservarImagens,
      polirSemMexer,
      metrics,
      formattingStyle,
      additionalRequirements,
    } = body

    const genreLower = generoConversao.toLowerCase()
    const isBachata = genreLower.includes("bachata")
    const isSertanejoRaiz = genreLower.includes("sertanejo raiz") || genreLower.includes("sertanejo-raiz")
    const isSertanejoModerno = genreLower.includes("sertanejo") && !isSertanejoRaiz
    const isSertanejo = isSertanejoRaiz || isSertanejoModerno
    const isPerformanceMode = formattingStyle === "performatico"

    let genreConfig
    if (isBachata) {
      genreConfig = BACHATA_BRASILEIRA_2024
    } else if (isSertanejoRaiz) {
      genreConfig = GENRE_CONFIGS["Sertanejo Raiz"]
    } else if (isSertanejoModerno) {
      genreConfig = SERTANEJO_MODERNO_2024
    } else {
      genreConfig = GENRE_CONFIGS[generoConversao as keyof typeof GENRE_CONFIGS]
    }

    console.log(`[v0] üéµ G√™nero detectado: ${generoConversao}`)
    console.log(`[v0] üéØ √â Sertanejo Raiz? ${isSertanejoRaiz}`)
    console.log(`[v0] üéØ √â Sertanejo Moderno? ${isSertanejoModerno}`)

    const instrumentMatch = letraOriginal.match(/\(Instruments?:\s*\[([^\]]+)\]/i)
    const originalInstruments = instrumentMatch ? instrumentMatch[1].trim() : null

    const hasPerformanceMode =
      /\[(?:INTRO|VERSE|CHORUS|BRIDGE|OUTRO)\s*-\s*[^\]]+\]/.test(letraOriginal) || isPerformanceMode

    const antiForcingRules = getAntiForcingRulesForGenre(generoConversao)
    const antiForcingExamples = antiForcingRules
      .slice(0, 3)
      .map((rule) => `- "${rule.keyword}": ${rule.description}`)
      .join("\n")

    const universalRulesPrompt = buildUniversalRulesPrompt(generoConversao)

    const metricInfo = metrics
      ? `\n\nM√âTRICA DO G√äNERO:
- S√≠labas por linha: ${metrics.syllablesPerLine}
- M√°ximo absoluto: ${metrics.maxSyllables || metrics.syllablesPerLine + 2}
- BPM: ${metrics.bpm}
- Estrutura: ${metrics.structure}`
      : ""

    const formatoEstrutura = isPerformanceMode
      ? `FORMATO DE SA√çDA OBRIGAT√ìRIO (MODO PERFORM√ÅTICO):
N√ÉO INCLUA "T√≠tulo:" no in√≠cio - ser√° adicionado automaticamente.

[INTRO - Descri√ß√£o detalhada da instrumenta√ß√£o, atmosfera e entrada musical]

[VERSE 1 - Descri√ß√£o da voz, instrumenta√ß√£o e ritmo]
[primeiro verso completo - 8 linhas em portugu√™s]

[PRE-CHORUS - Prepara√ß√£o emocional]
[pr√©-refr√£o - 2-4 linhas em portugu√™s]

[CHORUS - Descri√ß√£o da energia, instrumentos e din√¢mica]
[refr√£o completo - 4 linhas em portugu√™s]

[VERSE 2 - Descri√ß√£o das mudan√ßas musicais]
[segundo verso completo - 8 linhas em portugu√™s]

[PRE-CHORUS - Prepara√ß√£o emocional]
[pr√©-refr√£o - 2-4 linhas em portugu√™s]

[CHORUS - Repete com mesma energia]
[refr√£o completo - 4 linhas em portugu√™s]

[BRIDGE - Descri√ß√£o da pausa dram√°tica e mudan√ßa]
[ponte completa - 8 linhas em portugu√™s]

[SOLO - Descri√ß√£o do solo instrumental, 8-16 segundos]

[FINAL CHORUS - Descri√ß√£o da energia m√°xima]
[refr√£o final - 4 linhas em portugu√™s]

[OUTRO - Descri√ß√£o do fade out e encerramento]
[encerramento completo - 4 linhas em portugu√™s]

(Instrumentos: [lista completa de instrumentos em ingl√™s] | BPM: ${metrics?.bpm || 100} | Ritmo: [ritmo espec√≠fico] | Estilo: ${generoConversao})`
      : `FORMATO DE SA√çDA OBRIGAT√ìRIO:
N√ÉO INCLUA "T√≠tulo:" no in√≠cio - ser√° adicionado automaticamente.

[INTRO]
[introdu√ß√£o em portugu√™s]

[VERSE 1]
[primeiro verso completo - 8 linhas em portugu√™s]

[PRE-CHORUS]
[pr√©-refr√£o - 2-4 linhas em portugu√™s]

[CHORUS]
[refr√£o principal - 4 linhas em portugu√™s]

[VERSE 2]
[segundo verso completo - 8 linhas em portugu√™s]

[PRE-CHORUS]
[pr√©-refr√£o - 2-4 linhas em portugu√™s]

[CHORUS]
[refr√£o repete - 4 linhas em portugu√™s]

[BRIDGE]
[transi√ß√£o - 8 linhas em portugu√™s]

[SOLO]
[momento instrumental]

[FINAL CHORUS]
[refr√£o final - 4 linhas em portugu√™s]

[OUTRO]
[encerramento - 4 linhas em portugu√™s]

(Instrumentos: [lista de instrumentos] | BPM: ${metrics?.bpm || 100} | Ritmo: [ritmo espec√≠fico] | Estilo: ${generoConversao})`

    const prompt = `${universalRulesPrompt}

Voc√™ √© um compositor profissional especializado em ${generoConversao}.

‚ö†Ô∏è TAREFA: REESCREVER A LETRA ABAIXO (N√ÉO CRIAR UMA NOVA!)
- Mantenha a MESMA HIST√ìRIA e TEMA CENTRAL
- Mantenha a MESMA ESTRUTURA NARRATIVA
- Mantenha os MESMOS PERSONAGENS e SITUA√á√ïES
- APENAS melhore a qualidade po√©tica e as rimas

LETRA ORIGINAL PARA REESCREVER:
${letraOriginal}

INSTRU√á√ïES DE REESCRITA:
${conservarImagens ? "- CONSERVE as imagens e met√°foras originais EXATAMENTE" : "- MELHORE as imagens mantendo o tema"}
${polirSemMexer ? "- MANTENHA a estrutura original, apenas aprimorando rimas e poesia" : "- ADAPTE a estrutura para ${generoConversao}"}
- Preserve a mensagem emocional central EXATAMENTE
- Mantenha os mesmos personagens e situa√ß√µes
- Adapte o vocabul√°rio para ${generoConversao}
- ESCREVA FRASES COMPLETAS E COERENTES (n√£o corte frases no meio)
- Cada linha deve ser uma frase completa ou parte natural de uma frase maior
- NUNCA concatene palavras (ex: "n√£s√£nossas" est√° ERRADO, use "n√£o s√£o nossas")
- SEMPRE escreva palavras completas e corretas
- PRIORIZE frases completas sobre limite de s√≠labas
${isBachata ? "- IDEAL: 8-12 s√≠labas por linha (mas frases completas s√£o mais importantes)" : ""}
${hasPerformanceMode ? "- MANTENHA as descri√ß√µes perform√°ticas detalhadas entre colchetes" : ""}
${originalInstruments ? `- INCLUA a lista de instrumentos no final: ${originalInstruments}` : ""}${metricInfo}

${
  isSertanejoRaiz
    ? `
üéØ ATEN√á√ÉO ESPECIAL - SERTANEJO RAIZ:
- M√çNIMO 50% de RIMAS RICAS (classes gramaticais diferentes)
- ZERO rimas falsas permitidas
- Use rimas concretas: porteira/bananeira, viola/sacola, sert√£o/cora√ß√£o
- EVITE rimas abstratas: amor/dor, paix√£o/raz√£o
- Cada par de rimas DEVE ser perfeito (som completo igual)
`
    : ""
}

FORMATA√á√ÉO DE VERSOS (IMPORTANTE):
- EMPILHE os versos em linhas separadas (um verso por linha)
- EXCE√á√ÉO: Combine versos na mesma linha SOMENTE quando se completam semanticamente
- Exemplo CORRETO (empilhado):
  Voc√™ diz que me ama
  Mas n√£o mostra
- Exemplo CORRETO (completam-se):
  Voc√™ diz que me ama, mas n√£o mostra
- MOTIVO: Facilita contagem visual de versos e detec√ß√£o de erros
- Esta regra vale para TODOS os g√™neros (exceto quando versos se completam)

REGRAS DO G√äNERO:
${JSON.stringify(genreConfig?.language_rules || {}, null, 2)}

${formatoEstrutura}

IMPORTANTE: 
- REESCREVA a letra original, N√ÉO crie uma nova
- Mantenha a MESMA hist√≥ria e personagens
- A LETRA COMPLETA (parte cantada) deve ser SEMPRE em PORTUGU√äS
- INSTRU√á√ïES e INSTRUMENTOS em INGL√äS
- ESCREVA FRASES COMPLETAS E COERENTES
- NUNCA corte frases no meio para respeitar s√≠labas
- NUNCA concatene ou quebre palavras
- SEMPRE escreva frases completas e gramaticalmente corretas
${isBachata ? "- IDEAL: 8-12 s√≠labas por linha (mas frases completas t√™m prioridade)" : ""}
- SEMPRE inclua a lista de instrumentos no final
- Retorne APENAS a letra formatada completa, sem coment√°rios adicionais.`

    console.log("[v0] Iniciando reescrita de letra...")

    const { text } = await generateText({
      model: "openai/gpt-4o",
      prompt: prompt,
      temperature: 0.7,
    })

    const refusalPhrases = [
      "I'm sorry, I can't assist",
      "I cannot assist",
      "I'm unable to",
      "I can't help with that",
      "I cannot help with that",
      "I'm not able to",
      "I cannot provide",
      "I can't provide",
    ]

    const isRefusal = refusalPhrases.some((phrase) => text.toLowerCase().includes(phrase.toLowerCase()))

    let finalLyrics = ""

    if (isRefusal) {
      console.error("[v0] ‚ùå API recusou o pedido. Tentando com prompt sanitizado...")
      console.error("[v0] üìù Resposta da API:", text.substring(0, 200))

      const simplifiedPrompt = `Voc√™ √© um compositor profissional de ${generoConversao}.

Reescreva esta letra mantendo a mensagem emocional:

${letraOriginal}

Instru√ß√µes:
- Mantenha o tema e emo√ß√£o
- Use linguagem natural e po√©tica
- Escreva frases completas e coerentes
- NUNCA corte frases no meio
- Formato: T√≠tulo, versos, refr√£o, ponte
- Inclua instrumentos no final

Retorne apenas a letra formatada.`

      const { text: retryText } = await generateText({
        model: "openai/gpt-4o",
        prompt: simplifiedPrompt,
        temperature: 0.7,
      })

      const isRetryRefusal = refusalPhrases.some((phrase) => retryText.toLowerCase().includes(phrase.toLowerCase()))

      if (isRetryRefusal) {
        console.error("[v0] ‚ùå Segunda tentativa tamb√©m foi recusada")
        return NextResponse.json(
          {
            error: "N√£o foi poss√≠vel processar esta letra",
            details:
              "O conte√∫do pode conter palavras ou temas que n√£o podem ser processados. Por favor, revise a letra original e tente novamente com um conte√∫do diferente.",
          },
          { status: 400 },
        )
      }

      finalLyrics = retryText.trim()
    } else {
      finalLyrics = text.trim()
    }

    finalLyrics = finalLyrics.replace(/^(?:T√≠tulo|Title):\s*.+$/gm, "").trim()
    finalLyrics = finalLyrics.replace(/^\*\*(?:T√≠tulo|Title):\s*.+\*\*$/gm, "").trim()
    finalLyrics = finalLyrics.replace(/^#+\s*(?:T√≠tulo|Title):\s*.+$/gm, "").trim()

    const rhymeValidation = validateRhymesForGenre(finalLyrics, generoConversao)

    if (!rhymeValidation.valid) {
      console.log("[v0] ‚ö†Ô∏è Avisos de rima:", rhymeValidation.warnings)
      console.log("[v0] ‚ùå Erros de rima:", rhymeValidation.errors)
      console.log("[v0] üìä Score de rima:", rhymeValidation.analysis.score)
      console.log("[v0] üìã Esquema de rimas:", rhymeValidation.analysis.scheme.join(""))

      const totalRhymes = rhymeValidation.analysis.quality.length
      const richRhymes = rhymeValidation.analysis.quality.filter((q) => q.type === "rica").length
      const falseRhymes = rhymeValidation.analysis.quality.filter((q) => q.type === "falsa").length
      const richRhymePercentage = totalRhymes > 0 ? richRhymes / totalRhymes : 0
      const falseRhymePercentage = totalRhymes > 0 ? falseRhymes / totalRhymes : 0

      console.log(`[v0] üìä Rimas ricas: ${(richRhymePercentage * 100).toFixed(0)}%`)
      console.log(`[v0] üìä Rimas falsas: ${(falseRhymePercentage * 100).toFixed(0)}%`)

      if (isSertanejoRaiz && (richRhymePercentage < 0.5 || falseRhymePercentage > 0)) {
        console.log(
          `[v0] üîÑ REGENERANDO: Sertanejo Raiz n√£o atende requisitos (${(richRhymePercentage * 100).toFixed(0)}% ricas, ${(falseRhymePercentage * 100).toFixed(0)}% falsas)`,
        )

        let attempts = 0
        const maxAttempts = 3
        let bestLyrics = finalLyrics
        let bestRichPercentage = richRhymePercentage

        while (attempts < maxAttempts && (richRhymePercentage < 0.5 || falseRhymePercentage > 0)) {
          attempts++
          console.log(`[v0] üîÑ Tentativa ${attempts}/${maxAttempts}`)

          const rhymeFeedback = `
‚ö†Ô∏è CORRE√á√ÉO OBRIGAT√ìRIA - TENTATIVA ${attempts}/${maxAttempts}:
A letra anterior teve apenas ${(richRhymePercentage * 100).toFixed(0)}% de rimas ricas e ${(falseRhymePercentage * 100).toFixed(0)}% de rimas falsas.

SERTANEJO RAIZ EXIGE:
‚úì M√≠nimo 50% de rimas ricas (classes gramaticais diferentes)
‚úì Zero rimas falsas

EXEMPLOS DE RIMAS RICAS CORRETAS:
- "porteira" (substantivo) / "bananeira" (substantivo) ‚úì
- "viola" (substantivo) / "sacola" (substantivo) ‚úì
- "sert√£o" (substantivo) / "cora√ß√£o" (substantivo) ‚úì
- "jardim" (substantivo) / "capim" (substantivo) ‚úì
- "estrada" (substantivo) / "madrugada" (substantivo) ‚úì

EVITE RIMAS POBRES:
‚úó "amor/dor" (ambos substantivos abstratos)
‚úó "paix√£o/raz√£o" (ambos substantivos abstratos)
‚úó "cantando/amando" (ambos ger√∫ndios)

MANTENHA A MESMA HIST√ìRIA DA LETRA ORIGINAL!
Apenas MELHORE as rimas mantendo o tema e personagens.
`

          const { text: regeneratedText } = await generateText({
            model: "openai/gpt-4o",
            prompt: prompt + rhymeFeedback,
            temperature: 0.8 + attempts * 0.1, // Aumenta temperatura a cada tentativa
          })

          finalLyrics = regeneratedText.trim()

          const secondValidation = validateRhymesForGenre(finalLyrics, generoConversao)
          const newRichRhymes = secondValidation.analysis.quality.filter((q) => q.type === "rica").length
          const newTotalRhymes = secondValidation.analysis.quality.length
          const newRichPercentage = newTotalRhymes > 0 ? newRichRhymes / newTotalRhymes : 0
          const newFalseRhymes = secondValidation.analysis.quality.filter((q) => q.type === "falsa").length
          const newFalsePercentage = newTotalRhymes > 0 ? newFalseRhymes / newTotalRhymes : 0

          console.log(`[v0] üîÑ Tentativa ${attempts} - Rimas ricas: ${(newRichPercentage * 100).toFixed(0)}%`)
          console.log(`[v0] üîÑ Tentativa ${attempts} - Rimas falsas: ${(newFalsePercentage * 100).toFixed(0)}%`)
          console.log(`[v0] üîÑ Tentativa ${attempts} - Score: ${secondValidation.analysis.score}`)

          // Guardar a melhor tentativa
          if (newRichPercentage > bestRichPercentage) {
            bestLyrics = finalLyrics
            bestRichPercentage = newRichPercentage
          }

          // Se atingiu os requisitos, parar
          if (newRichPercentage >= 0.5 && newFalsePercentage === 0) {
            console.log(`[v0] ‚úÖ Requisitos atingidos na tentativa ${attempts}!`)
            break
          }
        }

        // Se n√£o conseguiu atingir requisitos, usar a melhor tentativa
        if (richRhymePercentage < 0.5 || falseRhymePercentage > 0) {
          console.log(
            `[v0] ‚ö†Ô∏è N√£o conseguiu atingir 50% ap√≥s ${maxAttempts} tentativas. Usando melhor resultado: ${(bestRichPercentage * 100).toFixed(0)}%`,
          )
          finalLyrics = bestLyrics
        }
      }
    } else {
      console.log("[v0] ‚úÖ Rimas validadas com sucesso!")
      console.log("[v0] üìä Score de rima:", rhymeValidation.analysis.score)
      console.log("[v0] üìã Esquema de rimas:", rhymeValidation.analysis.scheme.join(""))
    }

    let extractedTitle = ""
    const chorusMatch = finalLyrics.match(/\[(?:CHORUS|REFR√ÉO)[^\]]*\]\s*\n([^\n]+)/i)
    if (chorusMatch?.[1]) {
      extractedTitle = chorusMatch[1].trim().split(" ").slice(0, 4).join(" ")
    }

    if (extractedTitle) {
      finalLyrics = `T√≠tulo: ${extractedTitle}\n\n${finalLyrics}`
    }

    if (!finalLyrics.includes("(Instruments:")) {
      const instrumentList = originalInstruments
        ? `(Instruments: [${originalInstruments}] | BPM: ${metrics?.bpm || 100} | Ritmo: [ritmo espec√≠fico] | Estilo: ${generoConversao})`
        : `(Instruments: [${isBachata ? "electric guitar, synthesizer, electronic drums, accordion" : "guitar, bass, drums, keyboard"}] | BPM: ${metrics?.bpm || 100} | Ritmo: [ritmo espec√≠fico] | Estilo: ${generoConversao})`

      finalLyrics = finalLyrics.trim() + "\n\n" + instrumentList
    }

    finalLyrics = capitalizeLines(finalLyrics)

    console.log("[v0] ‚úÖ Reescrita conclu√≠da com sucesso")

    return NextResponse.json({
      letra: finalLyrics,
      titulo: extractedTitle,
      rhymeAnalysis: rhymeValidation.analysis,
      rhymeWarnings: rhymeValidation.warnings,
    })
  } catch (error) {
    console.error("[v0] ‚ùå Error rewriting lyrics:", error)

    const errorMessage = error instanceof Error ? error.message : "Erro desconhecido"

    return NextResponse.json(
      {
        error: "Erro ao reescrever letra",
        details: errorMessage,
        suggestion: "Tente novamente ou simplifique a letra original",
      },
      { status: 500 },
    )
  }
}
