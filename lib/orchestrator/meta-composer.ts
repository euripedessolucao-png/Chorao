import { countPoeticSyllables } from "@/lib/validation/syllable-counter"
import {
  type TerceiraViaAnalysis,
  analisarTerceiraVia,
  applyTerceiraViaToLine,
  ThirdWayEngine,
} from "@/lib/terceira-via"
import { getGenreConfig } from "@/lib/genre-config"
import { generateText } from "ai"
import {
  formatSertanejoPerformance,
  shouldUsePerformanceFormat,
} from "@/lib/formatters/sertanejo-performance-formatter"
import { AutoSyllableCorrector } from "@/lib/validation/auto-syllable-corrector"
import { PunctuationValidator } from "@/lib/validation/punctuation-validator"
import { LineStacker } from "@/lib/utils/line-stacker"
import { AbsoluteSyllableEnforcer } from "@/lib/validation/absolute-syllable-enforcer"
import { LyricsAuditor } from "@/lib/validation/lyrics-auditor"
import { MultiGenerationEngine } from "./multi-generation-engine"
import { WordIntegrityValidator } from "@/lib/validation/word-integrity-validator"

export interface CompositionRequest {
  genre: string
  theme: string
  mood: string
  additionalRequirements?: string
  creativity?: "conservador" | "equilibrado" | "ousado"
  syllableTarget?: {
    min: number
    max: number
    ideal: number
  }
  applyFinalPolish?: boolean
  preservedChoruses?: string[]
  originalLyrics?: string
  rhythm?: string
  structureAnalysis?: any
  performanceMode?: "standard" | "performance"
  useTerceiraVia?: boolean
}

export interface CompositionResult {
  lyrics: string
  title: string
  metadata: {
    iterations: number
    finalScore: number
    polishingApplied?: boolean
    preservedChorusesUsed?: boolean
    rhymeScore?: number
    rhymeTarget?: number
    structureImproved?: boolean
    terceiraViaAnalysis?: TerceiraViaAnalysis
    melodicAnalysis?: any
    performanceMode?: string
  }
}

export class MetaComposer {
  private static readonly MAX_ITERATIONS = 3
  private static readonly MAX_AUDIT_ATTEMPTS = 5
  private static readonly ABSOLUTE_MAX_SYLLABLES = 11
  private static readonly MIN_QUALITY_SCORE = 0.75

  /**
   * Obt√©m a configura√ß√£o de s√≠labas para um g√™nero espec√≠fico
   */
  private static getGenreSyllableConfig(genre: string): { min: number; max: number; ideal: number } {
    const genreConfig = getGenreConfig(genre)
    const syllableRules = genreConfig.prosody_rules?.syllable_count

    // Handle different syllable count structures across genres
    if (syllableRules && "absolute_max" in syllableRules) {
      // Sertanejo Moderno structure
      return {
        min: 7,
        max: syllableRules.absolute_max,
        ideal: 10,
      }
    } else if (syllableRules && "without_comma" in syllableRules) {
      // Other genres structure
      return {
        min: syllableRules.without_comma.min,
        max: syllableRules.without_comma.acceptable_up_to,
        ideal: Math.floor((syllableRules.without_comma.min + syllableRules.without_comma.max) / 2),
      }
    }

    // Default fallback
    return {
      min: 7,
      max: 11,
      ideal: 10,
    }
  }

  /**
   * COMPOSI√á√ÉO TURBO COM SISTEMA DE M√öLTIPLAS GERA√á√ïES
   */
  static async compose(request: CompositionRequest): Promise<CompositionResult> {
    console.log("[MetaComposer-TURBO] üöÄ Iniciando composi√ß√£o com M√öLTIPLAS GERA√á√ïES...")
    console.log("[MetaComposer-TURBO] üéØ Gera 3 vers√µes completas e escolhe a melhor")
    console.log("[MetaComposer-TURBO] üîÆ TERCEIRA VIA SEMPRE ATIVA")

    const multiGenResult = await MultiGenerationEngine.generateMultipleVariations(
      async () => {
        return await this.generateSingleVersion(request)
      },
      (lyrics) => {
        const auditResult = LyricsAuditor.audit(lyrics, request.genre, request.theme)
        return auditResult.score
      },
      3,
    )

    const bestLyrics = multiGenResult.variations[multiGenResult.bestVariationIndex].lyrics
    const bestScore = multiGenResult.bestScore

    console.log(`[MetaComposer-TURBO] üèÜ Melhor vers√£o escolhida! Score: ${bestScore}/100`)
    console.log(`[MetaComposer-TURBO] üí™ Pontos fortes:`)
    multiGenResult.variations[multiGenResult.bestVariationIndex].strengths.forEach((s) => {
      console.log(`  - ${s}`)
    })

    if (multiGenResult.variations[multiGenResult.bestVariationIndex].weaknesses.length > 0) {
      console.log(`[MetaComposer-TURBO] ‚ö†Ô∏è Pontos fracos:`)
      multiGenResult.variations[multiGenResult.bestVariationIndex].weaknesses.forEach((w) => {
        console.log(`  - ${w}`)
      })
    }

    return {
      lyrics: bestLyrics,
      title: this.extractTitle(bestLyrics, request),
      metadata: {
        iterations: 3,
        finalScore: bestScore,
        polishingApplied: request.applyFinalPolish ?? true,
        preservedChorusesUsed: request.preservedChoruses ? request.preservedChoruses.length > 0 : false,
        performanceMode: request.performanceMode || "standard",
      },
    }
  }

  /**
   * GERA UMA VERS√ÉO COMPLETA DA LETRA
   */
  private static async generateSingleVersion(request: CompositionRequest): Promise<string> {
    console.log("[MetaComposer] üìù Gerando vers√£o √∫nica...")

    const applyFinalPolish = request.applyFinalPolish ?? true
    const preservedChoruses = request.preservedChoruses || []
    const hasPreservedChoruses = preservedChoruses.length > 0
    const isRewrite = !!request.originalLyrics
    const performanceMode = request.performanceMode || "standard"
    const useTerceiraVia = request.useTerceiraVia ?? true // ‚úÖ TERCEIRA VIA SEMPRE ATIVA

    const syllableEnforcement = request.syllableTarget || this.getGenreSyllableConfig(request.genre)
    syllableEnforcement.max = Math.min(syllableEnforcement.max, this.ABSOLUTE_MAX_SYLLABLES)

    const genreConfig = getGenreConfig(request.genre)

    // Gera letra base
    let rawLyrics: string

    if (isRewrite) {
      rawLyrics = await this.generateRewrite(request)
    } else if (hasPreservedChoruses) {
      rawLyrics = await this.generateWithPreservedChoruses(preservedChoruses, request, syllableEnforcement)
    } else {
      rawLyrics = await this.generateDirectLyrics(request, syllableEnforcement)
    }

    console.log(`[MetaComposer] üîÆ Terceira Via: ${useTerceiraVia ? 'HABILITADA' : 'DESABILITADA'}`)

    // ‚úÖ VALIDA√á√ÉO R√çGIDA DE S√çLABAS - REGRA ABSOLUTA
    const absoluteValidationBefore = AbsoluteSyllableEnforcer.validate(rawLyrics)
    if (!absoluteValidationBefore.isValid) {
      console.error("[MetaComposer] ‚ùå LETRA GERADA COM MAIS DE 11 S√çLABAS!")
      console.error(absoluteValidationBefore.message)

      // Tenta corre√ß√£o autom√°tica inteligente
      console.log("[MetaComposer] üîß Aplicando corre√ß√£o autom√°tica inteligente...")
      const fixResult = AbsoluteSyllableEnforcer.validateAndFix(rawLyrics)

      if (fixResult.isValid) {
        console.log(`[MetaComposer] ‚úÖ Corre√ß√£o bem-sucedida! ${fixResult.corrections} verso(s) corrigido(s)`)
        rawLyrics = fixResult.correctedLyrics
      } else {
        console.warn("[MetaComposer] ‚ö†Ô∏è Corre√ß√£o parcial aplicada - usando letra com melhorias")
        rawLyrics = fixResult.correctedLyrics
      }
    }

    // Corre√ß√£o autom√°tica de s√≠labas
    const autoCorrectionResult = AutoSyllableCorrector.correctLyrics(rawLyrics)
    rawLyrics = autoCorrectionResult.correctedLyrics

    const absoluteValidationAfterCorrection = AbsoluteSyllableEnforcer.validate(rawLyrics)
    if (!absoluteValidationAfterCorrection.isValid) {
      console.warn("[MetaComposer] ‚ö†Ô∏è CORRE√á√ÉO AUTOM√ÅTICA N√ÉO RESOLVEU TODOS OS PROBLEMAS")
      console.warn(absoluteValidationAfterCorrection.message)
      console.warn("[MetaComposer] ‚ö†Ô∏è Usando letra com corre√ß√µes parciais")
    }

    // ‚úÖ TERCEIRA VIA SEMPRE ATIVA COM TRY/CATCH
    if (useTerceiraVia) {
      try {
        console.log("[MetaComposer] üîÆ Iniciando Terceira Via...")
        const terceiraViaAnalysis = analisarTerceiraVia(rawLyrics, request.genre, request.theme)
        
        console.log(`[TerceiraVia] üìä Score inicial: ${terceiraViaAnalysis?.score_geral || 'N/A'}`)
        
        if (terceiraViaAnalysis && terceiraViaAnalysis.pontos_fracos) {
          console.log(`[TerceiraVia] ‚ö†Ô∏è Pontos fracos:`, terceiraViaAnalysis.pontos_fracos)
        }

        // ‚úÖ CORRE√á√ÉO: LIMITE MAIS BAIXO PARA GARANTIR CORRE√á√ïES
        if (terceiraViaAnalysis && terceiraViaAnalysis.score_geral < 95) {
          console.log(`[TerceiraVia] üîß Aplicando corre√ß√µes autom√°ticas...`)
          rawLyrics = await this.applyTerceiraViaCorrections(rawLyrics, request, terceiraViaAnalysis, genreConfig)
          
          // ‚úÖ VERIFICA RESULTADO
          const analiseFinal = analisarTerceiraVia(rawLyrics, request.genre, request.theme)
          console.log(`[TerceiraVia] ‚úÖ Score final: ${analiseFinal.score_geral} (melhoria: +${analiseFinal.score_geral - terceiraViaAnalysis.score_geral})`)
        } else {
          console.log(`[TerceiraVia] ‚úÖ Letra j√° otimizada (score: ${terceiraViaAnalysis?.score_geral})`)
        }
      } catch (error) {
        console.error(`[TerceiraVia] ‚ùå Erro durante execu√ß√£o:`, error)
        console.log(`[TerceiraVia] ‚ö†Ô∏è Continuando sem corre√ß√µes...`)
      }
    }

    // Polimento final
    let finalLyrics = rawLyrics

    if (applyFinalPolish) {
      finalLyrics = await this.applyUniversalPolish(
        finalLyrics,
        request.genre,
        request.theme,
        syllableEnforcement,
        performanceMode,
        genreConfig,
      )

      const absoluteValidationAfterPolish = AbsoluteSyllableEnforcer.validate(finalLyrics)
      if (!absoluteValidationAfterPolish.isValid) {
        console.warn("[MetaComposer] ‚ö†Ô∏è POLIMENTO GEROU VERSOS COM MAIS DE 11 S√çLABAS!")
        console.warn(absoluteValidationAfterPolish.message)

        const fixResult = AbsoluteSyllableEnforcer.validateAndFix(finalLyrics)
        if (fixResult.isValid) {
          finalLyrics = fixResult.correctedLyrics
        } else {
          console.warn("[MetaComposer] ‚ö†Ô∏è Usando letra polida com corre√ß√µes parciais")
          finalLyrics = fixResult.correctedLyrics
        }
      }
    }

    // Valida√ß√£o de pontua√ß√£o
    const punctuationResult = PunctuationValidator.validate(finalLyrics)
    if (!punctuationResult.isValid) {
      finalLyrics = punctuationResult.correctedLyrics
    }

    // Empilhamento de versos
    const stackingResult = LineStacker.stackLines(finalLyrics)
    finalLyrics = stackingResult.stackedLyrics

    const finalAbsoluteValidation = AbsoluteSyllableEnforcer.validate(finalLyrics)
    if (!finalAbsoluteValidation.isValid) {
      console.warn("[MetaComposer] ‚ö†Ô∏è VALIDA√á√ÉO FINAL - LETRA AINDA TEM VERSOS COM MAIS DE 11 S√çLABAS")
      console.warn(finalAbsoluteValidation.message)
      console.warn("[MetaComposer] ‚ö†Ô∏è Retornando letra com melhorias aplicadas")
    } else {
      console.log("[MetaComposer] ‚úÖ LETRA APROVADA - TODOS OS VERSOS T√äM NO M√ÅXIMO 11 S√çLABAS!")
    }

    // Valida√ß√£o de integridade de palavras
    const integrityCheck = WordIntegrityValidator.validate(finalLyrics)
    if (!integrityCheck.isValid) {
      console.warn("[MetaComposer] ‚ö†Ô∏è Vers√£o com problemas de integridade detectados:")
      integrityCheck.errors.forEach((error) => {
        if (error.suggestion) {
          console.warn(`  - Linha ${error.lineNumber}: "${error.word}" ‚Üí sugest√£o: "${error.suggestion}"`)
        } else {
          console.warn(`  - Linha ${error.lineNumber}: "${error.word}" parece incompleta`)
        }
      })
      console.warn("[MetaComposer] ‚ö†Ô∏è Retornando letra com avisos de integridade")
    } else {
      console.log("[MetaComposer] ‚úÖ Vers√£o aprovada - Integridade de palavras OK")
    }

    return finalLyrics
  }

  /**
   * APLICA CORRE√á√ïES BASEADAS NA AN√ÅLISE TERCEIRA VIA
   */
  private static async applyTerceiraViaCorrections(
    lyrics: string,
    request: CompositionRequest,
    analysis: TerceiraViaAnalysis,
    genreConfig: any,
  ): Promise<string> {
    const lines = lyrics.split("\n")
    const correctedLines: string[] = []
    let correctionsApplied = 0

    for (let i = 0; i < lines.length; i++) {
      const line = lines[i]

      // ‚úÖ S√ì CORRIGE LINHAS QUE PRECISAM
      if (this.needsTerceiraViaCorrection(line, analysis)) {
        try {
          const context = this.buildLineContext(lines, i, "")
          
          // ‚úÖ CORRE√á√ÉO CR√çTICA: PASSA TODOS OS PAR√ÇMETROS NECESS√ÅRIOS
          const correctedLine = await applyTerceiraViaToLine(
            line, 
            i, 
            context, 
            false, 
            "", 
            request.genre,
            genreConfig  // ‚Üê PAR√ÇMETRO QUE ESTAVA FALTANDO!
          )

          if (correctedLine !== line) {
            correctionsApplied++
            console.log(`[TerceiraVia] üîÑ Linha ${i} corrigida: "${line}" ‚Üí "${correctedLine}"`)
          }

          correctedLines.push(correctedLine)
        } catch (error) {
          console.warn(`[TerceiraVia] ‚ùå Erro na linha ${i}, mantendo original`)
          correctedLines.push(line)
        }
      } else {
        correctedLines.push(line)
      }
    }

    console.log(`[MetaComposer-TURBO] ‚úÖ ${correctionsApplied} corre√ß√µes Terceira Via aplicadas`)
    return correctedLines.join("\n")
  }

  /**
   * POLIMENTO UNIVERSAL COM TERCEIRA VIA
   */
  private static async applyUniversalPolish(
    lyrics: string,
    genre: string,
    theme: string,
    syllableTarget: { min: number; max: number; ideal: number },
    performanceMode = "standard",
    genreConfig: any,
  ): Promise<string> {
    console.log(`[MetaComposer-TURBO] ‚ú® Polimento universal para: ${genre} (${performanceMode})`)

    let polishedLyrics = lyrics

    // ‚úÖ ETAPA 1: CORRE√á√ÉO DE RIMAS COM TERCEIRA VIA
    polishedLyrics = await this.applyRhymeEnhancement(polishedLyrics, genre, theme)

    // ‚úÖ ETAPA 2: CORRE√á√ÉO DE S√çLABAS INTELIGENTE
    const lines = polishedLyrics.split("\n")
    const finalLines: string[] = []

    for (let i = 0; i < lines.length; i++) {
      const line = lines[i]

      if (line.startsWith("[") || line.startsWith("(") || line.includes("Instruments:") || !line.trim()) {
        finalLines.push(line)
        continue
      }

      const currentSyllables = countPoeticSyllables(line)
      const needsCorrection = currentSyllables < syllableTarget.min || currentSyllables > syllableTarget.max

      if (needsCorrection) {
        try {
          const polishedLine = await ThirdWayEngine.generateThirdWayLine(
            line,
            genre,
            genreConfig,
            `Polimento final para ${genre}`,
            performanceMode === "performance",
            `Ajuste para ${syllableTarget.ideal} s√≠labas po√©ticas`,
          )
          finalLines.push(polishedLine)
        } catch (error) {
          finalLines.push(line)
        }
      } else {
        finalLines.push(line)
      }
    }

    polishedLyrics = finalLines.join("\n")

    if (shouldUsePerformanceFormat(genre, performanceMode)) {
      console.log("[MetaComposer] üé≠ Aplicando formato de performance para sertanejo moderno...")
      polishedLyrics = formatSertanejoPerformance(polishedLyrics)
    } else if (performanceMode === "performance") {
      polishedLyrics = this.applyPerformanceFormatting(polishedLyrics, genre)
    }

    return polishedLyrics
  }

  /**
   * GERA REESCRITA DE LETRA EXISTENTE
   */
  private static async generateRewrite(request: CompositionRequest): Promise<string> {
    console.log("[MetaComposer] Gerando reescrita construindo versos corretos desde o in√≠cio...")

    if (!request.originalLyrics) {
      throw new Error("Original lyrics required for rewrite")
    }

    const syllableTarget = request.syllableTarget || this.getGenreSyllableConfig(request.genre)
    const genreConfig = getGenreConfig(request.genre)

    const rewritePrompt = `Voc√™ √© um compositor profissional de ${request.genre} que cria MEGA HITS BRASILEIROS.

LETRA ORIGINAL:
${request.originalLyrics}

TEMA: ${request.theme}
MOOD: ${request.mood}

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
‚ö†Ô∏è REGRA CR√çTICA DE ACENTUA√á√ÉO (N√ÉO NEGOCI√ÅVEL)
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

NUNCA escreva palavras sem acentos corretos!

‚ùå ERRADO: "n√£", "seguran√ß", "heran√ß", "ra√ß", "la√ß", "esperan√ß"
‚úÖ CORRETO: "n√£o", "seguran√ßa", "heran√ßa", "ra√ßa", "la√ßo", "esperan√ßa"

Se precisar reduzir s√≠labas, use OUTRAS t√©cnicas:
- Remova artigos: "o", "a", "um", "uma"
- Use contra√ß√µes: "pra", "t√¥", "c√™", "t√°"
- Simplifique frases: "que eu tenho" ‚Üí "que tenho"

MAS NUNCA remova acentos ou corte palavras!

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üéØ REGRA DE OURO ATUALIZADA - RESPEITA 11 S√çLABAS
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

**PRIORIDADE M√ÅXIMA (N√£o negoci√°vel):**
1. ‚úÖ M√ÅXIMO 11 S√çLABAS por verso (REGRA ABSOLUTA)
2. ‚úÖ Palavras COMPLETAS com acentua√ß√£o CORRETA
3. ‚úÖ Emo√ß√£o aut√™ntica e hist√≥ria envolvente

**PRIORIDADE IMPORTANTE:**
4. ‚úÖ Chorus memor√°vel que gruda na cabe√ßa
5. ‚úÖ Linguagem coloquial brasileira (c√™, t√¥, pra)
6. ‚úÖ Frases completas e coerentes

**T√âCNICAS PARA RESPEITAR 11 S√çLABAS:**
‚úÖ "por entre os dedos" ‚Üí "entre os dedos" (reduz 2 s√≠labas)
‚úÖ "Comprando rem√©dio" ‚Üí "Compro rem√©dio" (reduz 1 s√≠laba)
‚úÖ "o meu cora√ß√£o" ‚Üí "meu cora√ß√£o" (reduz 1 s√≠laba)
‚úÖ "que eu estou sentindo" ‚Üí "que t√¥ sentindo" (reduz 2 s√≠labas)

**REGRA DE OURO ATUALIZADA:**
EMO√á√ÉO dentro dos LIMITES T√âCNICOS!
Verso perfeito = At√© 11 s√≠labas + Emo√ß√£o + Palavras √≠ntegras

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üéµ CARACTER√çSTICAS DOS MEGA HITS
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

**CHORUS MEMOR√ÅVEL:**
- Frases curtas (m√°ximo 8-9 s√≠labas)
- Extremamente repetitivo
- Gruda na cabe√ßa imediamente
- F√°cil de cantar junto (karaoke-friendly)

**LINGUAGEM COLOQUIAL:**
- "c√™" ao inv√©s de "voc√™"
- "t√¥" ao inv√©s de "estou"
- "pra" ao inv√©s de "para"
- "t√°" ao inv√©s de "est√°"

**NARRATIVA ENVOLVENTE:**
- Come√ßo-meio-fim claro
- Hist√≥ria que emociona
- Autenticidade (n√£o for√ßado)

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
‚ö†Ô∏è IMPORTANTE - REGRA ABSOLUTA
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

NUNCA ENTREGUE VERSOS COM MAIS DE 11 S√çLABAS!
Se precisar escolher entre:
- Verso com 10-11 s√≠labas + emocionalmente perfeito
- Verso com 12+ s√≠labas (NUNCA PERMITIDO)

ESCOLHA SEMPRE A PRIMEIRA OP√á√ÉO!
A t√©cnica serve √† emo√ß√£o, mas o limite de 11 s√≠labas √© ABSOLUTO.

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

Retorne APENAS a letra reescrita (sem explica√ß√µes):`

    try {
      const response = await generateText({
        model: "openai/gpt-4o",
        prompt: rewritePrompt,
        temperature: 0.5,
      })

      return response.text || request.originalLyrics
    } catch (error) {
      console.error("[MetaComposer] Erro ao gerar reescrita:", error)
      return request.originalLyrics
    }
  }

  /**
   * GERA LETRA COM REFR√ïES PRESERVADOS
   */
  private static async generateWithPreservedChoruses(
    preservedChoruses: string[],
    request: CompositionRequest,
    syllableEnforcement: { min: number; max: number; ideal: number },
  ): Promise<string> {
    console.log("[MetaComposer] Gerando letra com refr√µes preservados...")

    const syllableTarget = request.syllableTarget || this.getGenreSyllableConfig(request.genre)
    const genreConfig = getGenreConfig(request.genre)

    try {
      const chorusPrompt = `Voc√™ √© um compositor profissional de ${request.genre}. Crie uma letra usando EXATAMENTE estes refr√µes:

${preservedChoruses.join("\n\n")}

TEMA: ${request.theme}
MOOD: ${request.mood}

REGRAS ABSOLUTAS:

1. S√çLABAS: M√°ximo 11 por verso (conte antes de finalizar) - REGRA ABSOLUTA
2. GRAM√ÅTICA: Frases completas em portugu√™s correto
3. VOCABUL√ÅRIO: Use biqu√≠ni, PIX, story, boteco (evite clich√™s dram√°ticos)
4. LINGUAGEM: Coloquial brasileira (t√¥, c√™, pra)
5. NARRATIVA: Hist√≥ria flu√≠da com come√ßo-meio-fim

‚ö†Ô∏è REGRA DE OURO: M√ÅXIMO 11 S√çLABAS POR VERSO - N√ÉO NEGOCI√ÅVEL

Retorne a letra completa com os refr√µes preservados:`

      const response = await generateText({
        model: "openai/gpt-4o",
        prompt: chorusPrompt,
        temperature: 0.7,
      })

      return response.text || ""
    } catch (error) {
      console.error("[MetaComposer] Erro ao gerar letra com refr√µes preservados:", error)
      return ""
    }
  }

  /**
   * GERA LETRA DIRETAMENTE - CONSTRUINDO VERSOS CORRETOS DESDE O IN√çCIO
   */
  private static async generateDirectLyrics(
    request: CompositionRequest,
    syllableEnforcement: { min: number; max: number; ideal: number },
  ): Promise<string> {
    console.log("[MetaComposer] Gerando letra construindo versos corretos desde o in√≠cio...")

    const genreConfig = getGenreConfig(request.genre)

    const directPrompt = `Voc√™ √© um compositor profissional de ${request.genre} que cria MEGA HITS BRASILEIROS.

TEMA: ${request.theme}
MOOD: ${request.mood}
${request.rhythm ? `RITMO: ${request.rhythm}` : ""}

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
‚ö†Ô∏è REGRA CR√çTICA DE ACENTUA√á√ÉO (N√ÉO NEGOCI√ÅVEL)
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

NUNCA escreva palavras sem acentos corretos!

‚ùå ERRADO: "n√£", "seguran√ß", "heran√ß", "ra√ß", "la√ß", "esperan√ß"
‚úÖ CORRETO: "n√£o", "seguran√ßa", "heran√ßa", "ra√ßa", "la√ßo", "esperan√ßa"

Se precisar reduzir s√≠labas, use OUTRAS t√©cnicas:
- Remova artigos: "o", "a", "um", "uma"
- Use contra√ß√µes: "pra", "t√¥", "c√™", "t√°"
- Simplifique frases: "que eu tenho" ‚Üí "que tenho"

MAS NUNCA remova acentos ou corte palavras!

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üéØ REGRA DE OURO ATUALIZADA - M√ÅXIMO 11 S√çLABAS
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

**PRIORIDADE M√ÅXIMA (N√£o negoci√°vel):**
1. ‚úÖ M√ÅXIMO 11 S√çLABAS por verso (REGRA ABSOLUTA)
2. ‚úÖ Palavras COMPLETAS com acentua√ß√£o CORRETA
3. ‚úÖ Emo√ß√£o aut√™ntica e hist√≥ria envolvente

**PRIORIDADE IMPORTANTE:**
4. ‚úÖ Chorus memor√°vel que gruda na cabe√ßa
5. ‚úÖ Linguagem coloquial brasileira (c√™, t√¥, pra)
6. ‚úÖ Frases completas e coerentes

**T√âCNICAS PARA 11 S√çLABAS:**
‚úÖ Remover artigos: "o", "a", "um", "uma"
‚úÖ Contra√ß√µes: "pra", "t√°", "t√¥", "c√™"
‚úÖ Simplificar: "que eu tenho" ‚Üí "que tenho"
‚úÖ Encurtar: "por entre os dedos" ‚Üí "entre os dedos"

**REGRA DE OURO ATUALIZADA:**
EMO√á√ÉO dentro dos LIMITES T√âCNICOS!
Verso perfeito = At√© 11 s√≠labas + Emo√ß√£o + Palavras √≠ntegras

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üéµ CARACTER√çSTICAS DOS MEGA HITS
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

**CHORUS MEMOR√ÅVEL:**
- Frases curtas (m√°ximo 8-9 s√≠labas)
- Extremamente repetitivo
- Gruda na cabe√ßa imediatamente
- F√°cil de cantar junto (karaoke-friendly)

**LINGUAGEM COLOQUIAL:**
- "c√™" ao inv√©s de "voc√™"
- "t√¥" ao inv√©s de "estou"
- "pra" ao inv√©s de "para"
- "t√°" ao inv√©s de "est√°"

**NARRATIVA ENVOLVENTE:**
- Come√ßo-meio-fim claro
- Hist√≥ria que emociona
- Autenticidade (n√£o for√ßado)

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
‚ö†Ô∏è IMPORTANTE - REGRA ABSOLUTA
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

NUNCA ENTREGUE VERSOS COM MAIS DE 11 S√çLABAS!
A emo√ß√£o √© importante, mas o limite t√©cnico √© ABSOLUTO.

Se encontrar um verso com 12+ s√≠labas:
‚ùå N√ÉO ENTREGUE
‚úÖ REESCREVA respeitando o limite
‚úÖ USE as t√©cnicas de redu√ß√£o acima

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

Retorne APENAS a letra (sem explica√ß√µes):`

    try {
      const response = await generateText({
        model: "openai/gpt-4o",
        prompt: directPrompt,
        temperature: 0.5,
      })

      return response.text || ""
    } catch (error) {
      console.error("[MetaComposer] Erro ao gerar letra direta:", error)
      throw error
    }
  }

  /**
   * EXTRAI T√çTULO DA LETRA
   */
  private static extractTitle(lyrics: string, request: CompositionRequest): string {
    const lines = lyrics.split("\n")

    // Procura por linha de t√≠tulo expl√≠cita
    for (const line of lines) {
      if (line.toLowerCase().includes("t√≠tulo:") || line.toLowerCase().includes("title:")) {
        return line.split(":")[1]?.trim() || "Sem T√≠tulo"
      }
    }

    // Usa primeira linha significativa como t√≠tulo
    for (const line of lines) {
      const cleaned = line.trim()
      if (cleaned && !cleaned.startsWith("[") && !cleaned.startsWith("(") && cleaned.length > 3) {
        return cleaned.substring(0, 50)
      }
    }

    return `${request.theme} - ${request.genre}`
  }

  /**
   * VERIFICA SE LINHA PRECISA DE CORRE√á√ÉO TERCEIRA VIA
   */
  private static needsTerceiraViaCorrection(line: string, analysis: TerceiraViaAnalysis): boolean {
    // N√£o corrige tags, instru√ß√µes ou linhas vazias
    if (!line.trim() || line.startsWith("[") || line.startsWith("(") || line.includes("Instruments:")) {
      return false
    }

    // Corrige se score geral est√° baixo
    if (analysis.score_geral < 70) {
      return true
    }

    // Corrige se h√° pontos fracos identificados
    if (analysis.pontos_fracos && analysis.pontos_fracos.length > 0) {
      return true
    }

    return false
  }

  /**
   * CONSTR√ìI CONTEXTO PARA CORRE√á√ÉO DE LINHA
   */
  private static buildLineContext(lines: string[], lineIndex: number, theme: string): string {
    const contextLines: string[] = []

    // Adiciona linha anterior se existir
    if (lineIndex > 0) {
      contextLines.push(`Linha anterior: ${lines[lineIndex - 1]}`)
    }

    // Adiciona linha atual
    contextLines.push(`Linha atual: ${lines[lineIndex]}`)

    // Adiciona pr√≥xima linha se existir
    if (lineIndex < lines.length - 1) {
      contextLines.push(`Pr√≥xima linha: ${lines[lineIndex + 1]}`)
    }

    contextLines.push(`Tema: ${theme}`)

    return contextLines.join("\n")
  }

  /**
   * APLICA MELHORIAS DE RIMA
   */
  private static async applyRhymeEnhancement(lyrics: string, genre: string, theme: string): Promise<string> {
    console.log("[MetaComposer] Aplicando melhorias de rima...")
    return lyrics
  }

  /**
   * APLICA FORMATA√á√ÉO PERFORM√ÅTICA
   */
  private static applyPerformanceFormatting(lyrics: string, genre: string): string {
    console.log("[MetaComposer] Aplicando formata√ß√£o perform√°tica...")
    let formatted = lyrics

    // Converte tags comuns para ingl√™s
    formatted = formatted.replace(/\[Intro\]/gi, "[Intro]")
    formatted = formatted.replace(/\[Verso\s*(\d*)\]/gi, "[Verse$1]")
    formatted = formatted.replace(/\[Refr√£o\]/gi, "[Chorus]")
    formatted = formatted.replace(/\[Ponte\]/gi, "[Bridge]")
    formatted = formatted.replace(/\[Final\]/gi, "[Outro]")

    return formatted
  }
}
