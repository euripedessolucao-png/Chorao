/**
 * ============================================================================
 * META-COMPOSITOR - SISTEMA AUT√îNOMO DE COMPOSI√á√ÉO INTELIGENTE
 * ============================================================================
 *
 * PROP√ìSITO:
 * Orquestrar TODAS as regras e conhecimentos distribu√≠dos no sistema de forma
 * aut√¥noma e inteligente, garantindo que cada composi√ß√£o siga:
 *
 * 1. Terceira Via (for√ßa criatividade dentro de restri√ß√µes)
 * 2. Anti-For√ßa√ß√£o (coer√™ncia narrativa > palavras-chave)
 * 3. Regras Universais (linguagem simples, 12 s√≠labas m√°x, empilhamento)
 * 4. Regras de G√™nero (espec√≠ficas de cada estilo musical)
 * 5. Prioridade de Requisitos Adicionais (sempre no topo)
 *
 * ARQUITETURA:
 * User Request ‚Üí Meta-Orchestrator ‚Üí Validation ‚Üí Refinement ‚Üí Output
 *
 * REVERSIBILIDADE:
 * Pode ser desativado via flag ENABLE_META_COMPOSER=false
 * ============================================================================
 */
/**
 * ============================================================================
 * META-COMPOSITOR CORRIGIDO - CONTROLE R√çGIDO DE S√çLABAS
 * ============================================================================
 */

// NO IMPORTS - adicione:
import { SyllableEnforcer, SyllableEnforcement } from "@/lib/validation/syllableEnforcer"

// NO M√âTODO compose - MODIFIQUE a gera√ß√£o:
static async compose(request: CompositionRequest): Promise<CompositionResult> {
  console.log("[MetaComposer] Iniciando composi√ß√£o com IMPOSI√á√ÉO de s√≠labas...")

  let iterations = 0
  let refinements = 0
  let bestResult: CompositionResult | null = null
  let bestScore = 0

  const syllableEnforcement: SyllableEnforcement = request.syllableTarget || this.SYLLABLE_TARGET

  while (iterations < this.MAX_ITERATIONS) {
    iterations++
    console.log(`[MetaComposer] Itera√ß√£o ${iterations}/${this.MAX_ITERATIONS}`)

    // 1. GERA√á√ÉO COM IMPOSI√á√ÉO RIGOROSA
    const rawLyrics = await this.generateWithSyllableControl(request, syllableEnforcement)

    // 2. APLICA IMPOSI√á√ÉO FINAL (double-check)
    const enforcedResult = await SyllableEnforcer.enforceSyllableLimits(
      rawLyrics, 
      syllableEnforcement, 
      request.genre
    )

    console.log(`[MetaComposer] Corre√ß√µes aplicadas: ${enforcedResult.corrections} linhas`)

    // 3. VALIDA√á√ÉO COMPLETA
    const validation = await this.comprehensiveValidation(
      enforcedResult.correctedLyrics, 
      request, 
      syllableEnforcement
    )

    // 4. C√ÅLCULO DE QUALIDADE com PESO M√ÅXIMO para s√≠labas
    const qualityScore = this.calculateQualityScore(
      enforcedResult.correctedLyrics, 
      validation, 
      request, 
      syllableEnforcement
    )

    // ... resto do m√©todo mantido
  }
}

// ATUALIZE o m√©todo generateWithSyllableControl:
private static async generateWithSyllableControl(
  request: CompositionRequest, 
  enforcement: SyllableEnforcement
): Promise<string> {
  const genreConfig = getGenreConfig(request.genre)

  // PROMPT COM REGRAS EXPL√çCITAS E EXEMPLOS CONCRETOS
  const masterPrompt = this.buildMasterPromptWithSyllableEnforcement(request, genreConfig, enforcement)

  const { text } = await generateText({
    model: "openai/gpt-4o",
    prompt: masterPrompt,
    temperature: request.creativity === "conservador" ? 0.5 : request.creativity === "ousado" ? 0.9 : 0.7,
  })

  // APLICA IMPOSI√á√ÉO IMEDIATA
  const enforcedResult = await SyllableEnforcer.enforceSyllableLimits(text, enforcement, request.genre)
  
  if (enforcedResult.corrections > 0) {
    console.log(`[MetaComposer] ${enforcedResult.corrections} linhas corrigidas na gera√ß√£o`)
  }

  return enforcedResult.correctedLyrics
}

// NOVO: Prompt com imposi√ß√£o expl√≠cita
private static buildMasterPromptWithSyllableEnforcement(
  request: CompositionRequest, 
  genreConfig: any, 
  enforcement: SyllableEnforcement
): string {
  return `üéµ COMPOSITOR COM IMPOSI√á√ÉO DE S√çLABAS - ${request.genre}

üö® REGRAS ABSOLUTAS DE S√çLABAS (SISTEMA MONITORA E CORRIGE):

LIMITE: ${enforcement.min} a ${enforcement.max} s√≠labas por linha
ALVO IDEAL: ${enforcement.ideal} s√≠labas

CONTR√á√ïES OBRIGAT√ìRIAS (SISTEMA VERIFICA):
‚Ä¢ "voc√™" ‚Üí "c√™" (2‚Üí1 s√≠laba) - SEMPRE
‚Ä¢ "estou" ‚Üí "t√¥" (2‚Üí1 s√≠laba) - SEMPRE  
‚Ä¢ "para" ‚Üí "pra" (2‚Üí1 s√≠laba) - SEMPRE
‚Ä¢ "est√°" ‚Üí "t√°" (2‚Üí1 s√≠laba) - SEMPRE

ELIS√ÉO OBRIGAT√ìRIA (SISTEMA VERIFICA):
‚Ä¢ "de amor" ‚Üí "d'amor" (3‚Üí2 s√≠labas)
‚Ä¢ "que eu" ‚Üí "qu'eu" (2‚Üí1 s√≠laba)
‚Ä¢ "meu amor" ‚Üí "meuamor" (4‚Üí3 s√≠labas)

EXEMPLOS CORRETOS (${enforcement.min}-${enforcement.max}s):
‚Ä¢ "C√™ t√° na minha mente" = 6s ‚úì
‚Ä¢ "Vou te amar pra sempre" = 7s ‚úì  
‚Ä¢ "Meu cora√ß√£o √© teu" = 6s ‚úì
‚Ä¢ "Nessa vida louca" = 6s ‚úì

EXEMPLOS ERRADOS (SISTEMA BLOQUEIA):
‚Ä¢ "Eu estou pensando em voc√™" = 13s ‚úó (use "T√¥ pensando em c√™")
‚Ä¢ "A saudade que eu sinto" = 14s ‚úó (use "Saudade que sinto")

SISTEMA AUTOM√ÅTICO: Se voc√™ escrever fora do limite, o sistema reescrever√° automaticamente.

TEMA: ${request.theme}
HUMOR: ${request.mood}

ESCREVA J√Å COM AS CONTR√á√ïES APLICADAS!
`
}
