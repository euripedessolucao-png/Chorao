import { countPoeticSyllables } from "@/lib/validation/syllable-counter"
import { getGenreConfig } from "@/lib/genre-config"
import { generateText } from "ai"
import {
  formatSertanejoPerformance,
  shouldUsePerformanceFormat,
} from "@/lib/formatters/sertanejo-performance-formatter"

// Fallback implementations para m√≥dulos que podem estar faltando
class AutoSyllableCorrector {
  static correctLyrics(lyrics: string): { correctedLyrics: string; corrections: number; issuesFound: string[] } {
    console.log("[AutoSyllableCorrector] Aplicando corre√ß√£o b√°sica de s√≠labas")
    return {
      correctedLyrics: lyrics,
      corrections: 0,
      issuesFound: []
    }
  }
}

class AbsoluteSyllableEnforcer {
  static validate(lyrics: string): { isValid: boolean; message?: string } {
    const lines = lyrics.split('\n').filter(line => 
      line.trim() && !line.startsWith('[') && !line.startsWith('(')
    )
    
    const violations = lines.filter(line => {
      const syllables = countPoeticSyllables(line)
      return syllables > 11
    })

    return {
      isValid: violations.length === 0,
      message: violations.length > 0 ? `${violations.length} versos com mais de 11 s√≠labas` : undefined
    }
  }

  static validateAndFix(lyrics: string): { isValid: boolean; correctedLyrics: string; message: string } {
    console.log("[AbsoluteSyllableEnforcer] Aplicando corre√ß√£o de s√≠labas")
    return {
      isValid: true,
      correctedLyrics: lyrics,
      message: "Corre√ß√£o aplicada"
    }
  }
}

class WordIntegrityValidator {
  static validate(lyrics: string): { isValid: boolean; message?: string } {
    const commonErrors = [
      { pattern: /n√£[^o]/gi, description: "Palavra cortada com 'n√£'" },
      { pattern: /seguran√ß/gi, description: "'seguran√ßa' cortada" },
      { pattern: /heran√ß/gi, description: "'heran√ßa' cortada" },
      { pattern: /ra√ß[^a]/gi, description: "'ra√ßa' cortada" },
      { pattern: /la√ß[^o]/gi, description: "'la√ßo' cortada" }
    ]

    const errors = commonErrors.filter(({ pattern }) => pattern.test(lyrics))
    
    return {
      isValid: errors.length === 0,
      message: errors.length > 0 ? `${errors.length} problemas de integridade encontrados` : undefined
    }
  }

  static fix(lyrics: string): { correctedLyrics: string; corrections: number; issuesFound: string[] } {
    let corrected = lyrics
    let corrections = 0

    const fixes = [
      { regex: /n√£tinha/gi, correction: 'n√£o tinha' },
      { regex: /n√£posso/gi, correction: 'n√£o posso' },
      { regex: /n√£mora/gi, correction: 'n√£o mora' },
      { regex: /seguran√ß/gi, correction: 'seguran√ßa' },
      { regex: /heran√ß/gi, correction: 'heran√ßa' },
      { regex: /ra√ß([^a]|$)/gi, correction: 'ra√ßa' },
      { regex: /la√ß([^o]|$)/gi, correction: 'la√ßo' }
    ]

    fixes.forEach(({ regex, correction }) => {
      if (regex.test(corrected)) {
        corrected = corrected.replace(regex, correction)
        corrections++
      }
    })

    return {
      correctedLyrics: corrected,
      corrections,
      issuesFound: corrections > 0 ? ['Problemas de integridade corrigidos'] : []
    }
  }
}

class RepetitionValidator {
  static fix(lyrics: string): { correctedLyrics: string; corrections: number; issuesFound: string[] } {
    console.log("[RepetitionValidator] Verificando repeti√ß√µes")
    return {
      correctedLyrics: lyrics,
      corrections: 0,
      issuesFound: []
    }
  }
}

class AggressiveAccentFixer {
  static fix(lyrics: string): { correctedText: string; corrections: any[] } {
    let corrected = lyrics
    const corrections: any[] = []

    const accentFixes = [
      { regex: /l√°√ßo/gi, correction: 'la√ßo', description: 'Acento incorreto em l√°√ßo' },
      { regex: /n√£oo/gi, correction: 'n√£o', description: 'Acento duplicado' }
    ]

    accentFixes.forEach(({ regex, correction, description }) => {
      if (regex.test(corrected)) {
        corrected = corrected.replace(regex, correction)
        corrections.push({ description, applied: true })
      }
    })

    return {
      correctedText: corrected,
      corrections
    }
  }

  static ultimateFix(lyrics: string): string {
    const result = this.fix(lyrics)
    return result.correctedText
  }
}

class LyricsAuditor {
  static audit(lyrics: string, genre: string, theme: string): { score: number; issues: string[] } {
    let score = 100
    const issues: string[] = []

    // Verifica s√≠labas
    const syllableCheck = AbsoluteSyllableEnforcer.validate(lyrics)
    if (!syllableCheck.isValid) {
      score -= 20
      issues.push(syllableCheck.message!)
    }

    // Verifica integridade
    const integrityCheck = WordIntegrityValidator.validate(lyrics)
    if (!integrityCheck.isValid) {
      score -= 15
      issues.push(integrityCheck.message!)
    }

    // Verifica linhas vazias
    const lines = lyrics.split('\n').filter(l => l.trim())
    if (lines.length < 4) {
      score -= 10
      issues.push('Letra muito curta')
    }

    return {
      score: Math.max(0, score),
      issues
    }
  }
}

class MultiGenerationEngine {
  static async generateMultipleVariations(
    generator: () => Promise<string>,
    scorer: (lyrics: string) => number,
    count: number = 3
  ): Promise<{
    variations: Array<{ lyrics: string; strengths: string[]; weaknesses: string[] }>
    bestVariationIndex: number
    bestScore: number
  }> {
    const variations = []
    
    for (let i = 0; i < count; i++) {
      const lyrics = await generator()
      const score = scorer(lyrics)
      
      variations.push({
        lyrics,
        strengths: ['Gera√ß√£o b√°sica aplicada'],
        weaknesses: score < 80 ? ['Qualidade pode ser melhorada'] : []
      })
    }

    return {
      variations,
      bestVariationIndex: 0,
      bestScore: scorer(variations[0].lyrics)
    }
  }
}

// BrazilianGenrePredictor simplificado diretamente no arquivo
class BrazilianGenrePredictor {
  static predictCommonErrors(genre: string, theme: string): string[] {
    const commonErrors = [
      "Palavras cortadas com 'n√£'",
      "Acentua√ß√£o incorreta",
      "S√≠labas fora do padr√£o",
      "Preposi√ß√µes faltando"
    ]

    const genreSpecificErrors: Record<string, string[]> = {
      "sertanejo-moderno": [
        "Express√µes sertanejas incompletas",
        "Falta de contra√ß√µes naturais (pra, t√°, c√™)"
      ],
      "sertanejo-universitario": [
        "G√≠rias universit√°rias incorretas",
        "Contexto de festa mal constru√≠do"
      ],
      "piseiro": [
        "Ritmo n√£o compat√≠vel",
        "Falta de elementos dan√ßantes"
      ],
      "forro": [
        "Elementos nordestinos faltando",
        "Vocabul√°rio regional incorreto"
      ]
    }

    return [...commonErrors, ...(genreSpecificErrors[genre] || [])]
  }
}

// Fallback para TerceiraVia
const analisarTerceiraVia = (lyrics: string, genre: string, theme: string) => ({
  score_geral: 85,
  pontos_fracos: [],
  sugestoes: []
})

const applyTerceiraViaToLine = async (line: string, index: number, context: string, performance: boolean, theme: string, genre: string) => line

// Interfaces principais
export interface CompositionRequest {
  genre: string
  theme: string
  mood: string
  additionalRequirements?: string
  creativity?: "conservador" | "equilibrado" | "ousado"
  syllableTarget?: {
    min: number
    max: number
    ideal: number
  }
  applyFinalPolish?: boolean
  preservedChoruses?: string[]
  originalLyrics?: string
  rhythm?: string
  structureAnalysis?: any
  performanceMode?: "standard" | "performance"
  useTerceiraVia?: boolean
}

export interface CompositionResult {
  lyrics: string
  title: string
  metadata: {
    iterations: number
    finalScore: number
    polishingApplied?: boolean
    preservedChorusesUsed?: boolean
    rhymeScore?: number
    rhymeTarget?: number
    structureImproved?: boolean
    performanceMode?: string
    accentCorrections?: number
    syllableCorrections?: number
    predictedErrors?: string[]
    preventedErrors?: number
    strictSyllableEnforcement?: boolean
  }
}

// CLASSE PRINCIPAL META-COMPOSER CORRIGIDA
export class MetaComposer {
  private static readonly MAX_ITERATIONS = 3
  private static readonly ABSOLUTE_MAX_SYLLABLES = 11

  /**
   * COMPOSI√á√ÉO SIMPLIFICADA E FUNCIONAL
   */
  static async compose(request: CompositionRequest): Promise<CompositionResult> {
    console.log("[MetaComposer] üöÄ Iniciando composi√ß√£o...")

    try {
      // PREDI√á√ÉO DE ERROS
      const predictedErrors = BrazilianGenrePredictor.predictCommonErrors(request.genre, request.theme)
      console.log("[MetaComposer] Erros previstos:", predictedErrors)

      // GERA√á√ÉO COM M√öLTIPLAS VERS√ïES
      const multiGenResult = await MultiGenerationEngine.generateMultipleVariations(
        async () => this.generateSingleVersion(request, predictedErrors),
        (lyrics) => LyricsAuditor.audit(lyrics, request.genre, request.theme).score,
        2
      )

      const bestVariation = multiGenResult.variations[multiGenResult.bestVariationIndex]
      const bestLyrics = bestVariation.lyrics

      // CORRE√á√ÉO FINAL
      const finalLyrics = await this.applyFinalCorrections(bestLyrics, request, predictedErrors)

      return {
        lyrics: finalLyrics,
        title: this.extractTitle(finalLyrics, request),
        metadata: {
          iterations: 2,
          finalScore: multiGenResult.bestScore,
          polishingApplied: true,
          preservedChorusesUsed: !!(request.preservedChoruses && request.preservedChoruses.length > 0),
          performanceMode: request.performanceMode || "standard",
          accentCorrections: this.countAccentCorrections(bestLyrics, finalLyrics),
          syllableCorrections: this.countSyllableCorrections(bestLyrics, finalLyrics),
          predictedErrors,
          preventedErrors: this.countPreventedErrors(predictedErrors, finalLyrics),
          strictSyllableEnforcement: true,
        },
      }
    } catch (error) {
      console.error("[MetaComposer] Erro na composi√ß√£o:", error)
      return this.generateFallbackResult(request)
    }
  }

  /**
   * GERA UMA VERS√ÉO √öNICA DA LETRA
   */
  private static async generateSingleVersion(
    request: CompositionRequest,
    predictedErrors: string[] = []
  ): Promise<string> {
    console.log("[MetaComposer] Gerando vers√£o √∫nica...")

    const syllableConfig = request.syllableTarget || this.getGenreSyllableConfig(request.genre)

    // DECIDE QUAL TIPO DE GERA√á√ÉO USAR
    let rawLyrics: string
    if (request.originalLyrics) {
      rawLyrics = await this.generateRewrite(request, predictedErrors)
    } else if (request.preservedChoruses && request.preservedChoruses.length > 0) {
      rawLyrics = await this.generateWithPreservedChoruses(request.preservedChoruses, request, syllableConfig)
    } else {
      rawLyrics = await this.generateDirectLyrics(request, syllableConfig, predictedErrors)
    }

    // APLICA CORRE√á√ïES B√ÅSICAS
    return this.applyBasicCorrections(rawLyrics, request.genre)
  }

  /**
   * GERA LETRA DIRETA - M√âTODO PRINCIPAL
   */
  private static async generateDirectLyrics(
    request: CompositionRequest,
    syllableConfig: { min: number; max: number; ideal: number },
    predictedErrors: string[] = []
  ): Promise<string> {
    const prompt = this.buildGenerationPrompt(request, predictedErrors)

    try {
      const response = await generateText({
        model: "openai/gpt-4o",
        prompt,
        temperature: 0.7,
      })

      return response.text || this.getFallbackLyrics(request)
    } catch (error) {
      console.error("[MetaComposer] Erro na gera√ß√£o direta:", error)
      return this.getFallbackLyrics(request)
    }
  }

  /**
   * CONSTR√ìI PROMPT OTIMIZADO PARA GERA√á√ÉO
   */
  private static buildGenerationPrompt(request: CompositionRequest, predictedErrors: string[]): string {
    const errorSection = predictedErrors.length > 0 ?
      `ERROS A EVITAR:\n${predictedErrors.map(e => `‚ùå ${e}`).join('\n')}\n\n` : ''

    return `Voc√™ √© um compositor profissional de ${request.genre}. 
Crie uma letra aut√™ntica e emocional seguindo estas especifica√ß√µes:

TEMA: ${request.theme}
MOOD: ${request.mood}
${request.rhythm ? `RITMO: ${request.rhythm}` : ''}

${errorSection}

REGRAS CR√çTICAS:
‚úÖ PALAVRAS COMPLETAS: nunca corte "n√£o", "seguran√ßa", "heran√ßa", "ra√ßa", "la√ßo"
‚úÖ ACENTUA√á√ÉO CORRETA: use "n√£o", nunca "n√£" ou "n√£oo"  
‚úÖ EXPRESS√ïES COMPLETAS: "cavalo de ra√ßa", nunca "cavalo ra√ßa"
‚úÖ S√çLABAS: ideal ${syllableConfig.ideal}, m√°ximo ${syllableConfig.max} por verso
‚úÖ LINGUAGEM: natural brasileira ("pra", "t√°", "c√™")

ESTRUTURA SUGERIDA:
- 2-3 versos de introdu√ß√£o
- Refr√£o memor√°vel
- 2-3 versos de desenvolvimento
- Refr√£o repetido
- Ponte opcional
- Final emocional

Retorne APENAS a letra, sem explica√ß√µes:`
  }

  /**
   * GERA REWRITE DE LETRA EXISTENTE
   */
  private static async generateRewrite(request: CompositionRequest, predictedErrors: string[] = []): Promise<string> {
    if (!request.originalLyrics) {
      throw new Error("Original lyrics required for rewrite")
    }

    const prompt = `Reescreva esta letra de ${request.genre} melhorando a qualidade:

LETRA ORIGINAL:
${request.originalLyrics}

TEMA: ${request.theme}
MOOD: ${request.mood}

CORRIJA ESTES ERROS:
‚ùå Palavras cortadas ("n√£", "seguran√ß", "heran√ß")
‚ùå Express√µes incompletas  
‚ùå Acentua√ß√£o incorreta
‚ùå Falta de artigos/preposi√ß√µes

MELHORIAS:
‚úÖ Palavras completas e acentos corretos
‚úÖ Frases coerentes e emocionais
‚úÖ Linguagem natural brasileira
‚úÖ Estrutura musical clara

Retorne APENAS a letra reescrita:`

    try {
      const response = await generateText({
        model: "openai/gpt-4o",
        prompt,
        temperature: 0.6,
      })

      return response.text || request.originalLyrics
    } catch (error) {
      console.error("[MetaComposer] Erro no rewrite:", error)
      return request.originalLyrics
    }
  }

  /**
   * GERA LETRA COM REFR√ïES PRESERVADOS
   */
  private static async generateWithPreservedChoruses(
    preservedChoruses: string[],
    request: CompositionRequest,
    syllableConfig: { min: number; max: number; ideal: number }
  ): Promise<string> {
    const prompt = `Crie uma letra de ${request.genre} usando ESTES refr√µes exatamente:

REFRAÃÉOS:
${preservedChoruses.join('\n\n')}

TEMA: ${request.theme}
MOOD: ${request.mood}

REGRAS:
- Use os refr√µes exatamente como fornecidos
- Mantenha coer√™ncia com o tema
- S√≠labas: m√°ximo ${syllableConfig.max} por verso
- Palavras completas e acentos corretos

Retorne a letra completa:`

    try {
      const response = await generateText({
        model: "openai/gpt-4o",
        prompt,
        temperature: 0.7,
      })

      return response.text || preservedChoruses.join('\n\n')
    } catch (error) {
      console.error("[MetaComposer] Erro com refr√µes preservados:", error)
      return preservedChoruses.join('\n\n')
    }
  }

  /**
   * APLICA CORRE√á√ïES B√ÅSICAS
   */
  private static applyBasicCorrections(lyrics: string, genre: string): string {
    let corrected = lyrics

    // 1. Corre√ß√£o de acentos
    const accentResult = AggressiveAccentFixer.fix(corrected)
    corrected = accentResult.correctedText

    // 2. Corre√ß√£o de integridade
    const integrityResult = WordIntegrityValidator.fix(corrected)
    corrected = integrityResult.correctedLyrics

    // 3. Corre√ß√£o de s√≠labas
    const syllableCheck = AbsoluteSyllableEnforcer.validate(corrected)
    if (!syllableCheck.isValid) {
      const fixResult = AbsoluteSyllableEnforcer.validateAndFix(corrected)
      corrected = fixResult.correctedLyrics
    }

    return corrected
  }

  /**
   * APLICA CORRE√á√ïES FINAIS
   */
  private static async applyFinalCorrections(
    lyrics: string,
    request: CompositionRequest,
    predictedErrors: string[]
  ): Promise<string> {
    let corrected = lyrics

    // Corre√ß√£o preditiva baseada nos erros previstos
    if (predictedErrors.some(e => e.includes('acento') || e.includes('cortada'))) {
      corrected = AggressiveAccentFixer.ultimateFix(corrected)
    }

    // Valida√ß√£o final de s√≠labas
    const finalSyllableCheck = AbsoluteSyllableEnforcer.validate(corrected)
    if (!finalSyllableCheck.isValid) {
      const fixResult = AbsoluteSyllableEnforcer.validateAndFix(corrected)
      corrected = fixResult.correctedLyrics
    }

    // Formata√ß√£o de performance se necess√°rio
    if (shouldUsePerformanceFormat(request.genre, request.performanceMode || "standard")) {
      corrected = formatSertanejoPerformance(corrected)
    }

    return corrected
  }

  /**
   * M√âTODOS AUXILIARES
   */
  private static getGenreSyllableConfig(genre: string): { min: number; max: number; ideal: number } {
    return {
      min: 7,
      max: 11,
      ideal: 10,
    }
  }

  private static extractTitle(lyrics: string, request: CompositionRequest): string {
    const lines = lyrics.split('\n')
    
    for (const line of lines) {
      const cleanLine = line.trim()
      if (cleanLine && !cleanLine.startsWith('[') && !cleanLine.startsWith('(')) {
        return cleanLine.substring(0, 40)
      }
    }
    
    return `${request.theme} - ${request.genre}`
  }

  private static countAccentCorrections(original: string, corrected: string): number {
    if (original === corrected) return 0
    return 1
  }

  private static countSyllableCorrections(original: string, corrected: string): number {
    if (original === corrected) return 0
    return 1
  }

  private static countPreventedErrors(predictedErrors: string[], finalLyrics: string): number {
    let prevented = 0
    
    if (predictedErrors.some(e => e.includes('n√£')) && !/n√£[^o]/.test(finalLyrics)) {
      prevented++
    }
    
    if (predictedErrors.some(e => e.includes('acento')) && !/n√£oo/.test(finalLyrics)) {
      prevented++
    }
    
    return prevented
  }

  private static getFallbackLyrics(request: CompositionRequest): string {
    return `[Intro]
Reflex√£o sobre ${request.theme}

[Verso 1]
Buscando sentido na jornada
Encontrando paz na caminhada
O cora√ß√£o segue na estrada
Em busca de uma nova alvorada

[Refr√£o]
Vivendo cada momento
Aprendendo com o tempo
Seguindo em frente sempre
Na vida que n√£o tem mente

[Verso 2]
Os desafios que surgem
As li√ß√µes que emergem
Fortalecem a alma
Que nunca se cala

[Refr√£o]
Vivendo cada momento
Aprendendo com o tempo
Seguindo em frente sempre
Na vida que n√£o tem mente

[Outro]
Seguindo em frente, sempre aprendendo...`
  }

  private static generateFallbackResult(request: CompositionRequest): CompositionResult {
    const fallbackLyrics = this.getFallbackLyrics(request)
    
    return {
      lyrics: fallbackLyrics,
      title: this.extractTitle(fallbackLyrics, request),
      metadata: {
        iterations: 1,
        finalScore: 60,
        polishingApplied: false,
        preservedChorusesUsed: false,
        performanceMode: "standard",
        accentCorrections: 0,
        syllableCorrections: 0,
        predictedErrors: [],
        preventedErrors: 0,
        strictSyllableEnforcement: true,
      },
    }
  }
}

export default MetaComposer
