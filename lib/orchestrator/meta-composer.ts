// lib/orchestrator/meta-composer.ts - ADICIONAR VALIDA√á√ÉO ESPEC√çFICA

export class MetaComposer {
  static async compose(request: CompositionRequest): Promise<CompositionResult> {
    console.log("[MetaComposer] üöÄ Iniciando composi√ß√£o...")

    try {
      // 1. GERA√á√ÉO BASE
      let lyrics = request.originalLyrics 
        ? await this.rewriteLyrics(request) 
        : await this.generateLyrics(request)

      // 2. CORRE√á√ÉO DE S√çLABAS (SISTEMA UNIFICADO)
      lyrics = await UnifiedSyllableManager.processSongWithBalance(lyrics, request.genre)

      // ‚úÖ 3. VALIDA√á√ÉO ESPEC√çFICA POR G√äNERO
      const genreSpecificValidation = await this.applyGenreSpecificValidation(lyrics, request)
      if (genreSpecificValidation.adjustedLyrics) {
        lyrics = genreSpecificValidation.adjustedLyrics
      }

      // 4. TERCEIRA VIA (SE APLIC√ÅVEL)
      let thirdWayApplied = false
      if (this.shouldApplyThirdWay(request, lyrics)) {
        lyrics = await ThirdWayIntegration.applyStrategicThirdWay(lyrics, request.genre, request.theme)
        thirdWayApplied = true
      }

      // 5. POLIMENTO FINAL
      if (request.applyFinalPolish !== false) {
        lyrics = await this.applyPolish(lyrics, request)
      }

      // 6. SCORE FINAL COM VALIDA√á√ïES ESPEC√çFICAS
      const finalScore = this.calculateComprehensiveScore(lyrics, request, thirdWayApplied, genreSpecificValidation)

      return {
        lyrics,
        title: this.extractTitle(lyrics, request),
        metadata: {
          finalScore,
          polishingApplied: request.applyFinalPolish !== false,
          performanceMode: request.performanceMode || "standard",
          modelUsed: this.MODEL,
          thirdWayApplied,
          genreSpecificScore: genreSpecificValidation.score,
          creativityLevel: request.creativity || "equilibrado"
        },
      }

    } catch (error) {
      console.error("[MetaComposer] ‚ùå Erro:", error)
      return this.fallbackResult(request)
    }
  }

  /**
   * ‚úÖ APLICA VALIDA√á√ÉO ESPEC√çFICA POR G√äNERO
   */
  private static async applyGenreSpecificValidation(
    lyrics: string, 
    request: CompositionRequest
  ): Promise<GenreValidationResult> {
    
    const genre = request.genre.toLowerCase()
    
    // üéµ VALIDA√á√ÉO SERTANEJO ESPEC√çFICA
    if (genre.includes('sertanejo')) {
      const sertanejoValidation = validateSertanejoModerno(lyrics)
      
      console.log(`[MetaComposer] üéµ Valida√ß√£o Sertanejo: ${sertanejoValidation.score} pontos`)
      
      if (sertanejoValidation.score < 80 && sertanejoValidation.suggestions.length > 0) {
        console.log(`[MetaComposer] üí° Sugest√µes Sertanejo:`, sertanejoValidation.suggestions.slice(0, 2))
        
        // Aplica corre√ß√µes autom√°ticas para problemas cr√≠ticos
        const corrected = await this.autoCorrectSertanejoIssues(lyrics, sertanejoValidation)
        return {
          adjustedLyrics: corrected,
          score: sertanejoValidation.score,
          type: 'sertanejo',
          suggestions: sertanejoValidation.suggestions
        }
      }
      
      return {
        adjustedLyrics: null,
        score: sertanejoValidation.score,
        type: 'sertanejo',
        suggestions: sertanejoValidation.suggestions
      }
    }

    // üé∂ OUTROS G√äNEROS PODEM TER VALIDA√á√ïES ESPEC√çFICAS FUTURAS
    return {
      adjustedLyrics: null,
      score: 85, // Score base para outros g√™neros
      type: 'generic',
      suggestions: []
    }
  }

  /**
   * ‚úÖ CORRE√á√ÉO AUTOM√ÅTICA PARA PROBLEMAS SERTANEJO
   */
  private static async autoCorrectSertanejoIssues(
    lyrics: string,
    validation: SertanejoValidationResult
  ): Promise<string> {
    
    // Para rimas repetitivas - reescreve se√ß√µes problem√°ticas
    if (validation.errors.some(error => error.includes('rimas consecutivas'))) {
      console.log('[MetaComposer] üîß Corrigindo rimas repetitivas...')
      
      // Usa o sistema de reescrita para variar rimas
      const rewritten = await this.rewriteProblematicSections(lyrics, 'variar rimas')
      return rewritten || lyrics
    }

    // Para pr√©-refr√£o incompleto - completa frases
    if (validation.errors.some(error => error.includes('Pr√©-refr√£o'))) {
      console.log('[MetaComposer] üîß Completando pr√©-refr√£o...')
      return await this.completePreChorusLines(lyrics)
    }

    return lyrics // Mant√©m original se n√£o h√° corre√ß√£o autom√°tica
  }

  /**
   * ‚úÖ CALCULA SCORE COMPREENSIVO
   */
  private static calculateComprehensiveScore(
    lyrics: string,
    request: CompositionRequest,
    thirdWayApplied: boolean,
    genreValidation: GenreValidationResult
  ): number {
    
    let score = 75 // Base

    // üìè VALIDA√á√ÉO DE S√çLABAS (CR√çTICO)
    const syllableValidation = validateLyricsSyllables(lyrics, 8, 10, 12)
    if (syllableValidation.valid) {
      score += 15
    } else {
      score -= syllableValidation.violations.length * 5
    }

    // üéµ SCORE ESPEC√çFICO DO G√äNERO
    if (genreValidation.score >= 80) score += 10
    else if (genreValidation.score >= 60) score += 5

    // üåü B√îNUS TERCEIRA VIA
    if (thirdWayApplied) score += 8

    // üé® B√îNUS CRIATIVIDADE
    if (request.creativity === "ousado") score += 7
    else if (request.creativity === "conservador") score += 3

    return Math.min(100, Math.max(0, score))
  }

  // ... outros m√©todos existentes ...
}

// ‚úÖ INTERFACE PARA VALIDA√á√ÉO POR G√äNERO
interface GenreValidationResult {
  adjustedLyrics: string | null
  score: number
  type: string
  suggestions: string[]
}
