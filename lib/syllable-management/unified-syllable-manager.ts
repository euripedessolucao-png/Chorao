import { generateText } from "ai";
import { countSyllablesSingingPtBr } from "../validation/singing-syllable-counter";

/**
 * üéµ GESTOR UNIFICADO DE S√çLABAS
 * Substitui: intelligentRewriter + intelligentSyllableReducer + ultraAggressiveSyllableReducer
 */
export class UnifiedSyllableManager {
  private static readonly MAX_SYLLABLES = 12;

  /**
   * Gestor balanceado: reescreve ‚Üí reduz ‚Üí corta (como voc√™ prop√¥s)
   */
  static async balancedSyllableManager(verse: string): Promise<string> {
    const maxSyllables = this.MAX_SYLLABLES;

    // 1. Contagem inicial
    let currentCount = this.countSyllables(verse);
    if (currentCount <= maxSyllables) return verse;

    console.log(`üîß [UnifiedManager] "${verse}" ‚Üí ${currentCount} s√≠labas`);

    // 2. Primeira tentativa: reescrita inteligente
    let rewritten = await this.intelligentRewriter(verse);
    currentCount = this.countSyllables(rewritten);
    if (currentCount <= maxSyllables) {
      console.log(`‚úÖ Reescreveu: "${rewritten}" ‚Üí ${currentCount} s√≠labas`);
      return rewritten;
    }

    // 3. Segunda tentativa: redu√ß√£o inteligente
    let reduced = await this.intelligentSyllableReducer(rewritten);
    currentCount = this.countSyllables(reduced);
    if (currentCount <= maxSyllables) {
      console.log(`‚úÖ Reduziu: "${reduced}" ‚Üí ${currentCount} s√≠labas`);
      return reduced;
    }

    // 4. √öltimo recurso: corte agressivo
    let aggressive = await this.ultraAggressiveSyllableReducer(reduced);
    currentCount = this.countSyllables(aggressive);
    
    console.log(`‚úÇÔ∏è Corte final: "${aggressive}" ‚Üí ${currentCount} s√≠labas`);
    return aggressive;
  }

  /**
   * 1¬™ CAMADA: Reescrever inteligentemente
   */
  private static async intelligentRewriter(verse: string): Promise<string> {
    try {
      const prompt = `REESCREVA este verso brasileiro para ter no m√°ximo ${this.MAX_SYLLABLES} s√≠labas:
      
Verso: "${verse}"

T√âCNICAS:
‚Ä¢ Use elis√µes naturais: "de amor" ‚Üí "d'amor", "que eu" ‚Üí "qu'eu"  
‚Ä¢ Contra√ß√µes: "voc√™" ‚Üí "c√™", "para" ‚Üí "pra", "estou" ‚Üí "t√¥"
‚Ä¢ Sin√¥nimos mais curtos: "transformou" ‚Üí "mudou", "encontrar" ‚Üí "achar"
‚Ä¢ Mantenha o significado e flu√™ncia

Verso reescrito:`;

      const { text } = await generateText({
        model: "openai/gpt-4o-mini",
        prompt,
        temperature: 0.3,
        maxTokens: 100,
      });

      return text?.trim().replace(/^["']|["']$/g, '') || verse;
    } catch (error) {
      console.warn("‚ùå Erro no rewriter:", error);
      return verse;
    }
  }

  /**
   * 2¬™ CAMADA: Redu√ß√£o inteligente de s√≠labas
   */
  private static async intelligentSyllableReducer(verse: string): Promise<string> {
    // T√©cnicas autom√°ticas de redu√ß√£o
    let reduced = verse;

    // Contra√ß√µes autom√°ticas
    const contractions = [
      { regex: /\bvoc√™\b/gi, replacement: "c√™" },
      { regex: /\bpara\b/gi, replacement: "pra" },
      { regex: /\bestou\b/gi, replacement: "t√¥" },
      { regex: /\best√°\b/gi, replacement: "t√°" },
      { regex: /\bcomigo\b/gi, replacement: "c'migo" },
      { regex: /\bde\s+([aeiou])/gi, replacement: "d'$1" },
      { regex: /\bem\s+([aeiou])/gi, replacement: "n'$1" },
    ];

    for (const contraction of contractions) {
      reduced = reduced.replace(contraction.regex, contraction.replacement);
      if (this.countSyllables(reduced) <= this.MAX_SYLLABLES) break;
    }

    // Remove palavras desnecess√°rias se ainda estiver longo
    if (this.countSyllables(reduced) > this.MAX_SYLLABLES) {
      const removals = ['o', 'a', 'um', 'uma', 'de', 'em', 'por', 'para', 'com'];
      const words = reduced.split(' ');
      
      for (let i = words.length - 1; i >= 0; i--) {
        if (removals.includes(words[i].toLowerCase())) {
          const testLine = words.filter((_, idx) => idx !== i).join(' ');
          if (this.countSyllables(testLine) <= this.MAX_SYLLABLES) {
            reduced = testLine;
            break;
          }
        }
      }
    }

    return reduced;
  }

  /**
   * 3¬™ CAMADA: Redu√ß√£o agressiva (√∫ltimo recurso)
   */
  private static async ultraAggressiveSyllableReducer(verse: string): Promise<string> {
    let aggressive = verse;
    const words = aggressive.split(' ').filter(w => w.trim());
    
    // Corte progressivo do final
    while (words.length > 1 && this.countSyllables(words.join(' ')) > this.MAX_SYLLABLES) {
      words.pop();
      aggressive = words.join(' ');
    }

    // Se ainda estiver longo, corta para a primeira palavra significativa
    if (this.countSyllables(aggressive) > this.MAX_SYLLABLES && words.length > 0) {
      aggressive = words.slice(0, Math.min(3, words.length)).join(' ');
    }

    return aggressive || verse.split(' ')[0] || verse;
  }

  /**
   * Contador unificado de s√≠labas
   */
  private static countSyllables(text: string): number {
    return countSyllablesSingingPtBr(text, {
      applyElisions: true,
      applyContractions: true,
    });
  }

  /**
   * Processa m√∫sica inteira mantendo estrutura
   */
  static async processSongWithBalance(lyrics: string): Promise<string> {
    const lines = lyrics.split("\n");
    const processed: string[] = [];
    let corrections = 0;

    for (const line of lines) {
      // Mant√©m cabe√ßalhos, marca√ß√µes e linhas vazias
      if (line.trim().length === 0 || line.startsWith("[") || line.startsWith("(") || line.includes("Instruments:")) {
        processed.push(line);
        continue;
      }

      const originalSyllables = this.countSyllables(line);
      
      if (originalSyllables <= this.MAX_SYLLABLES) {
        processed.push(line);
      } else {
        const adjusted = await this.balancedSyllableManager(line);
        processed.push(adjusted);
        corrections++;
        
        if (line !== adjusted) {
          console.log(`üìù Corrigido: "${line}" ‚Üí "${adjusted}" (${originalSyllables} ‚Üí ${this.countSyllables(adjusted)} s√≠labas)`);
        }
      }
    }

    console.log(`üéØ [UnifiedManager] ${corrections} linhas corrigidas`);
    return processed.join("\n");
  }

  /**
   * Valida√ß√£o r√°pida se m√∫sica est√° dentro dos limites
   */
  static validateSong(lyrics: string): { isValid: boolean; violations: string[] } {
    const lines = lyrics.split("\n");
    const violations: string[] = [];

    lines.forEach((line, index) => {
      if (line.trim() && !line.startsWith("[") && !line.startsWith("(") && !line.includes("Instruments:")) {
        const syllables = this.countSyllables(line);
        if (syllables > this.MAX_SYLLABLES) {
          violations.push(`Linha ${index + 1}: "${line}" (${syllables} s√≠labas)`);
        }
      }
    });

    return {
      isValid: violations.length === 0,
      violations
    };
  }
}
