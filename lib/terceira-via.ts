import { generateText } from "ai"
import { getGenreConfig } from "./genre-config"

export interface TerceiraViaAnalysis {
  originalidade: number // 0-100
  profundidade_emocional: number // 0-100
  tecnica_compositiva: number // 0-100
  adequacao_genero: number // 0-100
  score_geral: number // 0-100
  sugestoes: string[]
  pontos_fortes: string[]
  pontos_fracos: string[]
}

// ‚úÖ CONFIGURA√á√ïES POR G√äNERO PARA AN√ÅLISE
const GENRE_CONFIGS = {
  "Sertanejo": {
    language_rules: {
      allowed: {
        phrases: ["c√™", "t√¥", "pra", "t√°", "n√©", "uai", "bah", "meu bem", "mo√ßo", "morena"]
      },
      avoided: {
        phrases: ["palavr√µes pesados", "g√≠rias muito regionais", "termos t√©cnicos"]
      }
    }
  },
  "Sertanejo Moderno": {
    language_rules: {
      allowed: {
        phrases: ["c√™", "t√¥", "pra", "t√°", "n√©", "festa", "balada", "zap", "rede social"]
      },
      avoided: {
        phrases: ["linguagem muito formal", "termos antiquados"]
      }
    }
  },
  "MPB": {
    language_rules: {
      allowed: {
        phrases: ["vida", "tempo", "mar", "rio", "vento", "luz", "sombra", "caminho"]
      },
      avoided: {
        phrases: ["g√≠rias muito modernas", "termos muito coloquiais"]
      }
    }
  },
  "Funk": {
    language_rules: {
      allowed: {
        phrases: ["baila", "curte", "faz", "vem", "vai", "chama", "solta", "bota"]
      },
      avoided: {
        phrases: ["linguagem formal", "termos po√©ticos complexos"]
      }
    }
  },
  "default": {
    language_rules: {
      allowed: {
        phrases: ["c√™", "t√¥", "pra", "vida", "cora√ß√£o", "tempo"]
      },
      avoided: {
        phrases: ["clich√™s", "linguagem muito complexa"]
      }
    }
  }
}

export function analisarTerceiraVia(lyrics: string, genre: string, theme: string): TerceiraViaAnalysis {
  const sugestoes: string[] = []
  const pontos_fortes: string[] = []
  const pontos_fracos: string[] = []

  // ‚úÖ AN√ÅLISE DE ORIGINALIDADE
  const cliches = [
    "cora√ß√£o partido", "l√°grimas no travesseiro", "noite sem luar", "amor eterno", 
    "para sempre", "meu mundo desabou", "vazio na alma", "dor no peito",
    "solid√£o imensa", "saudade mata", "fim do mundo", "sem rumo", "perdido",
    "n√£o aguento mais", "vida sem sentido", "noite fria", "cora√ß√£o na m√£o"
  ]

  let clicheCount = 0
  cliches.forEach((cliche) => {
    if (lyrics.toLowerCase().includes(cliche)) {
      clicheCount++
      pontos_fracos.push(`Clich√™ detectado: "${cliche}"`)
    }
  })

  const originalidade = Math.max(0, 100 - (clicheCount * 15))

  // ‚úÖ AN√ÅLISE DE PROFUNDIDADE EMOCIONAL
  const emocoes_profundas = [
    "vulnerabilidade", "crescimento", "transforma√ß√£o", "liberta√ß√£o", "cura",
    "aceita√ß√£o", "aprendizado", "supera√ß√£o", "renascimento", "evolu√ß√£o",
    "entendimento", "maturidade", "resili√™ncia", "coragem", "verdade"
  ]

  const imagens_concretas = [
    "caf√© esfriou", "porta fechada", "foto desbotada", "sof√° vazio", "telefone mudo",
    "janela aberta", "chuva no vidro", "rel√≥gio parado", "copo sujo", "livro aberto",
    "escada escura", "elevador quebrado", "√¥nibus errado", "cal√ßada molhada"
  ]

  let profundidadeCount = 0
  let imagensCount = 0

  emocoes_profundas.forEach((emocao) => {
    if (lyrics.toLowerCase().includes(emocao)) {
      profundidadeCount++
      pontos_fortes.push(`Emo√ß√£o profunda: "${emocao}"`)
    }
  })

  imagens_concretas.forEach((imagem) => {
    if (lyrics.toLowerCase().includes(imagem)) {
      imagensCount++
      pontos_fortes.push(`Imagem concreta: "${imagem}"`)
    }
  })

  const profundidade_emocional = Math.min(100, (profundidadeCount * 15) + (imagensCount * 10) + 30)

  // ‚úÖ AN√ÅLISE T√âCNICA COMPOSITIVA
  const lines = lyrics.split("\n").filter((line) => 
    line.trim() && 
    !line.startsWith("[") && 
    !line.startsWith("(") &&
    !line.includes("Instruments:")
  )

  const hasRhyme = lines.length >= 2 && checkRhyme(lines[0], lines[1])
  const hasStructure = lyrics.includes("[VERSE") && lyrics.includes("[CHORUS")
  const hasVariation = lines.length >= 8 // M√≠nimo de versos para ter varia√ß√£o

  let tecnica = 40 // Base
  if (hasRhyme) {
    tecnica += 20
    pontos_fortes.push("Rimas bem estruturadas")
  } else {
    pontos_fracos.push("Rimas fracas ou ausentes")
  }

  if (hasStructure) {
    tecnica += 20
    pontos_fortes.push("Estrutura clara e organizada")
  } else {
    pontos_fracos.push("Estrutura musical indefinida")
  }

  if (hasVariation) {
    tecnica += 20
    pontos_fortes.push("Desenvolvimento narrativo adequado")
  } else {
    pontos_fracos.push("Pouca varia√ß√£o tem√°tica")
  }

  // ‚úÖ ADEQUA√á√ÉO AO G√äNERO
  const config = GENRE_CONFIGS[genre as keyof typeof GENRE_CONFIGS] || GENRE_CONFIGS.default
  let adequacao = 60 // Base

  // Verificar se usa linguagem permitida
  const allowedWords = config.language_rules.allowed.phrases || []
  let allowedCount = 0
  allowedWords.forEach((phrase: string) => {
    if (lyrics.toLowerCase().includes(phrase.toLowerCase())) {
      allowedCount++
    }
  })

  if (allowedCount > 0) {
    adequacao = Math.min(100, 60 + (allowedCount * 8))
    pontos_fortes.push(`Linguagem adequada ao ${genre} (${allowedCount} express√µes t√≠picas)`)
  } else {
    pontos_fracos.push(`Pouca conex√£o com linguagem do ${genre}`)
  }

  // ‚úÖ SCORE GERAL (PONDERA√á√ÉO INTELIGENTE)
  const score_geral = Math.round(
    originalidade * 0.25 + 
    profundidade_emocional * 0.30 + 
    tecnica * 0.25 + 
    adequacao * 0.20
  )

  // ‚úÖ SUGEST√ïES BASEADAS NA AN√ÅLISE
  if (originalidade < 70) {
    sugestoes.push("üîß Evite clich√™s. Use imagens concretas e espec√≠ficas do cotidiano brasileiro.")
  }
  
  if (profundidade_emocional < 70) {
    sugestoes.push("üí´ Aprofunde as emo√ß√µes. Mostre vulnerabilidade e transforma√ß√£o genu√≠nas.")
  }
  
  if (tecnica < 70) {
    sugestoes.push("üéµ Melhore a t√©cnica: trabalhe rimas, m√©trica e estrutura das se√ß√µes.")
  }
  
  if (adequacao < 70) {
    sugestoes.push(`üéØ Use mais express√µes t√≠picas do ${genre} para conectar com o p√∫blico.`)
  }

  // ‚úÖ SUGEST√ïES ESPEC√çFICAS BASEADAS NOS PONTOS FRACOS
  if (pontos_fracos.some(p => p.includes("Clich√™"))) {
    sugestoes.push("‚ú® Substitua clich√™s por observa√ß√µes pessoais √∫nicas da sua experi√™ncia.")
  }

  if (pontos_fracos.some(p => p.includes("Rimas"))) {
    sugestoes.push("üìù Experimente rimas internas e asson√¢ncias para maior naturalidade.")
  }

  return {
    originalidade,
    profundidade_emocional,
    tecnica_compositiva: tecnica,
    adequacao_genero: adequacao,
    score_geral,
    sugestoes,
    pontos_fortes,
    pontos_fracos,
  }
}

// ‚úÖ VERIFICA√á√ÉO DE RIMAS MELHORADA
function checkRhyme(line1: string, line2: string): boolean {
  const getLastWord = (line: string) => {
    const words = line.trim().split(/\s+/)
    const lastWord = words[words.length - 1]?.toLowerCase().replace(/[^\w√°√†√¢√£√©√®√™√≠√¨√Æ√≥√≤√¥√µ√∫√π√ª√ß]/gi, "") || ""
    return lastWord
  }

  const word1 = getLastWord(line1)
  const word2 = getLastWord(line2)

  if (!word1 || !word2 || word1.length < 2 || word2.length < 2) return false

  // ‚úÖ RIMA RICA (√∫ltimas 3 letras iguais)
  const end1 = word1.slice(-3)
  const end2 = word2.slice(-3)

  // ‚úÖ RIMA M√âDIA (√∫ltimas 2 letras iguais)  
  const end1_2 = word1.slice(-2)
  const end2_2 = word2.slice(-2)

  // ‚úÖ ASSON√ÇNCIA (vogais finais similares)
  const vowels1 = word1.replace(/[^aeiou√°√†√¢√£√©√®√™√≠√¨√Æ√≥√≤√¥√µ√∫√π√ª]/gi, '').slice(-2)
  const vowels2 = word2.replace(/[^aeiou√°√†√¢√£√©√®√™√≠√¨√Æ√≥√≤√¥√µ√∫√π√ª]/gi, '').slice(-2)

  return end1 === end2 || end1_2 === end2_2 || vowels1 === vowels2
}

// ‚úÖ APLICA√á√ÉO DA TERCEIRA VIA EM LINHAS ESPEC√çFICAS
export async function applyTerceiraViaToLine(
  line: string,
  index: number,
  context: string,
  isPerformanceMode: boolean,
  additionalRequirements?: string,
): Promise<string> {
  // Skip structural markers and empty lines
  if (!line.trim() || line.startsWith("[") || line.startsWith("(") || line.includes("Instruments:")) {
    return line
  }

  // Skip if line is already well-formed
  if (line.length > 50 || line.match(/[.!?;:]$/)) {
    return line
  }

  try {
    console.log(`[TerceiraVia] üîß Aplicando na linha ${index}: "${line.substring(0, 40)}..."`)

    // ‚úÖ DETECTA SE PRECISA DE MELHORIA
    const cliches = [
      "cora√ß√£o partido", "l√°grimas no travesseiro", "noite sem luar", "amor eterno", 
      "para sempre", "meu mundo desabou", "vazio na alma", "dor no peito",
      "solid√£o imensa", "saudade mata", "fim do mundo", "sem rumo"
    ]

    let needsImprovement = false
    for (const cliche of cliches) {
      if (line.toLowerCase().includes(cliche)) {
        needsImprovement = true
        console.log(`[TerceiraVia] üö® Clich√™ detectado: "${cliche}"`)
        break
      }
    }

    // ‚úÖ TAMB√âM VERIFICA LINHAS MUITO CURTAS/GEN√âRICAS
    if (!needsImprovement && (line.length < 15 || line.split(' ').length < 3)) {
      needsImprovement = true
      console.log(`[TerceiraVia] üìè Linha muito curta/gen√©rica: "${line}"`)
    }

    if (!needsImprovement) {
      console.log(`[TerceiraVia] ‚úÖ Linha ${index} n√£o precisa de melhoria`)
      return line
    }

    const timeoutPromise = new Promise<string>((_, reject) =>
      setTimeout(() => reject(new Error("Timeout na Terceira Via")), 8000),
    )

    // ‚úÖ PROMPT AVAN√áADO PARA TERCEIRA VIA
    const prompt = `TERCEIRA VIA - COMPOSI√á√ÉO INTELIGENTE

LINHA ORIGINAL: "${line}"
CONTEXTO: ${context}
${additionalRequirements ? `REQUISITOS: ${additionalRequirements}` : ''}

PRINC√çPIOS DA TERCEIRA VIA:
üéØ EVITE: Clich√™s, abstra√ß√µes vagas, frases gen√©ricas
üéØ USE: Imagens concretas do cotidiano brasileiro, observa√ß√µes pessoais √∫nicas
üéØ MANTENHA: M√©trica natural, linguagem coloquial aut√™ntica
üéØ FOCO: Verdade emocional, vulnerabilidade genu√≠na, transforma√ß√£o

EXEMPLOS DE MELHORIA:
‚ùå "Meu cora√ß√£o est√° partido" 
‚úÖ "O caf√© da manh√£ ficou na mesa, frio"

‚ùå "Estou perdido na vida"
‚úÖ "Pego o √¥nibus errado toda manh√£ sem querer"

‚ùå "A solid√£o me consome"  
‚úÖ "A TV fica ligada na sala vazia at√© amanhecer"

Reescreva APENAS esta linha aplicando os princ√≠pios da Terceira Via.
Retorne SOMENTE a linha reescita, sem explica√ß√µes:`

    const aiPromise = generateText({
      model: "openai/gpt-4o-mini",
      prompt,
      temperature: 0.7,
    })

    const { text } = (await Promise.race([aiPromise, timeoutPromise])) as { text: string }

    const improvedLine = text.trim()
      .replace(/^["']|["']$/g, "")
      .replace(/^.*?:/, "") // Remove prefixos
      .split('\n')[0] // Pega apenas primeira linha

    console.log(`[TerceiraVia] ‚úÖ Linha ${index} melhorada: "${improvedLine}"`)
    return improvedLine || line

  } catch (error) {
    console.error(`[TerceiraVia] ‚ùå Erro na linha ${index}:`, error)
    return line
  }
}

// ‚úÖ ANALISADOR DE TEND√äNCIAS PARA M√öLTIPLAS LETRAS
export function analisarTendenciasCompositivas(lyricsArray: string[], genre: string): {
  cliches_comuns: string[]
  pontos_evolucao: string[]
  estilo_identificado: string
} {
  const allLyrics = lyricsArray.join(' ').toLowerCase()
  
  const cliches_comuns = [
    "cora√ß√£o partido", "l√°grimas", "noite sem luar", "amor eterno", 
    "para sempre", "vazio", "solid√£o", "saudade", "dor no peito"
  ].filter(cliche => allLyrics.includes(cliche))

  const pontos_evolucao: string[] = []
  
  if (cliches_comuns.length > 2) {
    pontos_evolucao.push("Forte depend√™ncia de clich√™s emocionais")
  }

  const imagens_presentes = [
    "caf√©", "porta", "janela", "chuva", "sof√°", "foto", "telefone", "rua"
  ].filter(imagem => allLyrics.includes(imagem))

  if (imagens_presentes.length >= 3) {
    pontos_evolucao.push("Bom uso de imagens concretas do cotidiano")
  }

  const estilo_identificado = cliches_comuns.length > 3 ? "Tradicional" : 
                             imagens_presentes.length > 4 ? "Terceira Via" : "Misto"

  return {
    cliches_comuns,
    pontos_evolucao,
    estilo_identificado
  }
}
