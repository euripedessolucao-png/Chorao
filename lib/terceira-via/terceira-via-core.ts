// @/lib/terceira-via.ts - VERS√ÉO CORRIGIDA SEM ERROS DE SINTAXE

import { generateText } from "ai"
import { getGenreConfig } from "@/lib/genre-config"
import { ThirdWayEngine } from "./third-way-converter"

export interface TerceiraViaAnalysis {
  score_geral: number
  pontos_fracos: string[]
  sugestoes: string[]
  versos_problematicos: Array<{
    linha: string
    problema: string
    sugestao: string
  }>
}

/**
 * CORRE√á√ïES IMEDIATAS PARA PROBLEMAS CR√çTICOS
 */
function aplicarCorrecoesImediatas(line: string): string {
  let corrected = line
  
  // ‚úÖ CORRE√á√ïES CR√çTICAS - APLICADAS SEMPRE
  const correcoesImediatas = [
    { regex: /n√£(\s|$)/gi, correction: 'n√£o ' },
    { regex: /dire√ß√£(\s|$)/gi, correction: 'dire√ß√£o ' },
    { regex: /ra√ß(\s|$)/gi, correction: 'ra√ßa ' },
    { regex: /l√°√ß/gi, correction: 'la√ßo' },
    { regex: /heran√ß(\s|$)/gi, correction: 'heran√ßa ' },
    { regex: /d'ouro/gi, correction: 'de ouro' },
    { regex: /sem dire√ß√£/gi, correction: 'sem dire√ß√£o' },
    { regex: /volto pra heran√ß/gi, correction: 'volto pra heran√ßa' },
  ]
  
  correcoesImediatas.forEach(({ regex, correction }) => {
    if (regex.test(corrected)) {
      corrected = corrected.replace(regex, correction)
      console.log(`[TerceiraVia-QuickFix] üîß Aplicada corre√ß√£o: ${regex} ‚Üí ${correction}`)
    }
  })
  
  return corrected.trim()
}

/**
 * VERIFICA SE UMA LINHA PRECISA DE MELHORIAS ADICIONAIS
 */
function precisaDeMelhorias(line: string): boolean {
  const problemas = [
    /n√£(\s|$)/gi,
    /dire√ß√£(\s|$)/gi,
    /ra√ß(\s|$)/gi,
    /l√°√ß/gi,
    /heran√ß(\s|$)/gi,
    /d'ouro/gi,
  ]
  
  return problemas.some(problema => problema.test(line))
}

/**
 * SUGERE CORRE√á√ïES PARA PROBLEMAS IDENTIFICADOS
 */
function sugerirCorrecao(line: string, problemas: string[]): string {
  let sugestao = line
  
  problemas.forEach(problema => {
    if (problema.includes('n√£')) {
      sugestao = sugestao.replace(/n√£(\s|$)/gi, 'n√£o ')
    }
    if (problema.includes('dire√ß√£')) {
      sugestao = sugestao.replace(/dire√ß√£(\s|$)/gi, 'dire√ß√£o ')
    }
    if (problema.includes('ra√ß')) {
      sugestao = sugestao.replace(/ra√ß(\s|$)/gi, 'ra√ßa ')
    }
    if (problema.includes('l√°√ß')) {
      sugestao = sugestao.replace(/l√°√ß/gi, 'la√ßo')
    }
    if (problema.includes('heran√ß')) {
      sugestao = sugestao.replace(/heran√ß(\s|$)/gi, 'heran√ßa ')
    }
    if (problema.includes("d'ouro")) {
      sugestao = sugestao.replace(/d'ouro/gi, 'de ouro')
    }
  })
  
  return sugestao
}

/**
 * GERA SUGEST√ïES BASEADAS NOS PROBLEMAS E G√äNERO
 */
function gerarSugestoes(problemas: string[], genre: string): string[] {
  const sugestoes: string[] = []
  
  if (problemas.some(p => p.includes('cortada'))) {
    sugestoes.push('Use palavras completas com acentua√ß√£o correta')
    sugestoes.push('Evite cortar palavras como "n√£o", "dire√ß√£o", "heran√ßa"')
  }
  
  if (problemas.some(p => p.includes('incompleta'))) {
    sugestoes.push('Complete as express√µes para maior clareza')
    sugestoes.push('Use artigos e preposi√ß√µes quando necess√°rio')
  }
  
  // SUGEST√ïES ESPEC√çFICAS POR G√äNERO
  if (genre.includes('sertanejo')) {
    sugestoes.push('Use linguagem coloquial natural: "pra", "t√°", "c√™"')
    sugestoes.push('Mantenha a autenticidade da narrativa sertaneja')
  }
  
  return sugestoes
}

/**
 * ANALISA UMA LETRA COMPLETA USANDO A TERCEIRA VIA
 */
export function analisarTerceiraVia(lyrics: string, genre: string, theme: string): TerceiraViaAnalysis {
  console.log(`[TerceiraVia] üîç Analisando letra do g√™nero: ${genre}`)
  
  const lines = lyrics.split('\n').filter(line => 
    line.trim() && !line.startsWith('[') && !line.startsWith('(') && !line.includes('Instruments:')
  )
  
  const problemas: string[] = []
  const versosProblematicos: Array<{linha: string, problema: string, sugestao: string}> = []
  
  // ‚úÖ DETEC√á√ÉO DE PROBLEMAS CR√çTICOS
  lines.forEach((line, index) => {
    const problemasLinha: string[] = []
    
    // 1. PALAVRAS CORTADAS
    if (/(^|\s)n√£[^o]/.test(line.toLowerCase())) {
      problemasLinha.push('Palavra cortada: "n√£" deve ser "n√£o"')
    }
    if (/dire√ß√£(\s|$)/.test(line.toLowerCase())) {
      problemasLinha.push('Palavra cortada: "dire√ß√£" deve ser "dire√ß√£o"')
    }
    if (/ra√ß(\s|$)/.test(line.toLowerCase())) {
      problemasLinha.push('Palavra cortada: "ra√ß" deve ser "ra√ßa"')
    }
    if (/l√°√ß/.test(line.toLowerCase())) {
      problemasLinha.push('Palavra cortada: "l√°√ß" deve ser "la√ßo"')
    }
    if (/heran√ß(\s|$)/.test(line.toLowerCase())) {
      problemasLinha.push('Palavra cortada: "heran√ß" deve ser "heran√ßa"')
    }
    
    // 2. EXPRESS√ïES INCOMPLETAS
    if (line.includes('sem dire√ß√£')) {
      problemasLinha.push('Express√£o incompleta: "sem dire√ß√£"')
    }
    if (line.includes('volto pra heran√ß')) {
      problemasLinha.push('Express√£o incompleta: "volto pra heran√ß"')
    }
    
    // 3. CONSTRU√á√ïES ESTRANHAS
    if (line.includes("d'ouro")) {
      problemasLinha.push('Contra√ß√£o for√ßada: "d\'ouro" soa artificial')
    }
    
    if (problemasLinha.length > 0) {
      problemas.push(...problemasLinha)
      versosProblematicos.push({
        linha: line,
        problema: problemasLinha.join(', '),
        sugestao: sugerirCorrecao(line, problemasLinha)
      })
    }
  })
  
  // CALCULA SCORE BASEADO NOS PROBLEMAS
  const scoreBase = 100
  const penalidadePorProblema = 8
  const scoreFinal = Math.max(40, scoreBase - (problemas.length * penalidadePorProblema))
  
  console.log(`[TerceiraVia] üìä Score calculado: ${scoreFinal} (${problemas.length} problemas)`)
  
  return {
    score_geral: scoreFinal,
    pontos_fracos: problemas,
    sugestoes: gerarSugestoes(problemas, genre),
    versos_problematicos: versosProblematicos
  }
}

/**
 * APLICA CORRE√á√ïES DA TERCEIRA VIA - VERS√ÉO CORRIGIDA
 */
export async function applyTerceiraViaToLine(
  line: string,
  index: number,
  context: string,
  isPerformanceMode: boolean,
  additionalRequirements?: string,
  genre?: string,
  // ‚úÖ NOVO: PAR√ÇMETRO genreConfig ADICIONADO
  genreConfig?: any,
): Promise<string> {
  if (!line.trim() || line.startsWith("[") || line.startsWith("(") || line.includes("Instruments:")) {
    return line
  }

  try {
    console.log(`[TerceiraVia] üîß Processando linha ${index}: "${line.substring(0, 40)}..."`)

    // ‚úÖ CORRE√á√ÉO CR√çTICA: GARANTIR QUE TEMOS genreConfig
    const finalGenre = genre || "sertanejo-moderno"
    const finalGenreConfig = genreConfig || getGenreConfig(finalGenre)
    
    console.log(`[TerceiraVia] üéØ G√™nero: ${finalGenre}, Config: ${!!finalGenreConfig}`)

    // ‚úÖ APLICAR CORRE√á√ïES IMEDIATAS PARA PROBLEMAS CR√çTICOS
    let correctedLine = aplicarCorrecoesImediatas(line)
    
    // ‚úÖ SE AINDA PRECISA DE MELHORIAS, USA O THIRD WAY ENGINE
    if (precisaDeMelhorias(correctedLine)) {
      console.log(`[TerceiraVia] üöÄ Usando ThirdWayEngine para linha ${index}`)
      
      const improvedLine = await ThirdWayEngine.generateThirdWayLine(
        correctedLine,
        finalGenre,
        finalGenreConfig,
        context,
        isPerformanceMode,
        additionalRequirements,
      )

      console.log(`[TerceiraVia] ‚úÖ Linha ${index} melhorada: "${improvedLine}"`)
      return improvedLine
    }

    console.log(`[TerceiraVia] ‚úÖ Linha ${index} j√° otimizada: "${correctedLine}"`)
    return correctedLine

  } catch (error) {
    console.error(`[TerceiraVia] ‚ùå Erro na linha ${index}:`, error)
    // ‚úÖ FALLBACK: APLICA CORRE√á√ïES B√ÅSICAS MESMO COM ERRO
    return aplicarCorrecoesImediatas(line)
  }
}

/**
 * FUN√á√ÉO LEGACY PARA COMPATIBILIDADE
 */
async function applyLegacyTerceiraVia(
  line: string,
  index: number,
  context: string,
  additionalRequirements?: string,
): Promise<string> {
  return line
}

export { applyLegacyTerceiraVia }
