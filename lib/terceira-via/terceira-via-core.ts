// @/lib/terceira-via/terceira-via-unified.ts - VERS√ÉO COMPLETA E UNIFICADA

import { generateText } from "ai"
import { getGenreConfig } from "@/lib/genre-config"

// ============================================================================
// INTERFACES E TIPOS
// ============================================================================

export interface TerceiraViaAnalysis {
  score_geral: number
  pontos_fracos: string[]
  sugestoes: string[]
  versos_problematicos: Array<{
    linha: string
    problema: string
    sugestao: string
  }>
}

// ============================================================================
// FUN√á√ïES AUXILIARES
// ============================================================================

/**
 * Corre√ß√µes imediatas para problemas cr√≠ticos
 */
function aplicarCorrecoesImediatas(line: string): string {
  let corrected = line
  
  const correcoesImediatas = [
    { regex: /n√£(\s|$)/gi, correction: 'n√£o ' },
    { regex: /dire√ß√£(\s|$)/gi, correction: 'dire√ß√£o ' },
    { regex: /ra√ß(\s|$)/gi, correction: 'ra√ßa ' },
    { regex: /l√°√ß/gi, correction: 'la√ßo' },
    { regex: /heran√ß(\s|$)/gi, correction: 'heran√ßa ' },
    { regex: /d'ouro/gi, correction: 'de ouro' },
    { regex: /sem dire√ß√£/gi, correction: 'sem dire√ß√£o' },
    { regex: /volto pra heran√ß/gi, correction: 'volto pra heran√ßa' },
  ]
  
  correcoesImediatas.forEach(({ regex, correction }) => {
    if (regex.test(corrected)) {
      corrected = corrected.replace(regex, correction)
    }
  })
  
  return corrected.trim()
}

/**
 * Verifica se uma linha precisa de melhorias adicionais
 */
function precisaDeMelhorias(line: string): boolean {
  const problemas = [
    /n√£(\s|$)/gi,
    /dire√ß√£(\s|$)/gi,
    /ra√ß(\s|$)/gi,
    /l√°√ß/gi,
    /heran√ß(\s|$)/gi,
    /d'ouro/gi,
  ]
  
  return problemas.some(problema => problema.test(line))
}

/**
 * Sugere corre√ß√µes para problemas identificados
 */
function sugerirCorrecao(line: string, problemas: string[]): string {
  let sugestao = line
  
  problemas.forEach(problema => {
    if (problema.includes('n√£')) {
      sugestao = sugestao.replace(/n√£(\s|$)/gi, 'n√£o ')
    }
    if (problema.includes('dire√ß√£')) {
      sugestao = sugestao.replace(/dire√ß√£(\s|$)/gi, 'dire√ß√£o ')
    }
    if (problema.includes('ra√ß')) {
      sugestao = sugestao.replace(/ra√ß(\s|$)/gi, 'ra√ßa ')
    }
    if (problema.includes('l√°√ß')) {
      sugestao = sugestao.replace(/l√°√ß/gi, 'la√ßo')
    }
    if (problema.includes('heran√ß')) {
      sugestao = sugestao.replace(/heran√ß(\s|$)/gi, 'heran√ßa ')
    }
    if (problema.includes("d'ouro")) {
      sugestao = sugestao.replace(/d'ouro/gi, 'de ouro')
    }
  })
  
  return sugestao
}

/**
 * Gera sugest√µes baseadas nos problemas e g√™nero
 */
function gerarSugestoes(problemas: string[], genre: string): string[] {
  const sugestoes: string[] = []
  
  if (problemas.some(p => p.includes('cortada'))) {
    sugestoes.push('Use palavras completas com acentua√ß√£o correta')
    sugestoes.push('Evite cortar palavras como "n√£o", "dire√ß√£o", "heran√ßa"')
  }
  
  if (problemas.some(p => p.includes('incompleta'))) {
    sugestoes.push('Complete as express√µes para maior clareza')
    sugestoes.push('Use artigos e preposi√ß√µes quando necess√°rio')
  }
  
  if (genre.includes('sertanejo')) {
    sugestoes.push('Use linguagem coloquial natural: "pra", "t√°", "c√™"')
  }
  
  return sugestoes
}

// ============================================================================
// FUN√á√ïES PRINCIPAIS
// ============================================================================

/**
 * Analisa uma letra completa usando a Terceira Via
 */
export function analisarTerceiraVia(lyrics: string, genre: string, theme: string): TerceiraViaAnalysis {
  console.log(`[TerceiraVia] üîç Analisando letra do g√™nero: ${genre}`)
  
  const lines = lyrics.split('\n').filter(line => 
    line.trim() && !line.startsWith('[') && !line.startsWith('(') && !line.includes('Instruments:')
  )
  
  const problemas: string[] = []
  const versosProblematicos: Array<{linha: string, problema: string, sugestao: string}> = []
  
  // Detec√ß√£o de problemas cr√≠ticos
  lines.forEach((line, index) => {
    const problemasLinha: string[] = []
    
    // Palavras cortadas
    if (/(^|\s)n√£[^o]/.test(line.toLowerCase())) {
      problemasLinha.push('Palavra cortada: "n√£" deve ser "n√£o"')
    }
    if (/dire√ß√£(\s|$)/.test(line.toLowerCase())) {
      problemasLinha.push('Palavra cortada: "dire√ß√£" deve ser "dire√ß√£o"')
    }
    if (/ra√ß(\s|$)/.test(line.toLowerCase())) {
      problemasLinha.push('Palavra cortada: "ra√ß" deve ser "ra√ßa"')
    }
    if (/l√°√ß/.test(line.toLowerCase())) {
      problemasLinha.push('Palavra cortada: "l√°√ß" deve ser "la√ßo"')
    }
    if (/heran√ß(\s|$)/.test(line.toLowerCase())) {
      problemasLinha.push('Palavra cortada: "heran√ß" deve ser "heran√ßa"')
    }
    
    // Express√µes incompletas
    if (line.includes('sem dire√ß√£')) {
      problemasLinha.push('Express√£o incompleta: "sem dire√ß√£"')
    }
    if (line.includes('volto pra heran√ß')) {
      problemasLinha.push('Express√£o incompleta: "volto pra heran√ß"')
    }
    
    if (problemasLinha.length > 0) {
      problemas.push(...problemasLinha)
      versosProblematicos.push({
        linha: line,
        problema: problemasLinha.join(', '),
        sugestao: sugerirCorrecao(line, problemasLinha)
      })
    }
  })
  
  // Calcula score baseado nos problemas
  const scoreBase = 100
  const penalidadePorProblema = 8
  const scoreFinal = Math.max(40, scoreBase - (problemas.length * penalidadePorProblema))
  
  console.log(`[TerceiraVia] üìä Score: ${scoreFinal} (${problemas.length} problemas)`)
  
  return {
    score_geral: scoreFinal,
    pontos_fracos: problemas,
    sugestoes: gerarSugestoes(problemas, genre),
    versos_problematicos: versosProblematicos
  }
}

/**
 * Aplica corre√ß√µes da Terceira Via a uma linha
 */
export async function applyTerceiraViaToLine(
  line: string,
  index: number,
  context: string,
  isPerformanceMode: boolean,
  additionalRequirements?: string,
  genre?: string,
): Promise<string> {
  if (!line.trim() || line.startsWith("[") || line.startsWith("(") || line.includes("Instruments:")) {
    return line
  }

  try {
    console.log(`[TerceiraVia] üîß Processando linha ${index}: "${line.substring(0, 40)}..."`)

    // Aplicar corre√ß√µes imediatas para problemas cr√≠ticos
    let correctedLine = aplicarCorrecoesImediatas(line)
    
    // Se ainda precisa de melhorias, usa o mecanismo avan√ßado
    if (precisaDeMelhorias(correctedLine)) {
      console.log(`[TerceiraVia] üöÄ Aplicando melhorias avan√ßadas para linha ${index}`)
      
      // Simula√ß√£o de processamento avan√ßado - pode ser expandido posteriormente
      const improvedLine = await processarLinhaAvancado(
        correctedLine,
        genre || "sertanejo-moderno",
        context,
        additionalRequirements
      )

      console.log(`[TerceiraVia] ‚úÖ Linha ${index} melhorada: "${improvedLine}"`)
      return improvedLine
    }

    console.log(`[TerceiraVia] ‚úÖ Linha ${index} j√° otimizada: "${correctedLine}"`)
    return correctedLine

  } catch (error) {
    console.error(`[TerceiraVia] ‚ùå Erro na linha ${index}:`, error)
    return aplicarCorrecoesImediatas(line)
  }
}

/**
 * Processamento avan√ßado de linha (placeholder para futura expans√£o)
 */
async function processarLinhaAvancado(
  line: string,
  genre: string,
  context: string,
  additionalRequirements?: string
): Promise<string> {
  try {
    const prompt = `Melhore esta linha de m√∫sica ${genre}:

LINHA: "${line}"
CONTEXTO: ${context}
${additionalRequirements ? `REQUISITOS: ${additionalRequirements}` : ''}

REGRAS:
- Mantenha o significado original
- Use palavras completas e corretas
- M√°ximo 11 s√≠labas
- Linguagem natural brasileira

Retorne APENAS a linha melhorada:`

    const response = await generateText({
      model: "openai/gpt-4o",
      prompt,
      temperature: 0.3,
    })

    return response.text?.trim() || line
  } catch (error) {
    console.error(`[TerceiraVia-Avancado] ‚ùå Erro no processamento avan√ßado:`, error)
    return line
  }
}

// ============================================================================
// COMPATIBILIDADE
// ============================================================================

/**
 * Fun√ß√£o legacy para compatibilidade
 */
export async function applyLegacyTerceiraVia(
  line: string,
  index: number,
  context: string,
  additionalRequirements?: string,
): Promise<string> {
  return applyTerceiraViaToLine(line, index, context, false, additionalRequirements)
}
