// lib/terceira-via/third-way-converter.ts - VERS√ÉO COMPLETAMENTE REFORMULADA

import { generateText } from "ai"
import { countPoeticSyllables } from "@/lib/validation/syllable-counter-brasileiro"

export class ThirdWayEngine {
  /**
   * üéØ M√âTODO PRINCIPAL - TOTALMENTE REFORMULADO
   * Gera a "Terceira Via": uma vers√£o que evita clich√™s de IA mantendo a ess√™ncia
   */
  static async generateThirdWayLine(
    originalLine: string,
    genre: string,
    genreConfig: any,
    context: string,
    performanceMode = false,
    additionalRequirements?: string,
  ): Promise<string> {
    if (!this.shouldProcessLine(originalLine)) {
      return originalLine
    }

    console.log(`[ThirdWay] üéØ Processando: "${originalLine.substring(0, 40)}..."`)

    try {
      // ‚úÖ AN√ÅLISE DA LINHA ORIGINAL
      const analysis = this.analyzeLine(originalLine, genre)

      // ‚úÖ SE J√Å √â BOA, MANT√âM
      if (analysis.qualityScore >= 80 && !this.hasAICliche(originalLine)) {
        console.log(`[ThirdWay] ‚úÖ Linha j√° de qualidade - mantendo`)
        return originalLine
      }

      // ‚úÖ GERA 3 ABORDAGENS DIFERENTES
      const approaches = await Promise.all([
        this.approachEmotional(originalLine, genre, context, analysis),
        this.approachMinimalist(originalLine, genre, context, analysis),
        this.approachMetaphorical(originalLine, genre, context, analysis),
      ])

      // ‚úÖ SELECIONA A MELHOR
      const bestLine = await this.selectBestApproach(originalLine, approaches, genre, analysis)

      console.log(`[ThirdWay] üéâ MELHOR: "${bestLine.substring(0, 50)}..."`)
      return bestLine
    } catch (error) {
      console.error(`[ThirdWay] ‚ùå Erro em: "${originalLine}" -`, error)
      return originalLine
    }
  }

  /**
   * üé≠ ABORDAGEM 1: EMOCIONAL E AUT√äNTICA
   * Foca em sentimentos genu√≠nos, evita clich√™s
   */
  private static async approachEmotional(
    originalLine: string,
    genre: string,
    context: string,
    analysis: LineAnalysis,
  ): Promise<string> {
    const prompt = `COMO SER HUMANO COMPOSITOR - ABORDAGEM EMOCIONAL AUT√äNTICA

LINHA ORIGINAL (N√ÉO COPIE, APENAS SE INSPIRE):
"${originalLine}"

CONTEXTO DA M√öSICA:
${context}

G√äNERO: ${genre}
TAREFA: Reescreva esta linha como um SER HUMANO de verdade sentiria e expressaria.

DIRETRIZES CR√çTICAS:
üö´ N√ÉO USE: "cora√ß√£o", "alma", "gratid√£o transbordando", "amor infinito", "tua luz"
‚úÖ USE: Emo√ß√µes espec√≠ficas e situa√ß√µes reais
‚úÖ SEJA: Vulner√°vel, genu√≠no, espec√≠fico
‚úÖ LINGUAGEM: Coloquial brasileira natural

EXEMPLOS DE COMO UM HUMANO FALARIA:
‚ùå "Meu cora√ß√£o est√° cheio de gratid√£o" ‚Üí ‚úÖ "Ainda lembro daquele abra√ßo que salvou meu dia"
‚ùå "Tua luz ilumina meu caminho" ‚Üí ‚úÖ "Naquela tarde chuvosa, sua chegada mudou tudo"
‚ùå "Minha alma encontra paz em ti" ‚Üí ‚úÖ "No sil√™ncio da madrugada, seu apoio me acalma"

LINHA RESSRITA (m√°ximo ${analysis.maxSyllables} s√≠labas):`

    const { text } = await generateText({
      model: "openai/gpt-4o-mini",
      prompt,
      temperature: 0.9, // Alta criatividade
    })

    return this.validateAndClean(text || originalLine, analysis.maxSyllables)
  }

  /**
   * üé® ABORDAGEM 2: MINIMALISTA E DIRETA
   * Remove excessos, foca no essencial
   */
  private static async approachMinimalist(
    originalLine: string,
    genre: string,
    context: string,
    analysis: LineAnalysis,
  ): Promise<string> {
    const prompt = `COPO METADE VAZIO - ABORDAGEM MINIMALISTA CR√çTICA

LINHA ORIGINAL (PROVAVELMENTE CLICH√ä):
"${originalLine}"

CONTEXTO: ${context}
G√äNERO: ${genre}

TAREFA: Reescreva de forma BRUTALMENTE HONESTA e MINIMALISTA.

PENSE COMO CR√çTICO:
- Qual a VERDADE por tr√°s do clich√™?
- Como dizer a mesma coisa sem firula?
- Que detalhe espec√≠fico tornaria isso real?

EXEMPLOS DE DESCONSTRU√á√ÉO:
‚ùå "Cada amanhecer √© uma b√™n√ß√£o" ‚Üí ‚úÖ "O caf√© da manh√£ ainda tem gosto"
‚ùå "Nos bra√ßos de Deus encontro paz" ‚Üí ‚úÖ "Na fila do banco, respirei fundo"
‚ùå "Teu amor renova minhas for√ßas" ‚Üí ‚úÖ "Sua mensagem veio na hora certa"

LINHA RESSRITA (seja cru, seja real, ${analysis.maxSyllables} s√≠labas):`

    const { text } = await generateText({
      model: "openai/gpt-4o-mini",
      prompt,
      temperature: 0.7,
    })

    return this.validateAndClean(text || originalLine, analysis.maxSyllables)
  }

  /**
   * üåü ABORDAGEM 3: METAF√ìRICA E PO√âTICA
   * Usa imagens originais, n√£o as batidas da IA
   */
  private static async approachMetaphorical(
    originalLine: string,
    genre: string,
    context: string,
    analysis: LineAnalysis,
  ): Promise<string> {
    const prompt = `POETA ORIGINAL - MET√ÅFORAS NUNCA VISTAS

LINHA ORIGINAL (EVITE ESTES CLICH√äS):
"${originalLine}"

CONTEXTO: ${context}  
G√äNERO: ${genre}

TAREFA: Crie uma met√°fora COMPLETAMENTE ORIGINAL que transmita a mesma emo√ß√£o.

MET√ÅFORAS PROIBIDAS (J√Å VISTAS DEMais):
‚ùå Luz/escurid√£o, porto seguro, caminho, flor, tempestade
‚ùå Rio, mar, vento, fogo, abrigo, lar

MET√ÅFORAS ORIGINAIS SUGERIDAS:
‚úÖ "Como a primeira risada depois do cinema"
‚úÖ "Parecido com o cheiro de livro novo na estante"  
‚úÖ "Igual encontrar dinheiro no bolso do casaco"
‚úÖ "Como o sil√™ncio que fica depois que a m√∫sica para"

LINHA RESSRITA (met√°fora nova, ${analysis.maxSyllables} s√≠labas):`

    const { text } = await generateText({
      model: "openai/gpt-4o-mini",
      prompt,
      temperature: 0.95, // M√°xima criatividade
    })

    return this.validateAndClean(text || originalLine, analysis.maxSyllables)
  }

  /**
   * üèÜ SELECIONA A MELHOR ABORDAGEM
   */
  private static async selectBestApproach(
    originalLine: string,
    approaches: string[],
    genre: string,
    analysis: LineAnalysis,
  ): Promise<string> {
    // Remove duplicatas e linhas inv√°lidas
    const validApproaches = approaches.filter(
      (line, index, array) =>
        line &&
        line !== originalLine &&
        array.indexOf(line) === index && // Remove duplicatas
        this.countSyllables(line) <= analysis.maxSyllables &&
        !this.hasAICliche(line),
    )

    if (validApproaches.length === 0) {
      return originalLine
    }

    if (validApproaches.length === 1) {
      return validApproaches[0]
    }

    // ‚úÖ ANALISA QUALIDADE DAS ABORDAGENS
    const scoredApproaches = validApproaches.map((line) => ({
      line,
      score: this.calculateLineQuality(line, originalLine, genre),
    }))

    // Ordena por score e pega a melhor
    scoredApproaches.sort((a, b) => b.score - a.score)

    return scoredApproaches[0].line
  }

  /**
   * üìä ANALISA QUALIDADE DA LINHA
   */
  private static calculateLineQuality(line: string, original: string, genre: string): number {
    let score = 50

    // ‚úÖ B√îNUS POR ORIGINALIDADE
    if (!this.hasAICliche(line)) score += 20
    if (this.hasOriginalMetaphor(line)) score += 15

    // ‚úÖ B√îNUS POR ESPECIFICIDADE
    if (this.hasConcreteDetails(line)) score += 10
    if (this.hasEmotionalAuthenticity(line)) score += 10

    // ‚úÖ B√îNUS POR FORMATA√á√ÉO
    const syllables = this.countSyllables(line)
    const idealSyllables = this.getIdealSyllables(genre)
    if (Math.abs(syllables - idealSyllables) <= 2) score += 10

    // ‚úÖ PENALIDADES
    if (line.length < 5) score -= 30
    if (this.isTooAbstract(line)) score -= 15
    if (line === original) score -= 20 // Penaliza se n√£o mudou nada

    return Math.max(0, score)
  }

  // ‚îÄ‚îÄ‚îÄ ANALYTICS & VALIDATION ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

  private static analyzeLine(line: string, genre: string): LineAnalysis {
    const syllables = this.countSyllables(line)
    const maxSyllables = this.getMaxSyllables(genre)

    return {
      originalLine: line,
      syllableCount: syllables,
      maxSyllables,
      hasCliche: this.hasAICliche(line),
      qualityScore: this.calculateBaseQuality(line, genre),
      emotionalDepth: this.assessEmotionalDepth(line),
    }
  }

  private static hasAICliche(line: string): boolean {
    const cliches = [
      "cora√ß√£o aberto",
      "gratid√£o transbordando",
      "amor infinito",
      "tua luz",
      "minha alma",
      "aben√ßoado",
      "renovar",
      "cada amanhecer",
      "tua presen√ßa",
      "eternamente",
      "nos bra√ßos de",
      "encontro paz",
      "achando abrigo",
      "transbordando em mim",
      "de m√£os dadas",
      "minha fortaleza",
      "minha esperan√ßa",
      "Deus me deu",
      "sinto a tua",
      "minha vida",
      "√© uma b√™n√ß√£o",
    ]

    const lowerLine = line.toLowerCase()
    return cliches.some((cliche) => lowerLine.includes(cliche))
  }

  private static hasOriginalMetaphor(line: string): boolean {
    const originalIndicators = ["como", "parecido", "igual", "que nem", "tipo"]
    return originalIndicators.some((indicator) => line.toLowerCase().includes(indicator))
  }

  private static hasConcreteDetails(line: string): boolean {
    const concreteWords = [
      "caf√©",
      "janela",
      "√¥nibus",
      "chuva",
      "telefone",
      "mesa",
      "cadeira",
      "rua",
      "pra√ßa",
      "filme",
      "m√∫sica",
      "livro",
      "caneta",
      "papel",
    ]
    return concreteWords.some((word) => line.toLowerCase().includes(word))
  }

  private static hasEmotionalAuthenticity(line: string): boolean {
    const authenticMarkers = [
      "quase",
      "talvez",
      "√†s vezes",
      "de repente",
      "do nada",
      "sem querer",
      "quando",
      "enquanto",
      "antes",
      "depois",
    ]
    return authenticMarkers.some((marker) => line.toLowerCase().includes(marker))
  }

  private static isTooAbstract(line: string): boolean {
    const abstractWords = [
      "vida",
      "amor",
      "paz",
      "alegria",
      "esperan√ßa",
      "f√©",
      "destino",
      "universo",
      "eternidade",
      "infinito",
    ]

    const words = line.toLowerCase().split(/\s+/)
    const abstractCount = words.filter((word) => abstractWords.includes(word)).length

    return abstractCount >= 2
  }

  private static calculateBaseQuality(line: string, genre: string): number {
    let score = 60

    if (!this.hasAICliche(line)) score += 20
    if (this.hasConcreteDetails(line)) score += 10
    if (this.hasEmotionalAuthenticity(line)) score += 10

    const syllables = this.countSyllables(line)
    const ideal = this.getIdealSyllables(genre)
    if (Math.abs(syllables - ideal) <= 2) score += 10

    return Math.min(100, score)
  }

  private static assessEmotionalDepth(line: string): number {
    if (this.hasAICliche(line)) return 1
    if (this.hasConcreteDetails(line)) return 3
    if (this.hasEmotionalAuthenticity(line)) return 4
    return 2
  }

  // ‚îÄ‚îÄ‚îÄ UTILITIES ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

  private static shouldProcessLine(line: string): boolean {
    const trimmed = line.trim()
    return (
      trimmed.length > 0 &&
      trimmed.length > 3 &&
      !trimmed.startsWith("[") &&
      !trimmed.startsWith("(") &&
      !trimmed.startsWith("###")
    )
  }

  private static validateAndClean(line: string, maxSyllables: number): string {
    if (!line) return ""

    let cleaned = line
      .replace(/^["']|["']$/g, "") // Remove aspas
      .replace(/\s+/g, " ") // Normaliza espa√ßos
      .trim()

    // Garante que n√£o exceda s√≠labas
    if (this.countSyllables(cleaned) > maxSyllables) {
      cleaned = this.smartTrim(cleaned, maxSyllables)
    }

    return cleaned
  }

  private static smartTrim(line: string, maxSyllables: number): string {
    const words = line.split(" ")
    let result = words[0]

    for (let i = 1; i < words.length; i++) {
      const testLine = words.slice(0, i + 1).join(" ")
      if (this.countSyllables(testLine) > maxSyllables) {
        break
      }
      result = testLine
    }

    return result
  }

  private static countSyllables(text: string): number {
    return countPoeticSyllables(text)
  }

  private static getMaxSyllables(genre: string): number {
    // Usa o sistema unificado
    return 12 // Padr√£o do UnifiedSyllableManager
  }

  private static getIdealSyllables(genre: string): number {
    const genreLower = genre.toLowerCase()
    if (genreLower.includes("sertanejo")) return 9
    if (genreLower.includes("pagode")) return 9
    if (genreLower.includes("rock")) return 10
    return 9 // Padr√£o
  }
}

interface LineAnalysis {
  originalLine: string
  syllableCount: number
  maxSyllables: number
  hasCliche: boolean
  qualityScore: number
  emotionalDepth: number
}
