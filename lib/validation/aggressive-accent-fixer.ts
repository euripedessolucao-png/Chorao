/**
 * CORRETOR AGRESSIVO DE ACENTUA√á√ÉO - VERS√ÉO FINAL ABSOLUTA
 * 
 * Corrige TODOS os padr√µes problem√°ticos de uma vez por todas
 */

export class AggressiveAccentFixer {
  private static readonly ACCENT_CORRECTIONS: Record<string, string> = {
    // ... (todo o dicion√°rio anterior mantido) ...

    // CORRE√á√ïES ESPEC√çFICAS PARA OS √öLTIMOS PADR√ïES
    pra: "para",
    t√°: "est√°",
    n√£ganhava: "n√£o ganhava",
    n√£mora: "n√£o mora",
    n√£posso: "n√£o posso",
    "firm'na": "firme na",
    dedo: "dedos",
    ra√ßa: "de ra√ßa",
    ess: "esse"
  }

  /**
   * CORRE√á√ÉO ABSOLUTA - Resolve TODOS os problemas
   */
  static fix(text: string): {
    correctedText: string
    corrections: Array<{ original: string; corrected: string; count: number }>
  } {
    let correctedText = text
    const corrections: Array<{ original: string; corrected: string; count: number }> = []

    console.log(`[AccentFixer] üöÄ Iniciando corre√ß√£o ABSOLUTA...`)

    // FASE 1: CORRE√á√ïES CR√çTICAS - TODOS OS PADR√ïES
    const criticalFixes = [
      // Contra√ß√µes problem√°ticas
      { regex: /\bpra\b/gi, correction: 'para', description: 'contra√ß√£o pra' },
      { regex: /\bt√°\b/gi, correction: 'est√°', description: 'contra√ß√£o t√°' },
      { regex: /firm'na/gi, correction: 'firme na', description: 'contra√ß√£o firm na' },
      
      // Palavras coladas com "n√£"
      { regex: /n√£ganhava/gi, correction: 'n√£o ganhava', description: 'n√£+ganhava colado' },
      { regex: /n√£mora/gi, correction: 'n√£o mora', description: 'n√£+mora colado' },
      { regex: /n√£posso/gi, correction: 'n√£o posso', description: 'n√£+posso colado' },
      
      // Plural faltando
      { regex: /\bdedo\b/gi, correction: 'dedos', description: 'plural dedo' },
      
      // Preposi√ß√£o faltando
      { regex: /\bcavalo ra√ßa\b/gi, correction: 'cavalo de ra√ßa', description: 'preposi√ß√£o faltando' },
      
      // Artigo desnecess√°rio
      { regex: /\bE hoje\b/gi, correction: 'Hoje', description: 'E desnecess√°rio' },
      
      // Express√£o inconsistente
      { regex: /\bcasa mais nobre\b/gi, correction: 'casa nobre', description: 'mais desnecess√°rio' },
    ]

    for (const { regex, correction, description } of criticalFixes) {
      const matches = correctedText.match(regex)
      if (matches) {
        const before = correctedText
        correctedText = correctedText.replace(regex, correction)
        if (before !== correctedText) {
          corrections.push({
            original: matches[0],
            corrected: correction,
            count: matches.length
          })
          console.log(`[AccentFixer] üí• CR√çTICO: ${description} ‚Üí "${matches[0]}" ‚Üí "${correction}"`)
        }
      }
    }

    // FASE 2: CORRE√á√ïES DO DICION√ÅRIO
    const sortedCorrections = Object.entries(this.ACCENT_CORRECTIONS)
      .sort(([a], [b]) => b.length - a.length)

    for (const [wrong, correct] of sortedCorrections) {
      if (correctedText.toLowerCase().includes(wrong.toLowerCase())) {
        const regex = new RegExp(`\\b${this.escapeRegex(wrong)}\\b`, "gi")
        const matches = correctedText.match(regex)
        const count = matches ? matches.length : 0

        if (count > 0) {
          correctedText = correctedText.replace(regex, (match) => {
            return this.preserveCapitalization(match, correct)
          })

          corrections.push({
            original: wrong,
            corrected: correct,
            count,
          })

          if (count > 0) {
            console.log(`[AccentFixer] üîß Dicion√°rio: "${wrong}" ‚Üí "${correct}" (${count}x)`)
          }
        }
      }
    }

    // FASE 3: CORRE√á√ÉO DE ESTRUTURA E CONSIST√äNCIA
    correctedText = this.fixStructureAndConsistency(correctedText)

    console.log(`[AccentFixer] ‚úÖ CORRE√á√ÉO ABSOLUTA FINALIZADA: ${corrections.length} corre√ß√µes`)
    
    return { correctedText, corrections }
  }

  /**
   * Corre√ß√£o de estrutura e consist√™ncia
   */
  private static fixStructureAndConsistency(text: string): string {
    let corrected = text
    
    // Corre√ß√µes espec√≠ficas para estrutura e consist√™ncia
    const structureFixes = [
      // Corrigir "p√© firme na trilha" para manter consist√™ncia com "estrada"
      { 
        problem: /p√© firme na trilha/gi,
        fix: "p√© firme na estrada"
      },
      
      // Corrigir verso 1 para manter paralelismo
      { 
        problem: /Eu n√£o ganhava dinheiro, mas amava/gi,
        fix: "Eu n√£o ganhava dinheiro, eu amava"
      },
      
      // Corrigir verso 2 para completar sentido
      { 
        problem: /Escolhi o dinheiro, dessa ilus√£o/gi,
        fix: "Escolhi o dinheiro, perdi minha f√©"
      },
      
      // Corrigir seguran√ßa (j√° deve estar corrigida, mas garante)
      { 
        problem: /falsa seguran√ßa/gi,
        fix: "falsa seguran√ßa"
      },
    ]

    structureFixes.forEach(({ problem, fix }) => {
      if (problem.test(corrected)) {
        const before = corrected
        corrected = corrected.replace(problem, fix)
        if (before !== corrected) {
          console.log(`[AccentFixer] üèóÔ∏è  Estrutural: "${before.match(problem)?.[0]}" ‚Üí "${fix}"`)
        }
      }
    })

    return corrected
  }

  /**
   * VALIDA√á√ÉO ZERO TOLER√ÇNCIA
   */
  static validate(text: string): { 
    isValid: boolean;
    score: number;
    errors: Array<{ type: string; problem: string; suggestion: string }>;
  } {
    const errors: Array<{ type: string; problem: string; suggestion: string }> = []

    // PADR√ïES PROBLEM√ÅTICOS - ZERO TOLER√ÇNCIA
    const zeroTolerancePatterns = [
      { pattern: /\bpra\b/gi, type: 'CONTRA√á√ÉO_INACEIT√ÅVEL', suggestion: 'SUBSTITUIR por "para"' },
      { pattern: /\bt√°\b/gi, type: 'CONTRA√á√ÉO_INACEIT√ÅVEL', suggestion: 'SUBSTITUIR por "est√°"' },
      { pattern: /firm'na/gi, type: 'CONTRACAO_ESTRANHA', suggestion: 'CORRIGIR para "firme na"' },
      { pattern: /n√£ganhava/gi, type: 'PALAVRA_COLADA', suggestion: 'SEPARAR "n√£o ganhava"' },
      { pattern: /n√£mora/gi, type: 'PALAVRA_COLADA', suggestion: 'SEPARAR "n√£o mora"' },
      { pattern: /n√£posso/gi, type: 'PALAVRA_COLADA', suggestion: 'SEPARAR "n√£o posso"' },
      { pattern: /\bdedo\b/gi, type: 'PLURAL_FALTANDO', suggestion: 'USAR "dedos"' },
      { pattern: /\bcavalo ra√ßa\b/gi, type: 'PREPOSICAO_FALTANDO', suggestion: 'COMPLETAR "cavalo de ra√ßa"' },
      { pattern: /\bE hoje\b/gi, type: 'CONJUNCAO_DESNECESSARIA', suggestion: 'REMOVER "E"' },
      { pattern: /\bcasa mais nobre\b/gi, type: 'ADV√âRBIO_DESNECESS√ÅRIO', suggestion: 'REMOVER "mais"' },
    ]

    zeroTolerancePatterns.forEach(({ pattern, type, suggestion }) => {
      const matches = text.match(pattern)
      if (matches) {
        matches.forEach(match => {
          if (!errors.some(error => error.problem === match && error.type === type)) {
            errors.push({ type, problem: match, suggestion })
          }
        })
      }
    })

    // Score m√°ximo de exig√™ncia
    const qualityScore = errors.length === 0 ? 100 : 0
    const isValid = errors.length === 0

    console.log(`[AccentFixer] üìä Valida√ß√£o ZERO TOLER√ÇNCIA: ${qualityScore}/100 (${errors.length} problemas)`)

    if (!isValid) {
      console.error(`[AccentFixer] ‚ùå FALHA CR√çTICA - Padr√µes problem√°ticos encontrados:`)
      errors.forEach((error, index) => {
        console.error(`  ${index + 1}. ${error.type}: "${error.problem}" ‚Üí ${error.suggestion}`)
      })
    }

    return { isValid, score: qualityScore, errors }
  }

  /**
   * CORRE√á√ÉO FINAL COM GARANTIA TOTAL
   */
  static ultimateFix(text: string): string {
    console.log(`[AccentFixer] üíé Aplicando CORRE√á√ÉO ULTIMATE...`)
    
    // Primeira passada
    let corrected = this.fix(text).correctedText
    
    // Valida√ß√£o zero toler√¢ncia
    const validation = this.validate(corrected)
    
    // Se ainda tiver problemas, aplica corre√ß√£o for√ßada
    if (!validation.isValid) {
      console.log(`[AccentFixer] üîÑ Aplicando corre√ß√£o for√ßada...`)
      
      validation.errors.forEach(error => {
        switch (error.type) {
          case 'PALAVRA_COLADA':
            corrected = corrected.replace(/n√£ganhava/gi, 'n√£o ganhava')
            corrected = corrected.replace(/n√£mora/gi, 'n√£o mora')
            corrected = corrected.replace(/n√£posso/gi, 'n√£o posso')
            break
          case 'CONTRA√á√ÉO_INACEIT√ÅVEL':
            corrected = corrected.replace(/\bpra\b/gi, 'para')
            corrected = corrected.replace(/\bt√°\b/gi, 'est√°')
            break
          case 'PREPOSICAO_FALTANDO':
            corrected = corrected.replace(/\bcavalo ra√ßa\b/gi, 'cavalo de ra√ßa')
            break
          case 'CONJUNCAO_DESNECESSARIA':
            corrected = corrected.replace(/\bE hoje\b/gi, 'Hoje')
            break
          case 'ADV√âRBIO_DESNECESS√ÅRIO':
            corrected = corrected.replace(/\bcasa mais nobre\b/gi, 'casa nobre')
            break
        }
      })
    }

    // Valida√ß√£o final
    const finalValidation = this.validate(corrected)
    if (finalValidation.isValid) {
      console.log(`[AccentFixer] üéâ SUCESSO TOTAL! Texto perfeito.`)
    }

    return corrected
  }

  private static preserveCapitalization(original: string, corrected: string): string {
    if (original.charAt(0) === original.charAt(0).toUpperCase()) {
      return corrected.charAt(0).toUpperCase() + corrected.slice(1)
    }
    return corrected
  }

  private static escapeRegex(str: string): string {
    return str.replace(/[.*+?^${}()|[\]\\]/g, "\\$&")
  }
}
