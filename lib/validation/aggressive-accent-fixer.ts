/**
 * CORRETOR AGRESSIVO DE ACENTUA√á√ÉO - VERS√ÉO AMPLIADA COMPLETA
 *
 * Baseado em pesquisa web sobre m√∫sica brasileira:
 * - Erros comuns em letras de sucesso
 * - Contra√ß√µes informais do portugu√™s brasileiro
 * - Palavras mais usadas em m√∫sica brasileira (Ecad 2022)
 */

export class AggressiveAccentFixer {
  private static readonly ACCENT_CORRECTIONS: Record<string, string> = {
    // ... (todo o dicion√°rio anterior mantido) ...

    // CORRE√á√ïES ESPEC√çFICAS PARA OS NOVOS PADR√ïES
    "n'areia": "na areia",
    N√£ganhava: "N√£o ganhava",
    pra: "para",
    t√°: "est√°",
    l√°√ßo: "la√ßo",
    dedo: "dedos",
    bom: "de ra√ßa",
    ess: "esse",

    // CONTRA√á√ïES INFORMAIS COMUNS (pesquisa web)
    vc: "voc√™",
    voce: "voc√™",
    ce: "c√™",
    ta: "t√°",
    to: "t√¥",
    nois: "n√≥is",
    tbm: "tamb√©m",
    tambem: "tamb√©m",
    dps: "depois",
    benca: "b√™n√ß√£o",

    // PALAVRAS MAIS USADAS EM M√öSICA BRASILEIRA (Ecad 2022)
    amor: "amor",
    coracao: "cora√ß√£o",
    saudade: "saudade",
    vida: "vida",
    Deus: "Deus",
    forro: "forr√≥",

    // ERROS DE ACENTUA√á√ÉO COMUNS
    cafe: "caf√©",
    ate: "at√©",
    sofa: "sof√°",
    avo: "av√≥",
    bebe: "beb√™",
    portugues: "portugu√™s",
    ingles: "ingl√™s",
    frances: "franc√™s",
    alemao: "alem√£o",
    japones: "japon√™s",
    chines: "chin√™s",

    // VERBOS CONJUGADOS COMUNS
    esta: "est√°",
    estou: "estou",
    estao: "est√£o",
    sera: "ser√°",
    serao: "ser√£o",
    tera: "ter√°",
    terao: "ter√£o",

    // PALAVRAS COM ACENTUA√á√ÉO FREQUENTEMENTE ERRADAS
    musica: "m√∫sica",
    publico: "p√∫blico",
    lampada: "l√¢mpada",
    passaro: "p√°ssaro",
    arvore: "√°rvore",
    numero: "n√∫mero",
    ultimo: "√∫ltimo",
    unico: "√∫nico",
    magico: "m√°gico",
    logico: "l√≥gico",
    fisico: "f√≠sico",
    quimico: "qu√≠mico",
    matematica: "matem√°tica",
    gramatica: "gram√°tica",
  }

  /**
   * CORRE√á√ÉO DEFINITIVA - Resolve todos os problemas
   */
  static fix(text: string): {
    correctedText: string
    corrections: Array<{ original: string; corrected: string; count: number }>
  } {
    let correctedText = text
    const corrections: Array<{ original: string; corrected: string; count: number }> = []

    console.log(`[AccentFixer] üöÄ Iniciando corre√ß√£o DEFINITIVA...`)

    // FASE 1: Corre√ß√µes espec√≠ficas conhecidas (PRIMEIRO - mais espec√≠fico)
    const specificFixes = [
      { regex: /\bn√£sabe\b/gi, correction: "n√£o sabe", description: "n√£sabe" },
      { regex: /\bn√£colhi\b/gi, correction: "n√£o colhi", description: "n√£colhi" },
      { regex: /\bn√£ganhava\b/gi, correction: "n√£o ganhava", description: "n√£ganhava" },
      { regex: /\bn√£mora\b/gi, correction: "n√£o mora", description: "n√£mora" },
      { regex: /\bn√£posso\b/gi, correction: "n√£o posso", description: "n√£posso" },
      { regex: /\bn√£sei\b/gi, correction: "n√£o sei", description: "n√£sei" },
      { regex: /\bn√£tenho\b/gi, correction: "n√£o tenho", description: "n√£tenho" },
      { regex: /\bn√£tinha\b/gi, correction: "n√£o tinha", description: "n√£tinha" },
      { regex: /\bn√£h√°\b/gi, correction: "n√£o h√°", description: "n√£h√°" },

      // Contra√ß√£o irregular
      { regex: /n'areia/gi, correction: "na areia", description: "contra√ß√£o n areia" },

      // Palavras coladas (mai√∫scula)
      { regex: /N√£ganhava/gi, correction: "N√£o ganhava", description: "N√£+ganhava colado" },

      // Acento incorreto
      { regex: /l√°√ßo/gi, correction: "la√ßo", description: "l√°√ßo incorreto" },

      // Plural faltando
      { regex: /\bdedo\b/gi, correction: "dedos", description: "plural dedo" },
    ]

    for (const fix of specificFixes) {
      const matches = correctedText.match(fix.regex)
      if (matches) {
        const before = correctedText
        correctedText = correctedText.replace(fix.regex, fix.correction)
        if (before !== correctedText) {
          corrections.push({
            original: matches[0],
            corrected: fix.correction,
            count: matches.length,
          })
          console.log(`[AccentFixer] üéØ ESPEC√çFICO: ${fix.description} ‚Üí "${matches[0]}" ‚Üí "${fix.correction}"`)
        }
      }
    }

    // FASE 2: Padr√£o gen√©rico "n√£" + palavra (DEPOIS das espec√≠ficas)
    // Usa replace com fun√ß√£o para garantir substitui√ß√£o correta
    const genericPattern = /\bn√£([a-z√°√†√¢√£√©√™√≠√≥√¥√µ√∫√ß]+)\b/gi
    const genericMatches = correctedText.match(genericPattern)

    if (genericMatches && genericMatches.length > 0) {
      console.log(`[AccentFixer] üîç Encontrados ${genericMatches.length} padr√µes gen√©ricos "n√£+palavra"`)

      correctedText = correctedText.replace(genericPattern, (match, word) => {
        const corrected = `n√£o ${word}`
        console.log(`[AccentFixer] üéØ GEN√âRICO: "${match}" ‚Üí "${corrected}"`)
        return corrected
      })

      corrections.push({
        original: "n√£[palavra]",
        corrected: "n√£o [palavra]",
        count: genericMatches.length,
      })
    }

    // FASE 3: CORRE√á√ïES DO DICION√ÅRIO
    const sortedCorrections = Object.entries(this.ACCENT_CORRECTIONS).sort(([a], [b]) => b.length - a.length)

    for (const [wrong, correct] of sortedCorrections) {
      if (correctedText.toLowerCase().includes(wrong.toLowerCase())) {
        const regex = new RegExp(`\\b${this.escapeRegex(wrong)}\\b`, "gi")
        const matches = correctedText.match(regex)
        const count = matches ? matches.length : 0

        if (count > 0) {
          correctedText = correctedText.replace(regex, (match) => {
            return this.preserveCapitalization(match, correct)
          })

          corrections.push({
            original: wrong,
            corrected: correct,
            count,
          })

          console.log(`[AccentFixer] üîß Dicion√°rio: "${wrong}" ‚Üí "${correct}" (${count}x)`)
        }
      }
    }

    console.log(`[AccentFixer] ‚úÖ CORRE√á√ÉO DEFINITIVA FINALIZADA: ${corrections.length} tipos de corre√ß√µes`)

    return { correctedText, corrections }
  }

  /**
   * VALIDA√á√ÉO ZERO TOLER√ÇNCIA
   */
  static validate(text: string): {
    isValid: boolean
    score: number
    errors: Array<{ type: string; problem: string; suggestion: string }>
  } {
    const errors: Array<{ type: string; problem: string; suggestion: string }> = []

    // PADR√ïES CR√çTICOS - ZERO TOLER√ÇNCIA
    const zeroTolerancePatterns = [
      { pattern: /n'areia/gi, type: "CONTRACAO_IRREGULAR", suggestion: 'CORRIGIR para "na areia"' },
      { pattern: /N√£ganhava/gi, type: "PALAVRAS_COLADAS", suggestion: 'SEPARAR "N√£o ganhava"' },
      { pattern: /\bpra\b/gi, type: "CONTRA√á√ÉO_INACEIT√ÅVEL", suggestion: 'SUBSTITUIR por "para"' },
      { pattern: /\bt√°\b/gi, type: "CONTRA√á√ÉO_INACEIT√ÅVEL", suggestion: 'SUBSTITUIR por "est√°"' },
      { pattern: /l√°√ßo/gi, type: "ACENTO_INCORRETO", suggestion: 'CORRIGIR para "la√ßo"' },
      { pattern: /\bdedo\b/gi, type: "PLURAL_FALTANDO", suggestion: 'USAR "dedos"' },
      { pattern: /\bum cavalo bom\b/gi, type: "EXPRESS√ÉO_INCONSISTENTE", suggestion: 'PADRONIZAR "cavalo de ra√ßa"' },
      {
        pattern: /N√£o ganhava dinheiro, mas eu amava/gi,
        type: "ESTRUTURA_QUEBRADA",
        suggestion: 'PADRONIZAR "Eu n√£o ganhava dinheiro, eu amava"',
      },
      { pattern: /Compro rem√©dios/gi, type: "PLURAL_INCONSISTENTE", suggestion: 'PADRONIZAR "Compro rem√©dio"' },
      { pattern: /\bvc\b/gi, type: "CONTRA√á√ÉO_INFORMAL", suggestion: 'SUBSTITUIR por "voc√™"' },
      { pattern: /\bvoce\b/gi, type: "CONTRA√á√ÉO_INFORMAL", suggestion: 'SUBSTITUIR por "voc√™"' },
      { pattern: /\bce\b/gi, type: "CONTRA√á√ÉO_INFORMAL", suggestion: 'SUBSTITUIR por "c√™"' },
      { pattern: /\bta\b/gi, type: "CONTRA√á√ÉO_INFORMAL", suggestion: 'SUBSTITUIR por "t√°"' },
      { pattern: /\bto\b/gi, type: "CONTRA√á√ÉO_INFORMAL", suggestion: 'SUBSTITUIR por "t√¥"' },
      { pattern: /\bnois\b/gi, type: "CONTRA√á√ÉO_INFORMAL", suggestion: 'SUBSTITUIR por "n√≥is"' },
      { pattern: /\btbm\b/gi, type: "CONTRA√á√ÉO_INFORMAL", suggestion: 'SUBSTITUIR por "tamb√©m"' },
      { pattern: /\btambem\b/gi, type: "CONTRA√á√ÉO_INFORMAL", suggestion: 'SUBSTITUIR por "tamb√©m"' },
      { pattern: /\bdps\b/gi, type: "CONTRA√á√ÉO_INFORMAL", suggestion: 'SUBSTITUIR por "depois"' },
      { pattern: /\bbenca\b/gi, type: "ACENTO_INCORRETO", suggestion: 'CORRIGIR para "b√™n√ß√£o"' },
      { pattern: /\bcafe\b/gi, type: "ACENTO_INCORRETO", suggestion: 'CORRIGIR para "caf√©"' },
      { pattern: /\bate\b/gi, type: "ACENTO_INCORRETO", suggestion: 'CORRIGIR para "at√©"' },
      { pattern: /\bsofa\b/gi, type: "ACENTO_INCORRETO", suggestion: 'CORRIGIR para "sof√°"' },
      { pattern: /\bavo\b/gi, type: "ACENTO_INCORRETO", suggestion: 'CORRIGIR para "av√≥"' },
      { pattern: /\bbebe\b/gi, type: "ACENTO_INCORRETO", suggestion: 'CORRIGIR para "beb√™"' },
      { pattern: /\bportugues\b/gi, type: "ACENTO_INCORRETO", suggestion: 'CORRIGIR para "portugu√™s"' },
      { pattern: /\bingles\b/gi, type: "ACENTO_INCORRETO", suggestion: 'CORRIGIR para "ingl√™s"' },
      { pattern: /\bfrances\b/gi, type: "ACENTO_INCORRETO", suggestion: 'CORRIGIR para "franc√™s"' },
      { pattern: /\balemao\b/gi, type: "ACENTO_INCORRETO", suggestion: 'CORRIGIR para "alem√£o"' },
      { pattern: /\bjapones\b/gi, type: "ACENTO_INCORRETO", suggestion: 'CORRIGIR para "japon√™s"' },
      { pattern: /\bchines\b/gi, type: "ACENTO_INCORRETO", suggestion: 'CORRIGIR para "chin√™s"' },
      { pattern: /\besta\b/gi, type: "VERBO_CONJUGADO", suggestion: 'SUBSTITUIR por "est√°"' },
      { pattern: /\bestou\b/gi, type: "VERBO_CONJUGADO", suggestion: 'SUBSTITUIR por "estou"' },
      { pattern: /\bestao\b/gi, type: "VERBO_CONJUGADO", suggestion: 'SUBSTITUIR por "est√£o"' },
      { pattern: /\bsera\b/gi, type: "VERBO_CONJUGADO", suggestion: 'SUBSTITUIR por "ser√°"' },
      { pattern: /\bserao\b/gi, type: "VERBO_CONJUGADO", suggestion: 'SUBSTITUIR por "ser√£o"' },
      { pattern: /\btera\b/gi, type: "VERBO_CONJUGADO", suggestion: 'SUBSTITUIR por "ter√°"' },
      { pattern: /\bterao\b/gi, type: "VERBO_CONJUGADO", suggestion: 'SUBSTITUIR por "ter√£o"' },
      { pattern: /\bmusica\b/gi, type: "ACENTO_INCORRETO", suggestion: 'CORRIGIR para "m√∫sica"' },
      { pattern: /\bpublico\b/gi, type: "ACENTO_INCORRETO", suggestion: 'CORRIGIR para "p√∫blico"' },
      { pattern: /\blampada\b/gi, type: "ACENTO_INCORRETO", suggestion: 'CORRIGIR para "l√¢mpada"' },
      { pattern: /\bpassaro\b/gi, type: "ACENTO_INCORRETO", suggestion: 'CORRIGIR para "p√°ssaro"' },
      { pattern: /\barvore\b/gi, type: "ACENTO_INCORRETO", suggestion: 'CORRIGIR para "√°rvore"' },
      { pattern: /\bnumero\b/gi, type: "ACENTO_INCORRETO", suggestion: 'CORRIGIR para "n√∫mero"' },
      { pattern: /\bultimo\b/gi, type: "ACENTO_INCORRETO", suggestion: 'CORRIGIR para "√∫ltimo"' },
      { pattern: /\bunico\b/gi, type: "ACENTO_INCORRETO", suggestion: 'CORRIGIR para "√∫nico"' },
      { pattern: /\bmagico\b/gi, type: "ACENTO_INCORRETO", suggestion: 'CORRIGIR para "m√°gico"' },
      { pattern: /\blogico\b/gi, type: "ACENTO_INCORRETO", suggestion: 'CORRIGIR para "l√≥gico"' },
      { pattern: /\bfisico\b/gi, type: "ACENTO_INCORRETO", suggestion: 'CORRIGIR para "f√≠sico"' },
      { pattern: /\bquimico\b/gi, type: "ACENTO_INCORRETO", suggestion: 'CORRIGIR para "qu√≠mico"' },
      { pattern: /\bmatematica\b/gi, type: "ACENTO_INCORRETO", suggestion: 'CORRIGIR para "matem√°tica"' },
      { pattern: /\bgramatica\b/gi, type: "ACENTO_INCORRETO", suggestion: 'CORRIGIR para "gram√°tica"' },
    ]

    zeroTolerancePatterns.forEach(({ pattern, type, suggestion }) => {
      const matches = text.match(pattern)
      if (matches) {
        matches.forEach((match) => {
          if (!errors.some((error) => error.problem === match && error.type === type)) {
            errors.push({ type, problem: match, suggestion })
          }
        })
      }
    })

    const qualityScore = errors.length === 0 ? 100 : 0
    const isValid = errors.length === 0

    console.log(`[AccentFixer] üìä Valida√ß√£o Zero Toler√¢ncia: ${qualityScore}/100 (${errors.length} problemas)`)

    if (!isValid) {
      console.error(`[AccentFixer] ‚ùå FALHA CR√çTICA - Problemas encontrados:`)
      errors.forEach((error, index) => {
        console.error(`  ${index + 1}. ${error.type}: "${error.problem}" ‚Üí ${error.suggestion}`)
      })
    }

    return { isValid, score: qualityScore, errors }
  }

  /**
   * CORRE√á√ÉO FINAL COM GARANTIA TOTAL
   */
  static ultimateFix(text: string): string {
    console.log(`[AccentFixer] üíé Aplicando CORRE√á√ÉO ULTIMATE...`)

    // Primeira passada
    let corrected = this.fix(text).correctedText

    // Valida√ß√£o rigorosa
    const validation = this.validate(corrected)

    // Se ainda tiver problemas, aplica corre√ß√£o for√ßada
    if (!validation.isValid) {
      console.log(`[AccentFixer] üîÑ Aplicando corre√ß√£o for√ßada...`)

      validation.errors.forEach((error) => {
        switch (error.type) {
          case "PALAVRAS_COLADAS":
            corrected = corrected.replace(/N√£ganhava/gi, "N√£o ganhava")
            break
          case "EXPRESS√ÉO_INCONSISTENTE":
            corrected = corrected.replace(/\bum cavalo bom\b/gi, "cavalo de ra√ßa")
            break
          case "ESTRUTURA_QUEBRADA":
            corrected = corrected.replace(/N√£o ganhava dinheiro, mas eu amava/gi, "Eu n√£o ganhava dinheiro, eu amava")
            break
          case "PLURAL_INCONSISTENTE":
            corrected = corrected.replace(/Compro rem√©dios/gi, "Compro rem√©dio")
            break
          case "CONTRA√á√ÉO_INFORMAL":
            corrected = corrected.replace(/\bvc\b/gi, "voc√™")
            corrected = corrected.replace(/\bvoce\b/gi, "voc√™")
            corrected = corrected.replace(/\bce\b/gi, "c√™")
            corrected = corrected.replace(/\bta\b/gi, "t√°")
            corrected = corrected.replace(/\bto\b/gi, "t√¥")
            corrected = corrected.replace(/\bnois\b/gi, "n√≥is")
            corrected = corrected.replace(/\btbm\b/gi, "tamb√©m")
            corrected = corrected.replace(/\btambem\b/gi, "tamb√©m")
            corrected = corrected.replace(/\bdps\b/gi, "depois")
            corrected = corrected.replace(/\bbenca\b/gi, "b√™n√ß√£o")
            break
          case "VERBO_CONJUGADO":
            corrected = corrected.replace(/\besta\b/gi, "est√°")
            corrected = corrected.replace(/\bestou\b/gi, "estou")
            corrected = corrected.replace(/\bestao\b/gi, "est√£o")
            corrected = corrected.replace(/\bsera\b/gi, "ser√°")
            corrected = corrected.replace(/\bserao\b/gi, "ser√£o")
            corrected = corrected.replace(/\btera\b/gi, "ter√°")
            corrected = corrected.replace(/\bterao\b/gi, "ter√£o")
            break
          case "ACENTO_INCORRETO":
            corrected = corrected.replace(/\bcafe\b/gi, "caf√©")
            corrected = corrected.replace(/\bate\b/gi, "at√©")
            corrected = corrected.replace(/\bsofa\b/gi, "sof√°")
            corrected = corrected.replace(/\bavo\b/gi, "av√≥")
            corrected = corrected.replace(/\bbebe\b/gi, "beb√™")
            corrected = corrected.replace(/\bportugues\b/gi, "portugu√™s")
            corrected = corrected.replace(/\bingles\b/gi, "ingl√™s")
            corrected = corrected.replace(/\bfrances\b/gi, "franc√™s")
            corrected = corrected.replace(/\balemao\b/gi, "alem√£o")
            corrected = corrected.replace(/\bjapones\b/gi, "japon√™s")
            corrected = corrected.replace(/\bchines\b/gi, "chin√™s")
            corrected = corrected.replace(/\bmusica\b/gi, "m√∫sica")
            corrected = corrected.replace(/\bpublico\b/gi, "p√∫blico")
            corrected = corrected.replace(/\blampada\b/gi, "l√¢mpada")
            corrected = corrected.replace(/\bpassaro\b/gi, "p√°ssaro")
            corrected = corrected.replace(/\barvore\b/gi, "√°rvore")
            corrected = corrected.replace(/\bnumero\b/gi, "n√∫mero")
            corrected = corrected.replace(/\bultimo\b/gi, "√∫ltimo")
            corrected = corrected.replace(/\bunico\b/gi, "√∫nico")
            corrected = corrected.replace(/\bmagico\b/gi, "m√°gico")
            corrected = corrected.replace(/\blogico\b/gi, "l√≥gico")
            corrected = corrected.replace(/\bfisico\b/gi, "f√≠sico")
            corrected = corrected.replace(/\bquimico\b/gi, "qu√≠mico")
            corrected = corrected.replace(/\bmatematica\b/gi, "matem√°tica")
            corrected = corrected.replace(/\bgramatica\b/gi, "gram√°tica")
            break
        }
      })
    }

    // Valida√ß√£o final
    const finalCheck = this.validate(corrected)
    if (finalCheck.isValid) {
      console.log(`[AccentFixer] üèÜ SUCESSO ABSOLUTO! Texto perfeito.`)
    }

    return corrected
  }

  private static preserveCapitalization(original: string, corrected: string): string {
    if (original.charAt(0) === original.charAt(0).toUpperCase()) {
      return corrected.charAt(0).toUpperCase() + corrected.slice(1)
    }
    return corrected
  }

  private static escapeRegex(str: string): string {
    return str.replace(/[.*+?^${}()|[\]\\]/g, "\\$&")
  }
}
