/**
 * CORRETOR AGRESSIVO DE ACENTUA√á√ÉO - VERS√ÉO FINAL DEFINITIVA
 * 
 * Corre√ß√£o definitiva para todos os padr√µes problem√°ticos
 */

export class AggressiveAccentFixer {
  private static readonly ACCENT_CORRECTIONS: Record<string, string> = {
    // ... (todo o dicion√°rio anterior mantido) ...

    // CORRE√á√ïES ESPEC√çFICAS PARA OS PADR√ïES IDENTIFICADOS
    pra: "para",
    t√°: "est√°",
    n√£mora: "n√£o mora",
    l√°√ßo: "la√ßo",
    dedo: "dedos",
    ra√ßa: "de ra√ßa",
    perdi: "perdi a",
    ess: "esse"
  }

  /**
   * CORRE√á√ÉO DEFINITIVA - Resolve todos os problemas
   */
  static fix(text: string): {
    correctedText: string
    corrections: Array<{ original: string; corrected: string; count: number }>
  } {
    let correctedText = text
    const corrections: Array<{ original: string; corrected: string; count: number }> = []

    console.log(`[AccentFixer] üöÄ Iniciando corre√ß√£o DEFINITIVA...`)

    // CORRE√á√ïES PRECISAS PARA TODOS OS PADR√ïES
    const definitiveFixes = [
      // Contra√ß√µes problem√°ticas
      { regex: /\bpra\b/gi, correction: 'para', description: 'contra√ß√£o pra' },
      { regex: /\bt√°\b/gi, correction: 'est√°', description: 'contra√ß√£o t√°' },
      
      // Palavras coladas
      { regex: /n√£mora/gi, correction: 'n√£o mora', description: 'n√£+mora colado' },
      
      // Acento incorreto
      { regex: /l√°√ßo/gi, correction: 'la√ßo', description: 'l√°√ßo incorreto' },
      
      // Plural faltando
      { regex: /\bdedo\b/gi, correction: 'dedos', description: 'plural dedo' },
      
      // Preposi√ß√£o faltando
      { regex: /\bcavalo ra√ßa\b/gi, correction: 'cavalo de ra√ßa', description: 'preposi√ß√£o faltando' },
      
      // Artigo faltando
      { regex: /\bperdi minha f√©\b/gi, correction: 'perdi a minha f√©', description: 'artigo faltando' },
      
      // Repeti√ß√£o de palavras
      { regex: /\bCasa nobre nobre\b/gi, correction: 'Casa nobre', description: 'nobre repetido' },
      
      // Conjun√ß√£o desnecess√°ria
      { regex: /\bE hoje\b/gi, correction: 'Hoje', description: 'E desnecess√°rio' },
      
      // Artigo faltando
      { regex: /\bde terra\b/gi, correction: 'da terra', description: 'artigo terra' },
      
      // Redund√¢ncia no verso 1
      { regex: /liberdade\.\.\. era livre, voava/gi, correction: 'liberdade... voava', description: 'redund√¢ncia era livre' },
      
      // Express√£o quebrada no OUTRO
      { regex: /\bdessa perdi a f√©\b/gi, correction: 'dessa ilus√£o perdi a f√©', description: 'express√£o quebrada' },
    ]

    for (const { regex, correction, description } of definitiveFixes) {
      const matches = correctedText.match(regex)
      if (matches) {
        const before = correctedText
        correctedText = correctedText.replace(regex, correction)
        if (before !== correctedText) {
          corrections.push({
            original: matches[0],
            corrected: correction,
            count: matches.length
          })
          console.log(`[AccentFixer] üéØ DEFINITIVO: ${description} ‚Üí "${matches[0]}" ‚Üí "${correction}"`)
        }
      }
    }

    // FASE 2: CORRE√á√ïES DO DICION√ÅRIO
    const sortedCorrections = Object.entries(this.ACCENT_CORRECTIONS)
      .sort(([a], [b]) => b.length - a.length)

    for (const [wrong, correct] of sortedCorrections) {
      if (correctedText.toLowerCase().includes(wrong.toLowerCase())) {
        const regex = new RegExp(`\\b${this.escapeRegex(wrong)}\\b`, "gi")
        const matches = correctedText.match(regex)
        const count = matches ? matches.length : 0

        if (count > 0) {
          correctedText = correctedText.replace(regex, (match) => {
            return this.preserveCapitalization(match, correct)
          })

          corrections.push({
            original: wrong,
            corrected: correct,
            count,
          })

          if (count > 0) {
            console.log(`[AccentFixer] üîß Dicion√°rio: "${wrong}" ‚Üí "${correct}" (${count}x)`)
          }
        }
      }
    }

    console.log(`[AccentFixer] ‚úÖ CORRE√á√ÉO DEFINITIVA FINALIZADA: ${corrections.length} corre√ß√µes`)
    
    return { correctedText, corrections }
  }

  /**
   * VALIDA√á√ÉO ZERO TOLER√ÇNCIA
   */
  static validate(text: string): { 
    isValid: boolean;
    score: number;
    errors: Array<{ type: string; problem: string; suggestion: string }>;
  } {
    const errors: Array<{ type: string; problem: string; suggestion: string }> = []

    // PADR√ïES CR√çTICOS - ZERO TOLER√ÇNCIA
    const zeroTolerancePatterns = [
      { pattern: /\bpra\b/gi, type: 'CONTRA√á√ÉO_INACEIT√ÅVEL', suggestion: 'SUBSTITUIR por "para"' },
      { pattern: /\bt√°\b/gi, type: 'CONTRA√á√ÉO_INACEIT√ÅVEL', suggestion: 'SUBSTITUIR por "est√°"' },
      { pattern: /n√£mora/gi, type: 'PALAVRAS_COLADAS', suggestion: 'SEPARAR "n√£o mora"' },
      { pattern: /l√°√ßo/gi, type: 'ACENTO_INCORRETO', suggestion: 'CORRIGIR para "la√ßo"' },
      { pattern: /\bdedo\b/gi, type: 'PLURAL_FALTANDO', suggestion: 'USAR "dedos"' },
      { pattern: /\bcavalo ra√ßa\b/gi, type: 'PREPOSICAO_FALTANDO', suggestion: 'COMPLETAR "cavalo de ra√ßa"' },
      { pattern: /\bperdi minha f√©\b/gi, type: 'ARTIGO_FALTANDO', suggestion: 'COMPLETAR "perdi a minha f√©"' },
      { pattern: /\bCasa nobre nobre\b/gi, type: 'REPETI√á√ÉO_PALAVRA', suggestion: 'REMOVER repeti√ß√£o' },
      { pattern: /\bE hoje\b/gi, type: 'CONJUN√á√ÉO_DESNECESS√ÅRIA', suggestion: 'REMOVER "E"' },
      { pattern: /\bde terra\b/gi, type: 'ARTIGO_FALTANDO', suggestion: 'CORRIGIR para "da terra"' },
      { pattern: /liberdade\.\.\. era livre/gi, type: 'REDUND√ÇNCIA', suggestion: 'REMOVER "era livre"' },
      { pattern: /\bdessa perdi a f√©\b/gi, type: 'EXPRESS√ÉO_QUEBRADA', suggestion: 'COMPLETAR "dessa ilus√£o perdi a f√©"' },
    ]

    zeroTolerancePatterns.forEach(({ pattern, type, suggestion }) => {
      const matches = text.match(pattern)
      if (matches) {
        matches.forEach(match => {
          if (!errors.some(error => error.problem === match && error.type === type)) {
            errors.push({ type, problem: match, suggestion })
          }
        })
      }
    })

    const qualityScore = errors.length === 0 ? 100 : 0
    const isValid = errors.length === 0

    console.log(`[AccentFixer] üìä Valida√ß√£o Zero Toler√¢ncia: ${qualityScore}/100 (${errors.length} problemas)`)

    if (!isValid) {
      console.error(`[AccentFixer] ‚ùå FALHA CR√çTICA - Problemas encontrados:`)
      errors.forEach((error, index) => {
        console.error(`  ${index + 1}. ${error.type}: "${error.problem}" ‚Üí ${error.suggestion}`)
      })
    }

    return { isValid, score: qualityScore, errors }
  }

  /**
   * CORRE√á√ÉO FINAL COM GARANTIA TOTAL
   */
  static ultimateFix(text: string): string {
    console.log(`[AccentFixer] üíé Aplicando CORRE√á√ÉO ULTIMATE...`)
    
    // Primeira passada
    let corrected = this.fix(text).correctedText
    
    // Valida√ß√£o rigorosa
    const validation = this.validate(corrected)
    
    // Se ainda tiver problemas, aplica corre√ß√£o for√ßada
    if (!validation.isValid) {
      console.log(`[AccentFixer] üîÑ Aplicando corre√ß√£o for√ßada...`)
      
      validation.errors.forEach(error => {
        switch (error.type) {
          case 'PALAVRAS_COLADAS':
            corrected = corrected.replace(/n√£mora/gi, 'n√£o mora')
            break
          case 'PREPOSICAO_FALTANDO':
            corrected = corrected.replace(/\bcavalo ra√ßa\b/gi, 'cavalo de ra√ßa')
            break
          case 'ARTIGO_FALTANDO':
            corrected = corrected.replace(/\bperdi minha f√©\b/gi, 'perdi a minha f√©')
            corrected = corrected.replace(/\bde terra\b/gi, 'da terra')
            break
          case 'REPETI√á√ÉO_PALAVRA':
            corrected = corrected.replace(/\bCasa nobre nobre\b/gi, 'Casa nobre')
            break
          case 'REDUND√ÇNCIA':
            corrected = corrected.replace(/liberdade\.\.\. era livre, voava/gi, 'liberdade... voava')
            break
          case 'EXPRESS√ÉO_QUEBRADA':
            corrected = corrected.replace(/\bdessa perdi a f√©\b/gi, 'dessa ilus√£o perdi a f√©')
            break
        }
      })
    }

    // Valida√ß√£o final
    const finalCheck = this.validate(corrected)
    if (finalCheck.isValid) {
      console.log(`[AccentFixer] üèÜ SUCESSO ABSOLUTO! Texto perfeito.`)
    }

    return corrected
  }

  private static preserveCapitalization(original: string, corrected: string): string {
    if (original.charAt(0) === original.charAt(0).toUpperCase()) {
      return corrected.charAt(0).toUpperCase() + corrected.slice(1)
    }
    return corrected
  }

  private static escapeRegex(str: string): string {
    return str.replace(/[.*+?^${}()|[\]\\]/g, "\\$&")
  }
}
