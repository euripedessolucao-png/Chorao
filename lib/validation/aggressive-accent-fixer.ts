/**
 * CORRETOR AGRESSIVO DE ACENTUA√á√ÉO - VERS√ÉO FINAL SEM ERROS
 * 
 * Corrige TODOS os padr√µes problem√°ticos sem erros de sintaxe
 */

export class AggressiveAccentFixer {
  private static readonly ACCENT_CORRECTIONS: Record<string, string> = {
    // MONOSS√çLABOS T√îNICOS (terminados em -a(s), -e(s), -o(s))
    nao: "n√£o",
    n√£: "n√£o",
    la: "l√°",
    ca: "c√°",
    ja: "j√°",
    pa: "p√°",
    pe: "p√©",
    fe: "f√©",
    po: "p√≥",
    so: "s√≥",
    vo: "v√≥",

    // OX√çTONAS (√∫ltima s√≠laba t√¥nica)
    voce: "voc√™",
    cafe: "caf√©",
    ate: "at√©",
    apos: "ap√≥s",
    atras: "atr√°s",
    tambem: "tamb√©m",
    alem: "al√©m",
    ninguem: "ningu√©m",
    alguem: "algu√©m",
    porem: "por√©m",
    parabens: "parab√©ns",
    refens: "ref√©ns",
    armazem: "armaz√©m",
    vint√©m: "vint√©m",
    refem: "ref√©m",
    bebe: "beb√™",
    mante: "mant√™",
    avo: "av√≥",
    vovo: "vov√≥",
    bisavo: "bisav√≥",

    // PAROX√çTONAS (pen√∫ltima s√≠laba t√¥nica)
    facil: "f√°cil",
    dificil: "dif√≠cil",
    movel: "m√≥vel",
    util: "√∫til",
    fragil: "fr√°gil",
    esteril: "est√©ril",
    fertil: "f√©rtil",
    volatil: "vol√°til",
    acucar: "a√ß√∫car",
    carater: "car√°ter",
    cancer: "c√¢ncer",
    juri: "j√∫ri",
    tenis: "t√™nis",
    lapis: "l√°pis",
    gratis: "gr√°tis",
    bonus: "b√¥nus",
    virus: "v√≠rus",
    orfao: "√≥rf√£o",
    orgao: "√≥rg√£o",
    bencao: "b√™n√ß√£o",
    irmao: "irm√£o",
    irma: "irm√£",
    maos: "m√£os",
    paes: "p√£es",
    caes: "c√£es",
    mae: "m√£e",
    mao: "m√£o",
    alemao: "alem√£o",
    alema: "alem√£",
    cidadao: "cidad√£o",
    cidada: "cidad√£",
    cristao: "crist√£o",
    crista: "crist√£",

    // PROPAROX√çTONAS (antepen√∫ltima s√≠laba t√¥nica - TODAS s√£o acentuadas)
    musica: "m√∫sica",
    lampada: "l√¢mpada",
    arvore: "√°rvore",
    numero: "n√∫mero",
    ultimo: "√∫ltimo",
    proximo: "pr√≥ximo",
    maximo: "m√°ximo",
    minimo: "m√≠nimo",
    otimo: "√≥timo",
    pessimo: "p√©ssimo",
    rapido: "r√°pido",
    liquido: "l√≠quido",
    solido: "s√≥lido",
    publico: "p√∫blico",
    pratico: "pr√°tico",
    teorico: "te√≥rico",
    historico: "hist√≥rico",
    geografico: "geogr√°fico",
    matematica: "matem√°tica",
    fisica: "f√≠sica",
    quimica: "qu√≠mica",
    biologica: "biol√≥gica",
    economico: "econ√¥mico",
    politico: "pol√≠tico",
    juridico: "jur√≠dico",
    medico: "m√©dico",
    tecnico: "t√©cnico",
    eletrico: "el√©trico",
    mecanico: "mec√¢nico",
    organico: "org√¢nico",
    inorganico: "inorg√¢nico",

    // PALAVRAS COM CEDILHA (√ß)
    seguranca: "seguran√ßa",
    seguran√ß: "seguran√ßa",
    seguran√ßaa: "seguran√ßa",
    esperanca: "esperan√ßa",
    esperan√ß: "esperan√ßa",
    lembranca: "lembran√ßa",
    mudanca: "mudan√ßa",
    crianca: "crian√ßa",
    danca: "dan√ßa",
    heranca: "heran√ßa",
    heran√ß: "heran√ßa",
    alianca: "alian√ßa",
    balanca: "balan√ßa",
    confianca: "confian√ßa",
    raca: "ra√ßa",
    ra√ß: "ra√ßa",
    ra√ßaa: "ra√ßa",
    racaa: "ra√ßa",
    graca: "gra√ßa",
    praca: "pra√ßa",
    cacador: "ca√ßador",
    cacada: "ca√ßada",
    laco: "la√ßo",
    la√ß: "la√ßo",
    braco: "bra√ßo",
    abraco: "abra√ßo",
    pedaco: "peda√ßo",

    // PALAVRAS COM TIL (~) - NASALIDADE
    coracao: "cora√ß√£o",
    cora√ßao: "cora√ß√£o",
    emocao: "emo√ß√£o",
    emo√ßao: "emo√ß√£o",
    solidao: "solid√£o",
    paixao: "paix√£o",
    ilusao: "ilus√£o",
    cancao: "can√ß√£o",
    can√ßao: "can√ß√£o",
    razao: "raz√£o",
    licao: "li√ß√£o",
    li√ßao: "li√ß√£o",
    opcao: "op√ß√£o",
    op√ßao: "op√ß√£o",
    atencao: "aten√ß√£o",
    aten√ßao: "aten√ß√£o",
    intencao: "inten√ß√£o",
    inten√ßao: "inten√ß√£o",
    direcao: "dire√ß√£o",
    dire√ßao: "dire√ß√£o",
    protecao: "prote√ß√£o",
    prote√ßao: "prote√ß√£o",
    tradicao: "tradi√ß√£o",
    tradi√ßao: "tradi√ß√£o",
    revolucao: "revolu√ß√£o",
    revolu√ßao: "revolu√ß√£o",
    solucao: "solu√ß√£o",
    solu√ßao: "solu√ß√£o",
    confusao: "confus√£o",
    conclusao: "conclus√£o",
    decisao: "decis√£o",
    precisao: "precis√£o",
    divisao: "divis√£o",
    visao: "vis√£o",
    revisao: "revis√£o",
    televisao: "televis√£o",

    // VERBOS NO FUTURO (terminados em -√£o)
    sao: "s√£o",
    vao: "v√£o",
    dao: "d√£o",
    estao: "est√£o",
    serao: "ser√£o",
    terao: "ter√£o",
    poderao: "poder√£o",
    deverao: "dever√£o",
    quererao: "querer√£o",
    saberao: "saber√£o",
    irao: "ir√£o",
    virao: "vir√£o",
    darao: "dar√£o",
    estarao: "estar√£o",
    farao: "far√£o",
    dirao: "dir√£o",
    trarao: "trar√£o",
    verao: "ver√£o",
    lerao: "ler√£o",
    crerao: "crer√£o",

    // PALAVRAS COMUNS EM LETRAS MUSICAIS
    esta: "est√°",
    sera: "ser√°",
    estara: "estar√°",
    tera: "ter√°",
    fara: "far√°",
    dira: "dir√°",
    dara: "dar√°",
    ira: "ir√°",
    vira: "vir√°",
    vera: "ver√°",
    lera: "ler√°",
    crera: "crer√°",
    podera: "poder√°",
    devera: "dever√°",
    querer: "querer√°",
    sabera: "saber√°",
    trara: "trar√°",
    havera: "haver√°",
    comeca: "come√ßa",
    comecara: "come√ßar√°",
    esqueca: "esque√ßa",
    esquecera: "esquecer√°",
    conheca: "conhe√ßa",
    conhecera: "conhecer√°",
    apareca: "apare√ßa",
    aparecera: "aparecer√°",
    mereca: "mere√ßa",
    merecera: "merecer√°",
    permaneca: "permane√ßa",
    permanecera: "permanecer√°",
    pertenca: "perten√ßa",
    pertencera: "pertencer√°",
    aconteca: "aconte√ßa",
    acontecera: "acontecer√°",

    // CORRE√á√ïES ESPEC√çFICAS PARA OS √öLTIMOS PADR√ïES (SEM DUPLICA√á√ïES)
    pra: "para",
    t√°: "est√°",
    n√£posso: "n√£o posso",
    "n'abota": "na bota",
    ess: "esse"
  }

  /**
   * Corrige AGRESSIVAMENTE todas as palavras sem acentos
   */
  static fix(text: string): {
    correctedText: string
    corrections: Array<{ original: string; corrected: string; count: number }>
  } {
    let correctedText = text
    const corrections: Array<{ original: string; corrected: string; count: number }> = []

    console.log(`[AccentFixer] üîß Iniciando corre√ß√£o...`)

    // FASE 1: Corre√ß√µes cr√≠ticas espec√≠ficas (incluindo as que foram removidas do dicion√°rio)
    const criticalFixes = [
      { regex: /\bpra\b/gi, correction: 'para' },
      { regex: /\bt√°\b/gi, correction: 'est√°' },
      { regex: /l√°√ßo/gi, correction: 'la√ßo' },
      { regex: /n√£posso/gi, correction: 'n√£o posso' },
      { regex: /n'abota/gi, correction: 'na bota' },
      { regex: /\bum cavalo bom\b/gi, correction: 'cavalo de ra√ßa' },
      { regex: /\bperdi minha f√©\b/gi, correction: 'perdi a minha f√©' },
      { regex: /\bp√© firme estrada\b/gi, correction: 'p√© firme na estrada' },
      { regex: /\bQuebro cabresto\b/gi, correction: 'Quebro o cabresto' },
      { regex: /l√°co/gi, correction: 'la√ßo' }, // Adicionado para cobrir varia√ß√£o
      { regex: /l√°√ßo/gi, correction: 'la√ßo' }  // Adicionado para cobrir varia√ß√£o
    ]

    for (const { regex, correction } of criticalFixes) {
      const matches = correctedText.match(regex)
      if (matches) {
        correctedText = correctedText.replace(regex, correction)
        corrections.push({
          original: matches[0],
          corrected: correction,
          count: matches.length
        })
        console.log(`[AccentFixer] üîß Cr√≠tico: "${matches[0]}" ‚Üí "${correction}"`)
      }
    }

    // FASE 2: Corre√ß√µes do dicion√°rio
    for (const [wrong, correct] of Object.entries(this.ACCENT_CORRECTIONS)) {
      const regex = new RegExp(`\\b${this.escapeRegex(wrong)}\\b`, "gi")
      const matches = correctedText.match(regex)
      const count = matches ? matches.length : 0

      if (count > 0) {
        correctedText = correctedText.replace(regex, (match) => {
          if (match.charAt(0) === match.charAt(0).toUpperCase()) {
            return correct.charAt(0).toUpperCase() + correct.slice(1)
          }
          return correct
        })

        corrections.push({
          original: wrong,
          corrected: correct,
          count,
        })
      }
    }

    // FASE 3: Corre√ß√µes de estrutura
    correctedText = this.fixStructure(correctedText)

    console.log(`[AccentFixer] ‚úÖ Corre√ß√£o finalizada: ${corrections.length} corre√ß√µes`)
    
    return { correctedText, corrections }
  }

  /**
   * Corre√ß√£o de estrutura e fluxo
   */
  private static fixStructure(text: string): string {
    let corrected = text
    
    const structureFixes = [
      { problem: /Troquei minha paz por papel colorido/gi, fix: "Vendi minha paz por papel colorido" },
      { problem: /Vida simples, liberdade\.\.\. eu voava/gi, fix: "Amava vida, liberdade... voava" },
      { problem: /dessa forma perdi a f√©/gi, fix: "dessa ilus√£o perdi a f√©" },
      { problem: /Tenho casa mais nobre/gi, fix: "Tenho casa nobre" },
      { problem: /Escolhi dinheiro/gi, fix: "Escolhi o dinheiro" }
    ]

    structureFixes.forEach(({ problem, fix }) => {
      if (problem.test(corrected)) {
        corrected = corrected.replace(problem, fix)
        console.log(`[AccentFixer] üèóÔ∏è  Estrutural: "${problem}" ‚Üí "${fix}"`)
      }
    })

    return corrected
  }

  /**
   * Valida se o texto tem palavras sem acentos
   */
  static validate(text: string): { isValid: boolean; wordsWithoutAccents: string[] } {
    const wordsWithoutAccents: string[] = []

    for (const [wrong] of Object.entries(this.ACCENT_CORRECTIONS)) {
      const regex = new RegExp(`\\b${this.escapeRegex(wrong)}\\b`, "gi")
      const matches = text.match(regex)

      if (matches && matches.length > 0) {
        wordsWithoutAccents.push(...matches)
      }
    }

    // Tamb√©m verifica os padr√µes cr√≠ticos
    const criticalPatterns = [
      /\bpra\b/gi,
      /\bt√°\b/gi,
      /l√°√ßo/gi,
      /n√£posso/gi,
      /n'abota/gi,
      /\bum cavalo bom\b/gi,
      /\bperdi minha f√©\b/gi
    ]

    criticalPatterns.forEach(pattern => {
      const matches = text.match(pattern)
      if (matches) {
        wordsWithoutAccents.push(...matches)
      }
    })

    return {
      isValid: wordsWithoutAccents.length === 0,
      wordsWithoutAccents: [...new Set(wordsWithoutAccents)],
    }
  }

  /**
   * Escapa caracteres especiais de regex
   */
  private static escapeRegex(str: string): string {
    return str.replace(/[.*+?^${}()|[\]\\]/g, "\\$&")
  }
}
