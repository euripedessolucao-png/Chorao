import { generateText } from "ai";

export class NuclearValidator {
  // ‚úÖ TORNAR P√öBLICO para uso externo
  public static readonly BROKEN_PATTERNS = [
    /\b(e|a|o|que|com|pra|pro|num|numa|de|da|do|em|no|na|por|me|te|se|um|uma|meu|minha|seu|sua|nosso|nossa|todo|toda|todos|todas|alguns|algumas|muito|muita|pouco|pouca|sem|com|para|porque|quando|onde|como)\s*$/i,
    /[,-]\s*$/,
    /√ß√£$/,
    /\.\.\.$/,
    /‚Ä¶$/,
    (line: string) => {
      const words = line.split(/\s+/).filter(w => w.length > 0);
      return words.length <= 2 && line.length < 25 && !/[!?.]$/.test(line);
    }
  ];

  /**
   * ‚úÖ M√âTODO P√öBLICO para verificar linhas quebradas
   */
  public static isBrokenLine(line: string): boolean {
    const trimmed = line.trim();
    
    // Ignora cabe√ßalhos, metadata e linhas vazias
    if (!trimmed || 
        trimmed.startsWith('### [') || 
        trimmed.startsWith('(Instrumentation)') || 
        trimmed.startsWith('(Genre)') ||
        trimmed.startsWith('[Intro]') ||
        trimmed.startsWith('[Verso') ||
        trimmed.startsWith('[Pr√©-Refr√£o]') ||
        trimmed.startsWith('[Refr√£o]') ||
        trimmed.startsWith('[Ponte]') ||
        trimmed.startsWith('[Outro]')) {
      return false;
    }

    return this.BROKEN_PATTERNS.some(pattern => 
      typeof pattern === 'function' ? pattern(trimmed) : pattern.test(trimmed)
    );
  }

  /**
   * üö® VALIDA√á√ÉO NUCLEAR - DETECTA E CORRIGE TODAS AS LINHAS QUEBRADAS
   */
  static async nuclearValidation(lyrics: string): Promise<string> {
    console.log("üö® [NuclearValidator] Iniciando valida√ß√£o nuclear...");
    
    const lines = lyrics.split('\n');
    let hasBrokenLines = false;
    const brokenLines: number[] = [];

    // üîç DETEC√á√ÉO BRUTAL
    for (let i = 0; i < lines.length; i++) {
      if (this.isBrokenLine(lines[i])) {
        console.log(`‚ùå LINHA ${i + 1} QUEBRADA: "${lines[i]}"`);
        brokenLines.push(i);
        hasBrokenLines = true;
      }
    }

    // üö® SE ENCONTRAR LINHAS QUEBRADAS, REGERA COMPLETAMENTE
    if (hasBrokenLines) {
      console.log(`üö® ${brokenLines.length} LINHAS QUEBRADAS ENCONTRADAS - REGERANDO LETRA COMPLETA`);
      return await this.regenerateCompleteLyrics(lyrics, brokenLines);
    }

    console.log("‚úÖ [NuclearValidator] Nenhuma linha quebrada encontrada");
    return lyrics;
  }

  /**
   * üéØ REGERA√á√ÉO COMPLETA COM PROMPT SUPER-EFETIVO
   */
  private static async regenerateCompleteLyrics(brokenLyrics: string, brokenLines: number[]): Promise<string> {
    const prompt = `üö® CORRIJA IMEDIATAMENTE ESTA LETRA COM LINHAS QUEBRADAS:

LETRA COM PROBLEMAS GRAVES:
${brokenLyrics}

üö´ ERROS CR√çTICOS IDENTIFICADOS (linhas ${brokenLines.map(l => l + 1).join(', ')}):
‚Ä¢ Linhas terminando em "cora√ß√£", "meu", "teu", "que", "de", "em", "com"
‚Ä¢ Frases cortadas no meio como "ilumina meu", "encontro a paz que eu"
‚Ä¢ Estruturas incompletas como "fica", "t√£", "sinto t√£"
‚Ä¢ Palavras pela metade como "cora√ß√£" (deveria ser "cora√ß√£o")

‚úÖ REGRAS ABSOLUTAS - N√ÉO PODE FALHAR:
1. TODAS as linhas devem ser COMPLETAS e fazer sentido
2. ZERO linhas quebradas ou cortadas
3. 8-12 s√≠labas por verso
4. Estrutura coerente: Intro ‚Üí Verso 1 ‚Üí Pr√©-Refr√£o ‚Üí Refr√£o ‚Üí Verso 2 ‚Üí Refr√£o ‚Üí Ponte ‚Üí Refr√£o ‚Üí Outro
5. Refr√£o ID√äNTICO nas 3 repeti√ß√µes
6. Linguagem natural do sertanejo moderno

üéØ EXEMPLOS DE CORRE√á√ÉO OBRIGAT√ìRIOS:
‚Ä¢ "Hoje eu t√¥ aqui com o cora√ß√£" ‚Üí "Hoje eu t√¥ aqui com o cora√ß√£o aberto"
‚Ä¢ "Teu sorriso √© luz que ilumina meu" ‚Üí "Teu sorriso √© luz que ilumina meu caminho"  
‚Ä¢ "Nos teus bra√ßos eu encontro a paz que eu" ‚Üí "Nos teus bra√ßos eu encontro a paz que eu preciso"
‚Ä¢ "Amor sincero, √© voc√™ a minha" ‚Üí "Amor sincero, √© voc√™ a minha vida inteira"
‚Ä¢ "Meu cora√ß√£o, fica" ‚Üí "Meu cora√ß√£o fica tranquilo ao teu lado"
‚Ä¢ "Com voc√™ ao, eu me sinto t√£" ‚Üí "Com voc√™ ao lado, eu me sinto t√£o completo"

üìù LETRA COMPLETAMENTE CORRIGIDA (APENAS A LETRA, sem explica√ß√µes):`;

    try {
      const { text } = await generateText({
        model: "openai/gpt-4o",
        prompt,
        temperature: 0.3,
      });

      if (!text) {
        console.error("‚ùå Resposta vazia do GPT");
        return brokenLyrics;
      }

      // üî• LIMPEZA SUPER AGRESSIVA
      const cleaned = this.cleanGPTResponse(text);
      
      // ‚úÖ VALIDA√á√ÉO FINAL - SE AINDA TIVER PROBLEMAS, TENTA NOVAMENTE
      const finalValidation = cleaned.split('\n').some(line => this.isBrokenLine(line));
      
      if (finalValidation) {
        console.log("‚ö†Ô∏è Primeira tentativa falhou - tentando novamente com prompt mais forte...");
        return await this.emergencyRegeneration(cleaned);
      }

      console.log("‚úÖ [NuclearValidator] Regenera√ß√£o conclu√≠da com sucesso");
      return cleaned;

    } catch (error) {
      console.error("‚ùå Erro cr√≠tico na regenera√ß√£o:", error);
      return brokenLyrics;
    }
  }

  /**
   * üÜò REGENERA√á√ÉO DE EMERG√äNCIA
   */
  private static async emergencyRegeneration(lyrics: string): Promise<string> {
    const prompt = `üö®üö® CORRE√á√ÉO DE EMERG√äNCIA - ELIMINE TODAS AS LINHAS QUEBRADAS:

LETRA AINDA COM PROBLEMAS:
${lyrics}

üö´ INSTRU√á√ÉO ABSOLUTA:
- CORRIJA CADA LINHA QUEBRADA
- COMPLETE TODAS AS FRASES INCOMPLETAS  
- GARANTA QUE CADA VERSO TENHA SUJEITO + VERBO + COMPLEMENTO
- ZERO linhas terminando em preposi√ß√µes, artigos ou palavras cortadas

‚úÖ RESULTADO EXIGIDO:
Letra 100% completa e coerente, pronta para grava√ß√£o

LETRA CORRIGIDA DEFINITIVA:`;

    const { text } = await generateText({
      model: "openai/gpt-4o",
      prompt,
      temperature: 0.1,
    });

    return this.cleanGPTResponse(text || lyrics);
  }

  /**
   * üßπ LIMPEZA SUPER AGRESSIVA DA RESPOSTA DO GPT
   */
  private static cleanGPTResponse(text: string): string {
    return text
      .split('\n')
      .filter(line => {
        const trimmed = line.trim();
        return trimmed && 
               !trimmed.startsWith('üö®') &&
               !trimmed.startsWith('üö´') && 
               !trimmed.startsWith('‚úÖ') &&
               !trimmed.startsWith('üéØ') &&
               !trimmed.startsWith('üìù') &&
               !trimmed.startsWith('LETRA') &&
               !trimmed.startsWith('Regras:') &&
               !trimmed.startsWith('INSTRU√á√ÉO') &&
               !trimmed.startsWith('RESULTADO') &&
               !trimmed.includes('s√≠labas') &&
               !trimmed.includes('linhas quebradas') &&
               !trimmed.includes('CORRIJA') &&
               !trimmed.includes('EXEMPLOS');
      })
      .map(line => line.replace(/^["']|["']$/g, '').trim())
      .join('\n')
      .trim();
  }
}
