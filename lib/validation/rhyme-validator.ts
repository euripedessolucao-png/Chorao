// lib/validation/rhyme-validator.ts

export type RhymeType = "rica" | "pobre" | "perfeita" | "toante" | "consoante" | "falsa"

export type RhymeQuality = {
  type: RhymeType
  score: number // 0-100
  explanation: string
}

// ‚úÖ LISTAS EXPANDIDAS: concreto vs. abstrato
const CONCRETE_NOUNS = new Set([
  // Objetos f√≠sicos
  "riacho", "viola", "ouro", "terno", "terra", "chuva", "caf√©", "x√≠cara", "cavalo", "porteira",
  "cidade", "estrada", "carro", "boteco", "cerveja", "prato", "ped√°gio", "garagem", "choro",
  "amanhecer", "batida", "espelho", "futuro", "noite", "dia", "sol", "lua", "mar", "c√©u", "lar",
  "trabalho", "viol√£o", "sanfona", "boiadeiro", "curral", "chaleira", "fog√£o", "roda", "pandeiro",
  "cama", "foto", "celular", "bebida", "bar", "madrugada", "pared√£o", "zap", "story", "look",
  "baile", "favela", "quebrada", "nave", "grife", "cruz", "altar", "luz", "caminho", "milagre",
  "viol√£o", "samba", "bossa", "gente", "Brasil", "coraz√≥n", "besos", "noche", "luna", "baile",
  "pandeiro", "cavaquinho", "feijoada", "zabumba", "tri√¢ngulo",
  // ADICIONADOS: objetos f√≠sicos comuns em m√∫sicas
  "cora√ß√£o", "olhos", "m√£os", "bra√ßos", "l√°bios", "corpo", "rosto", "cabelo", "peito", "voz",
  "casa", "porta", "janela", "quarto", "cama", "mesa", "cadeira", "espelho", "foto", "retrato",
  "rua", "estrada", "caminho", "pra√ßa", "praia", "mar", "rio", "lago", "montanha", "campo",
  "carro", "moto", "√¥nibus", "trem", "avi√£o", "barco", "bicicleta", "rodovia", "ponte", "t√∫nel",
  "viol√£o", "viola", "guitarra", "piano", "sanfona", "pandeiro", "tambor", "flauta", "saxofone",
  "copo", "garrafa", "prato", "talher", "panela", "fog√£o", "geladeira", "faca", "colher", "x√≠cara",
  "celular", "computador", "tv", "r√°dio", "c√¢mera", "rel√≥gio", "√≥culos", "anel", "pulseira", "colar"
])

const ABSTRACT_NOUNS = new Set([
  // Conceitos, emo√ß√µes, estados
  "liberdade", "paz", "saudade", "alma", "amor", "dor", "cora√ß√£o", "paix√£o", "solid√£o", "raz√£o",
  "ilus√£o", "emo√ß√£o", "flor", "valor", "sabor", "temor", "clamor", "fervor", "ardor", "esplendor",
  "fulgor", "primor", "pudor", "rubor", "torpor", "vigor", "amargor", "candor", "horror", "labor",
  "licor", "louvor", "motor", "pavor", "rancor", "rigor", "rumor", "suor", "tambor", "tenor",
  "terror", "traidor", "tremor", "vapor", "verdor", "gratid√£o", "vida", "luta", "estrada", "presente",
  "chance", "batida", "futuro", "sonho", "felicidade", "tristeza", "alegria", "esperan√ßa", "f√©",
  "confian√ßa", "vit√≥ria", "paz", "adora√ß√£o", "testemunho", "cultura", "identidade", "resist√™ncia",
  "sofrimento", "arrependimento", "perd√£o", "vingan√ßa", "√≥dio", "ci√∫mes", "inveja", "vergonha",
  "orgulho", "humildade", "coragem", "medo", "ansiedade", "depress√£o", "euforia", "nostalgia",
  // ADICIONADOS: mais conceitos abstratos
  "√≥dio", "ci√∫me", "inveja", "raiva", "calma", "guerra", "medo", "coragem",
  "alegria", "tristeza", "saudade", "lembran√ßa", "esperan√ßa", "desespero", "f√©", "d√∫vida", "certeza",
  "verdade", "mentira", "justi√ßa", "injusti√ßa", "pris√£o", "pobreza", "riqueza", "sucesso",
  "fracasso", "vit√≥ria", "derrota", "honra", "vergonha", "orgulho", "humildade", "bondade", "maldade",
  "beleza", "feiura", "juventude", "velhice", "morte", "nascimento", "destino", "sorte", "azar",
  "tempo", "eternidade", "espa√ßo", "universo", "natureza", "humanidade", "sociedade", "cultura", "arte",
  "m√∫sica", "poesia", "literatura", "ci√™ncia", "filosofia", "religi√£o", "pol√≠tica", "economia", "hist√≥ria",
  "futuro", "passado", "presente", "mem√≥ria", "esquecimento", "sonho", "pesadelo", "realidade", "fantasia"
])

const VERBS = new Set([
  // Verbos comuns em m√∫sica
  "amar", "odiar", "querer", "desejar", "precisar", "esperar", "sonhar", "imaginar", "pensar", "acreditar",
  "duvidar", "saber", "ignorar", "entender", "confundir", "explicar", "perguntar", "responder", "dizer",
  "falar", "calar", "gritar", "sussurrar", "cantar", "dan√ßar", "tocar", "ouvir", "ver", "olhar", "enxergar",
  "sentir", "perceber", "notar", "lembrar", "esquecer", "encontrar", "perder", "achar", "buscar", "procurar",
  "chegar", "partir", "ficar", "sair", "entrar", "voltar", "seguir", "parar", "correr", "andar", "caminhar",
  "pular", "saltar", "voar", "nadar", "mergulhar", "subir", "descer", "cair", "levantar", "deitar", "dormir",
  "acordar", "descansar", "trabalhar", "estudar", "aprender", "ensinar", "crescer", "evoluir", "mudar"
])

/**
 * ‚úÖ M√âTODO MELHORADO: Verifica se uma palavra √© CONCRETA
 */
function isConcrete(word: string): boolean {
  const normalized = word.toLowerCase()
  return CONCRETE_NOUNS.has(normalized) || VERBS.has(normalized)
}

/**
 * ‚úÖ M√âTODO MELHORADO: Verifica se uma palavra √© ABSTRATA
 */
function isAbstract(word: string): boolean {
  const normalized = word.toLowerCase()
  return ABSTRACT_NOUNS.has(normalized)
}

/**
 * Normaliza palavra removendo acentos e pontua√ß√£o
 */
function normalizeWord(word: string): string {
  return word
    .toLowerCase()
    .normalize("NFD")
    .replace(/[\u0300-\u036f]/g, "")
    .replace(/[^a-z]/g, "")
    .trim()
}

/**
 * ‚úÖ M√âTODO MELHORADO: Identifica a classe gramatical de uma palavra
 */
function getGrammaticalClass(word: string): "substantivo" | "verbo" | "adjetivo" | "desconhecido" {
  const normalized = normalizeWord(word)

  // Verifica nas listas primeiro (mais preciso)
  if (CONCRETE_NOUNS.has(normalized) || ABSTRACT_NOUNS.has(normalized)) {
    return "substantivo"
  }
  if (VERBS.has(normalized)) {
    return "verbo"
  }

  // Fallback por sufixos
  const verbSuffixes = ["ar", "er", "ir", "ando", "endo", "indo", "ado", "ido"]
  const nounSuffixes = ["√ß√£o", "s√£o", "dade", "tude", "agem", "√™ncia", "√¢ncia", "ez", "ice", "ismo"]
  const adjSuffixes = ["oso", "osa", "√°vel", "√≠vel", "ente", "ante", "ico", "ica", "ino", "ina"]

  if (verbSuffixes.some(suffix => normalized.endsWith(suffix))) {
    return "verbo"
  }
  if (nounSuffixes.some(suffix => normalized.endsWith(suffix))) {
    return "substantivo"
  }
  if (adjSuffixes.some(suffix => normalized.endsWith(suffix))) {
    return "adjetivo"
  }

  return "substantivo" // fallback seguro
}

/**
 * ‚úÖ M√âTODO MELHORADO: Extrai a √∫ltima palavra significativa de uma linha
 */
function getLastWord(line: string): string {
  const cleaned = line.replace(/[^\w√°√†√¢√£√©√®√™√≠√¨√Æ√≥√≤√¥√µ√∫√π√ª√ß\s]/gi, " ").trim()
  const words = cleaned.split(/\s+/).filter(word => word.length > 2)
  
  if (words.length === 0) return ""
  
  // Ignora palavras funcionais
  const insignificantWords = new Set([
    "o", "a", "os", "as", "um", "uma", "uns", "umas", "de", "da", "do", "das", "dos",
    "em", "no", "na", "nos", "nas", "por", "pra", "pro", "pras", "pros", "com", "sem",
    "que", "se", "me", "te", "lhe", "nos", "vos", "lhes", "este", "esta", "esse", "essa"
  ])
  
  for (let i = words.length - 1; i >= 0; i--) {
    const word = words[i].toLowerCase()
    if (!insignificantWords.has(word)) {
      return words[i]
    }
  }
  
  return words[words.length - 1] || ""
}

/**
 * Extrai o som final da palavra (a partir da √∫ltima vogal t√¥nica)
 */
function getEndingSound(word: string): string {
  const normalized = normalizeWord(word)
  const vowels = "aeiou"
  let lastVowelIndex = -1
  for (let i = normalized.length - 1; i >= 0; i--) {
    if (vowels.includes(normalized[i])) {
      lastVowelIndex = i
      break
    }
  }
  return lastVowelIndex !== -1 ? normalized.slice(lastVowelIndex) : normalized
}

/**
 * ‚úÖ M√âTODO CR√çTICO CORRIGIDO: Verifica se duas palavras rimam e classifica o tipo de rima
 */
export function analyzeRhyme(word1: string, word2: string): RhymeQuality {
  const w1 = normalizeWord(word1)
  const w2 = normalizeWord(word2)

  // Palavras id√™nticas n√£o s√£o rima
  if (w1 === w2 || w1.length < 2 || w2.length < 2) {
    return {
      type: "falsa",
      score: 0,
      explanation: "Palavras id√™nticas ou muito curtas n√£o constituem rima",
    }
  }

  const ending1 = getEndingSound(w1)
  const ending2 = getEndingSound(w2)
  const class1 = getGrammaticalClass(w1)
  const class2 = getGrammaticalClass(w2)

  // üî• PRIMEIRO verifica se h√° rima (som final igual)
  if (ending1 !== ending2) {
    // Rima Toante (Assonante): apenas vogais iguais
    const vowels1 = ending1.replace(/[^aeiou]/g, "")
    const vowels2 = ending2.replace(/[^aeiou]/g, "")
    if (vowels1 === vowels2 && vowels1.length > 0) {
      return {
        type: "toante",
        score: 50,
        explanation: `Rima toante: vogais iguais (${vowels1})`
      }
    }

    // Rima Falsa
    return {
      type: "falsa",
      score: 0,
      explanation: "N√£o h√° rima: sons finais muito diferentes"
    }
  }

  // üî• AGORA classifica a QUALIDADE da rima (j√° sabemos que rimam)

  // ‚úÖ 1. RIMA RICA POR CONTRASTE SEM√ÇNTICO
  const isSemanticContrast = 
    (isConcrete(w1) && isAbstract(w2)) || 
    (isAbstract(w1) && isConcrete(w2))
  
  if (isSemanticContrast) {
    const concreteWord = isConcrete(w1) ? w1 : w2
    const abstractWord = isAbstract(w1) ? w1 : w2
    return {
      type: "rica",
      score: 100,
      explanation: `Rima rica por contraste sem√¢ntico: "${concreteWord}" (concreto) + "${abstractWord}" (abstrato)`
    }
  }

  // ‚úÖ 2. RIMA RICA por classe gramatical diferente
  if (class1 !== class2 && class1 !== "desconhecido" && class2 !== "desconhecido") {
    return {
      type: "rica",
      score: 90,
      explanation: `Rima rica: ${class1} + ${class2}`
    }
  }

  // ‚ùå 3. Rima Pobre: mesma classe gramatical
  if (class1 === class2 && class1 !== "desconhecido") {
    return {
      type: "pobre",
      score: 40, // Reduzido de 60 para 40
      explanation: `Rima pobre: ambas s√£o ${class1}`
    }
  }

  // ‚úÖ 4. Rima Perfeita (classe desconhecida ou sem contraste)
  return {
    type: "perfeita",
    score: 70, // Reduzido de 80 para 70
    explanation: `Rima perfeita: som id√™ntico (${ending1})`
  }
}

/**
 * Analisa o esquema de rimas de uma letra completa
 */
export function analyzeLyricsRhymeScheme(lyrics: string): {
  scheme: string[]
  quality: RhymeQuality[]
  score: number
  suggestions: string[]
} {
  const lines = lyrics.split("\n").filter((line) => line.trim() && !line.startsWith("[") && !line.startsWith("("))

  const lastWords = lines.map(getLastWord).filter(Boolean)
  const scheme: string[] = []
  const quality: RhymeQuality[] = []
  let currentLetter = "A"

  for (let i = 0; i < lastWords.length; i++) {
    const word = lastWords[i]
    let foundRhyme = false

    for (let j = 0; j < i; j++) {
      const prevWord = lastWords[j]
      const rhymeAnalysis = analyzeRhyme(word, prevWord)

      if (rhymeAnalysis.score >= 50) {
        const letter = scheme[j]
        scheme.push(letter)
        quality.push(rhymeAnalysis)
        foundRhyme = true
        break
      }
    }

    if (!foundRhyme) {
      scheme.push(currentLetter)
      currentLetter = String.fromCharCode(currentLetter.charCodeAt(0) + 1)
      quality.push({
        type: "falsa",
        score: 0,
        explanation: "Linha sem rima correspondente",
      })
    }
  }

  const totalScore = quality.reduce((sum, q) => sum + q.score, 0) / quality.length

  const suggestions: string[] = []
  const richRhymes = quality.filter((q) => q.type === "rica").length
  const poorRhymes = quality.filter((q) => q.type === "pobre").length

  if (richRhymes < lines.length * 0.3) {
    suggestions.push("üí° Aumente o uso de rimas ricas (contraste concreto/abstrato ou classes diferentes)")
  }
  if (poorRhymes > lines.length * 0.5) {
    suggestions.push("üí° Reduza rimas pobres e varie mais com contrastes sem√¢nticos")
  }

  return {
    scheme,
    quality,
    score: totalScore,
    suggestions,
  }
}

/**
 * ‚úÖ MANTIDO: Valida rimas para um g√™nero espec√≠fico
 */
export function validateRhymesForGenre(
  lyrics: string,
  genre: string,
): {
  valid: boolean
  errors: string[]
  warnings: string[]
  analysis: ReturnType<typeof analyzeLyricsRhymeScheme>
} {
  const analysis = analyzeLyricsRhymeScheme(lyrics)
  const errors: string[] = []
  const warnings: string[] = []

  const genreLower = genre.toLowerCase()

  if (genreLower.includes("raiz")) {
    const richRhymePercentage = analysis.quality.filter((q) => q.type === "rica").length / analysis.quality.length
    if (richRhymePercentage < 0.5) {
      errors.push(`Sertanejo Raiz exige ‚â•50% rimas ricas. Atual: ${(richRhymePercentage * 100).toFixed(0)}%`)
    }
  } else if (genreLower.includes("sertanejo")) {
    const richRhymePercentage = analysis.quality.filter((q) => q.type === "rica").length / analysis.quality.length
    if (richRhymePercentage < 0.3) {
      warnings.push(`Sertanejo prefere ‚â•30% rimas ricas. Atual: ${(richRhymePercentage * 100).toFixed(0)}%`)
    }
  }

  return {
    valid: errors.length === 0,
    errors,
    warnings,
    analysis,
  }
}
