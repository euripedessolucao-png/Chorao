import { UltimateFixer } from "./ultimate-fixer"

const VOWELS = "aeiou√°√†√¢√£√©√®√™√≠√¨√Æ√≥√≤√¥√µ√∫√π√ª"
const VOWEL_REGEX = /[aeiou√°√†√¢√£√©√®√™√≠√¨√Æ√≥√≤√¥√µ√∫√π√ª]/i

const TONIC_MARKERS = /[√°√©√≠√≥√∫√¢√™√¥√£√µ]/i

const OXITONAS = new Set([
  "caf√©",
  "voc√™",
  "at√©",
  "sof√°",
  "av√≥",
  "av√¥",
  "beb√™",
  "portugu√™s",
  "ingl√™s",
  "franc√™s",
  "alem√£o",
  "japon√™s",
  "chin√™s",
  "amor",
  "calor",
  "dor",
  "flor",
  "senhor",
  "doutor",
  "professor",
  "diretor",
  "ator",
  "cantor",
  "escritor",
  "pintor",
  "escultor",
])

const PROPAROXITONAS = new Set([
  "m√∫sica",
  "p√∫blico",
  "l√¢mpada",
  "p√°ssaro",
  "√°rvore",
  "n√∫mero",
  "√∫ltimo",
  "√∫nico",
  "m√°gico",
  "l√≥gico",
  "f√≠sico",
  "qu√≠mico",
  "matem√°tica",
  "gram√°tica",
  "sint√°tica",
  "sem√¢ntica",
])

/**
 * Conta s√≠labas po√©ticas (at√© a √∫ltima t√¥nica)
 */
export function countPoeticSyllables(line: string): number {
  console.log(`[v0] üî¢ countPoeticSyllables - Entrada: "${line}"`)

  const correctedLine = UltimateFixer.fixLine(line)

  if (correctedLine !== line) {
    console.log(`[v0] ‚úÖ UltimateFixer aplicou corre√ß√µes antes de contar s√≠labas`)
    console.log(`[v0] Original: "${line}"`)
    console.log(`[v0] Corrigido: "${correctedLine}"`)
  }

  // Remove tags e instru√ß√µes
  const cleanLine = correctedLine
    .replace(/\[.*?\]/g, "")
    .replace(/$$.*?$$/g, "")
    .trim()

  if (!cleanLine) return 0

  const words = cleanLine.split(/\s+/).filter((w) => w.length > 0)
  if (words.length === 0) return 0

  let totalGrammaticalSyllables = 0
  const wordSyllableCounts: number[] = []

  for (let i = 0; i < words.length; i++) {
    const word = words[i].toLowerCase()
    const nextWord = i < words.length - 1 ? words[i + 1].toLowerCase() : ""

    let wordSyllables = countGrammaticalSyllables(word)

    // Sinalefa: junta vogais adjacentes entre palavras
    if (nextWord && endsWithVowel(word) && startsWithVowel(nextWord)) {
      wordSyllables -= 0.5 // Reduz meia s√≠laba para compensar jun√ß√£o
    }

    wordSyllableCounts.push(wordSyllables)
    totalGrammaticalSyllables += wordSyllables
  }

  const lastTonicPosition = findLastTonicSyllableAccurate(words, wordSyllableCounts)

  const poeticCount = Math.round(Math.min(totalGrammaticalSyllables, lastTonicPosition))

  console.log(
    `[SyllableCounter] "${cleanLine}" = ${poeticCount} s√≠labas (gramatical: ${Math.round(totalGrammaticalSyllables)}, √∫ltima t√¥nica: ${lastTonicPosition})`,
  )

  return poeticCount
}

/**
 * Conta s√≠labas gramaticais de uma palavra - REFORMULADO
 */
function countGrammaticalSyllables(word: string): number {
  const clean = word.replace(/[^\w√°√†√¢√£√©√®√™√≠√¨√Æ√≥√≤√¥√µ√∫√π√ª√ß]/gi, "")
  if (!clean) return 0

  let count = 0
  let inVowelGroup = false
  let previousWasVowel = false

  for (let i = 0; i < clean.length; i++) {
    const char = clean[i].toLowerCase()
    const nextChar = i < clean.length - 1 ? clean[i + 1].toLowerCase() : ""
    const isVowel = VOWEL_REGEX.test(char)

    if (isVowel) {
      const isHiato = previousWasVowel && isStrongVowel(char) && isStrongVowel(clean[i - 1])

      if (!inVowelGroup || isHiato) {
        count++
        inVowelGroup = true
      }

      previousWasVowel = true
    } else {
      inVowelGroup = false
      previousWasVowel = false
    }
  }

  return Math.max(1, count)
}

/**
 * Verifica se √© vogal forte (a, e, o)
 */
function isStrongVowel(char: string): boolean {
  return /[aeo√°√†√¢√£√©√®√™√≥√≤√¥]/i.test(char)
}

/**
 * Encontra posi√ß√£o da √∫ltima s√≠laba t√¥nica com precis√£o - REFORMULADO
 */
function findLastTonicSyllableAccurate(words: string[], syllableCounts: number[]): number {
  let syllablePosition = 0
  let lastTonicPosition = 0

  for (let i = 0; i < words.length; i++) {
    const word = words[i].toLowerCase()
    const wordSyllables = syllableCounts[i]
    const cleanWord = word.replace(/[^\w√°√†√¢√£√©√®√™√≠√¨√Æ√≥√≤√¥√µ√∫√π√ª√ß]/gi, "")

    if (TONIC_MARKERS.test(word)) {
      // Tem acento gr√°fico - t√¥nica est√° marcada
      const accentPosition = findAccentPosition(cleanWord)
      lastTonicPosition = syllablePosition + accentPosition
    } else if (OXITONAS.has(cleanWord)) {
      // Palavra ox√≠tona - √∫ltima s√≠laba √© t√¥nica
      lastTonicPosition = syllablePosition + wordSyllables
    } else if (PROPAROXITONAS.has(cleanWord)) {
      // Palavra proparox√≠tona - antepen√∫ltima s√≠laba √© t√¥nica
      lastTonicPosition = syllablePosition + Math.max(1, wordSyllables - 2)
    } else {
      // Regra padr√£o: parox√≠tona (pen√∫ltima s√≠laba √© t√¥nica)
      lastTonicPosition = syllablePosition + Math.max(1, wordSyllables - 1)
    }

    syllablePosition += wordSyllables
  }

  return Math.max(1, Math.round(lastTonicPosition))
}

/**
 * Encontra posi√ß√£o do acento gr√°fico na palavra
 */
function findAccentPosition(word: string): number {
  let syllableCount = 0
  let inVowelGroup = false

  for (let i = 0; i < word.length; i++) {
    const char = word[i]
    const isVowel = VOWEL_REGEX.test(char)

    if (isVowel) {
      if (!inVowelGroup) {
        syllableCount++
        inVowelGroup = true
      }

      // Se encontrou acento, retorna posi√ß√£o atual
      if (TONIC_MARKERS.test(char)) {
        return syllableCount
      }
    } else {
      inVowelGroup = false
    }
  }

  return syllableCount
}

function endsWithVowel(word: string): boolean {
  const clean = word.replace(/[^\w√°√†√¢√£√©√®√™√≠√¨√Æ√≥√≤√¥√µ√∫√π√ª√ß]/gi, "")
  if (!clean) return false
  return VOWEL_REGEX.test(clean[clean.length - 1])
}

function startsWithVowel(word: string): boolean {
  const clean = word.replace(/[^\w√°√†√¢√£√©√®√™√≠√¨√Æ√≥√≤√¥√µ√∫√π√ª√ß]/gi, "")
  if (!clean) return false

  // H inicial n√£o tem som em portugu√™s
  if (clean[0].toLowerCase() === "h" && clean.length > 1) {
    return VOWEL_REGEX.test(clean[1])
  }

  return VOWEL_REGEX.test(clean[0])
}

export function validateSyllableLimit(line: string, maxSyllables = 11): boolean {
  // Ignora valida√ß√£o se linha termina com v√≠rgula (enjambement)
  if (line.trim().endsWith(",")) {
    return true // Enjambement √© v√°lido - verso continua no pr√≥ximo
  }

  const count = countPoeticSyllables(line)
  return count <= maxSyllables
}

export function validateLyricsSyllables(
  lyrics: string,
  maxSyllables = 11,
): {
  valid: boolean
  violations: Array<{ line: string; syllables: number; lineNumber: number }>
} {
  const lines = lyrics.split("\n")
  const violations: Array<{ line: string; syllables: number; lineNumber: number }> = []

  lines.forEach((line, index) => {
    if (
      line.trim() &&
      !line.startsWith("[") &&
      !line.startsWith("(") &&
      !line.startsWith("Title:") &&
      !line.startsWith("Instrumentos:")
    ) {
      if (line.trim().endsWith(",")) {
        return // Enjambement √© v√°lido
      }

      const syllables = countPoeticSyllables(line)
      if (syllables > maxSyllables) {
        violations.push({
          line: line.trim(),
          syllables,
          lineNumber: index + 1,
        })
      }
    }
  })

  return {
    valid: violations.length === 0,
    violations,
  }
}

export { countPoeticSyllables as countPortugueseSyllables }
