import { countPoeticSyllables } from "./syllable-counter"

/**
 * Ultimate Fixer - Corretor √önico e Definitivo
 *
 * Aplica TODAS as corre√ß√µes necess√°rias em ordem espec√≠fica
 * baseado no processo manual de corre√ß√£o que funciona 100%
 */
export class UltimateFixer {
  /**
   * Corrige uma linha completamente aplicando todas as t√©cnicas
   */
  static fixLine(line: string): string {
    console.log("[v0] üîß UltimateFixer: Corrigindo linha:", line)

    let fixed = line

    // ETAPA 1: Normalizar espa√ßos ANTES de qualquer corre√ß√£o
    fixed = this.normalizeSpaces(fixed)
    console.log("[v0] Ap√≥s normaliza√ß√£o inicial:", fixed)

    // ETAPA 2: Corrigir "N√£o o o o" ‚Üí "N√£o"
    fixed = this.fixNaoWithExtraOs(fixed)
    console.log("[v0] Ap√≥s corre√ß√£o de 'N√£o o o o':", fixed)

    // ETAPA 3: Corrigir "n√£ " ‚Üí "n√£o "
    fixed = this.fixIncompleteNao(fixed)
    console.log("[v0] Ap√≥s corre√ß√£o de 'n√£':", fixed)

    // ETAPA 4: Completar palavras cortadas
    fixed = this.fixCutWords(fixed)
    console.log("[v0] Ap√≥s completar palavras cortadas:", fixed)

    // ETAPA 5: Corrigir acentua√ß√£o
    fixed = this.fixAccents(fixed)
    console.log("[v0] Ap√≥s corre√ß√£o de acentos:", fixed)

    // ETAPA 6: Corrigir plurais
    fixed = this.fixPlurals(fixed)
    console.log("[v0] Ap√≥s corre√ß√£o de plurais:", fixed)

    // ETAPA 7: Normalizar espa√ßos DEPOIS de todas as corre√ß√µes
    fixed = this.normalizeSpaces(fixed)
    console.log("[v0] Ap√≥s normaliza√ß√£o final:", fixed)

    // ETAPA 8: Ajustar para 11 s√≠labas
    fixed = this.adjustTo11Syllables(fixed)
    console.log("[v0] Ap√≥s ajuste de s√≠labas:", fixed)

    console.log("[v0] ‚úÖ Linha corrigida final:", fixed)
    return fixed
  }

  /**
   * ETAPA 1 e 7: Normalizar espa√ßos
   */
  private static normalizeSpaces(text: string): string {
    return (
      text
        // Remover espa√ßos no in√≠cio e fim
        .trim()
        // Remover espa√ßos duplicados/triplicados/etc
        .replace(/\s{2,}/g, " ")
        // Normalizar espa√ßos antes de pontua√ß√£o
        .replace(/\s+([,.:;!?])/g, "$1")
        // Garantir espa√ßo ap√≥s pontua√ß√£o
        .replace(/([,.:;!?])([^\s])/g, "$1 $2")
    )
  }

  /**
   * ETAPA 2: Corrigir "N√£o o o o" ‚Üí "N√£o"
   */
  private static fixNaoWithExtraOs(text: string): string {
    // Detectar "N√£o" ou "n√£o" seguido de m√∫ltiplos "o" com espa√ßos
    return text.replace(/\b([Nn]√£o)\s+(?:o\s+)+/gi, "$1 ")
  }

  /**
   * ETAPA 3: Corrigir "n√£ " ‚Üí "n√£o "
   */
  private static fixIncompleteNao(text: string): string {
    return text.replace(/\bn√£\s+/gi, "n√£o ")
  }

  /**
   * ETAPA 4: Completar palavras cortadas
   */
  private static fixCutWords(text: string): string {
    const cutWordPatterns: Record<string, string> = {
      // Palavras terminadas em "√ß" sem "a"
      esperan√ß: "esperan√ßa",
      heran√ß: "heran√ßa",
      confian√ß√ß: "confian√ßa",
      lembran√ß√ß: "lembran√ßa",
      mudan√ß√ß: "mudan√ßa",
      crian√ß√ß: "crian√ßa",
      // Palavras terminadas em "√£" sem "o"
      m√£: "m√£o",
      irm√£: "irm√£o",
      p√£: "p√£o",
      c√£: "c√£o",
      // Outras palavras comuns cortadas
      cora√ß√£: "cora√ß√£o",
      solu√ß√£: "solu√ß√£o",
      emo√ß√£: "emo√ß√£o",
    }

    let fixed = text
    for (const [cut, complete] of Object.entries(cutWordPatterns)) {
      const regex = new RegExp(`\\b${cut}\\b`, "gi")
      fixed = fixed.replace(regex, complete)
    }

    return fixed
  }

  /**
   * ETAPA 5: Corrigir acentua√ß√£o
   */
  private static fixAccents(text: string): string {
    const accentFixes: Record<string, string> = {
      l√°√ßo: "la√ßo",
      p√°ra: "para",
      p√©lo: "pelo",
      p√≥lo: "polo",
    }

    let fixed = text
    for (const [wrong, correct] of Object.entries(accentFixes)) {
      const regex = new RegExp(`\\b${wrong}\\b`, "gi")
      fixed = fixed.replace(regex, correct)
    }

    return fixed
  }

  /**
   * ETAPA 6: Corrigir plurais
   */
  private static fixPlurals(text: string): string {
    // Detectar "os/as" + substantivo singular e corrigir
    const pluralPatterns: Record<string, string> = {
      "os dedo": "os dedos",
      "as m√£o": "as m√£os",
      "os olho": "os olhos",
      "as perna": "as pernas",
    }

    let fixed = text
    for (const [wrong, correct] of Object.entries(pluralPatterns)) {
      const regex = new RegExp(wrong, "gi")
      fixed = fixed.replace(regex, correct)
    }

    return fixed
  }

  /**
   * ETAPA 8: Ajustar para 11 s√≠labas
   */
  private static adjustTo11Syllables(line: string): string {
    const syllables = countPoeticSyllables(line)
    console.log("[v0] S√≠labas atuais:", syllables)

    if (syllables === 11) {
      return line
    }

    if (syllables > 11) {
      // Reduzir s√≠labas
      return this.reduceSyllables(line, syllables - 11)
    } else {
      // Adicionar s√≠labas
      return this.addSyllables(line, 11 - syllables)
    }
  }

  /**
   * Reduzir s√≠labas removendo palavras desnecess√°rias
   */
  private static reduceSyllables(line: string, toRemove: number): string {
    console.log("[v0] Reduzindo", toRemove, "s√≠labas de:", line)

    // Lista de palavras para remover em ordem de prioridade
    const wordsToRemove = [
      // Artigos
      { word: "o ", syllables: 1 },
      { word: "a ", syllables: 1 },
      { word: "um ", syllables: 1 },
      { word: "uma ", syllables: 2 },
      { word: "os ", syllables: 1 },
      { word: "as ", syllables: 1 },
      // Preposi√ß√µes
      { word: "de ", syllables: 1 },
      { word: "da ", syllables: 1 },
      { word: "do ", syllables: 1 },
      { word: "em ", syllables: 1 },
      { word: "na ", syllables: 1 },
      { word: "no ", syllables: 1 },
      // Adv√©rbios
      { word: "muito ", syllables: 2 },
      { word: "mais ", syllables: 1 },
      { word: "bem ", syllables: 1 },
      { word: "j√° ", syllables: 1 },
    ]

    let reduced = line
    let removed = 0

    for (const { word, syllables } of wordsToRemove) {
      if (removed >= toRemove) break

      if (reduced.includes(word)) {
        reduced = reduced.replace(word, "")
        removed += syllables
        console.log("[v0] Removeu:", word, "| S√≠labas removidas:", syllables)
      }
    }

    // Normalizar espa√ßos ap√≥s remo√ß√£o
    reduced = this.normalizeSpaces(reduced)

    const newSyllables = countPoeticSyllables(reduced)
    console.log("[v0] S√≠labas ap√≥s redu√ß√£o:", newSyllables)

    return reduced
  }

  /**
   * Adicionar s√≠labas inserindo palavras curtas
   */
  private static addSyllables(line: string, toAdd: number): string {
    console.log("[v0] Adicionando", toAdd, "s√≠labas a:", line)

    // Lista de palavras para adicionar
    const wordsToAdd = [
      { word: "meu ", syllables: 1, position: "before_noun" },
      { word: "bem ", syllables: 1, position: "before_adjective" },
      { word: "j√° ", syllables: 1, position: "before_verb" },
    ]

    let added = line
    let addedCount = 0

    // Por enquanto, adicionar "meu" antes de substantivos comuns
    if (toAdd >= 1 && !added.includes("meu ")) {
      // Detectar substantivos comuns e adicionar "meu"
      const nouns = ["lar", "casa", "vida", "amor", "cora√ß√£o"]
      for (const noun of nouns) {
        if (added.includes(noun) && !added.includes(`meu ${noun}`)) {
          added = added.replace(noun, `meu ${noun}`)
          addedCount += 1
          console.log("[v0] Adicionou: meu antes de", noun)
          break
        }
      }
    }

    const newSyllables = countPoeticSyllables(added)
    console.log("[v0] S√≠labas ap√≥s adi√ß√£o:", newSyllables)

    return added
  }

  /**
   * Corrige letra completa aplicando fixLine em cada verso
   */
  static fixFullLyrics(lyrics: string): string {
    console.log("[v0] ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
    console.log("[v0] üîß UltimateFixer.fixFullLyrics - IN√çCIO")
    console.log("[v0] ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
    console.log("[v0] üìä Lyrics length:", lyrics.length)
    console.log("[v0] üìä Primeiros 200 caracteres:", lyrics.substring(0, 200))
    console.log("[v0] üìä N√∫mero de linhas:", lyrics.split("\n").length)

    const lines = lyrics.split("\n")
    const fixedLines = lines.map((line, index) => {
      // N√£o corrigir linhas vazias ou tags de se√ß√£o
      if (!line.trim() || line.startsWith("[")) {
        return line
      }

      console.log(`[v0] Corrigindo linha ${index + 1}/${lines.length}`)
      return this.fixLine(line)
    })

    const fixed = fixedLines.join("\n")
    console.log("[v0] ‚úÖ Letra completa corrigida")

    return fixed
  }
}
