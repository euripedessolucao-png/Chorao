/**
 * VALIDADOR DE INTEGRIDADE DE VERSOS
 * 
 * AGORA COM AS MESMAS REGRAS INTELIGENTES DO REWRITER
 * Detecta problemas al√©m da contagem de s√≠labas:
 * - Versos incompletos (sem verbo, muito curtos)
 * - Versos quebrados (aspas abertas, v√≠rgulas soltas)
 * - Versos com mais de 11 s√≠labas (LIMITE ABSOLUTO)
 */

import { countPoeticSyllables } from "./syllable-counter-brasileiro"

export interface VerseIssue {
  line: number
  text: string
  issues: string[]
  syllables: number
  severity: "error" | "warning"
}

export interface VerseValidationResult {
  valid: boolean
  issues: VerseIssue[]
  totalVerses: number
  brokenVerses: number
  longVerses: number
}

const ABSOLUTE_MAX_SYLLABLES = 11

/**
 * ‚úÖ DETECTA VERSOS INCOMPLETOS COM AS MESMAS REGRAS DO REWRITER
 */
function detectBrokenVerse(text: string): string[] {
  const issues: string[] = []
  const trimmed = text.trim()

  // Remove tags inline e aspas para an√°lise (mesma l√≥gica do rewriter)
  const cleanLine = trimmed
    .replace(/\[.*?\]/g, "")
    .replace(/\(.*?\)/g, "")
    .replace(/^"|"$/g, "")
    .trim()

  if (!cleanLine) return issues

  const words = cleanLine.split(/\s+/).filter(w => w.length > 0)
  
  // ‚úÖ REGRAS ID√äNTICAS AO REWRITER
  const isIncomplete = 
    words.length < 3 || // Menos de 3 palavras
    /[,-]$/.test(cleanLine) || // Termina com v√≠rgula ou tra√ßo
    /\b(e|do|por|me|te|em|a|o|de|da|no|na|com|se|t√£o|que|um|uma|uns|umas)\s*$/i.test(cleanLine) // Termina com preposi√ß√£o

  if (isIncomplete) {
    if (words.length < 3) {
      issues.push("Verso muito curto (menos de 3 palavras)")
    } else if (/[,-]$/.test(cleanLine)) {
      issues.push("Termina com pontua√ß√£o incompleta")
    } else {
      const match = cleanLine.match(/\b(e|do|por|me|te|em|a|o|de|da|no|na|com|se|t√£o|que|um|uma)\s*$/i)
      issues.push(`Termina com preposi√ß√£o/artigo: "${match?.[0]}"`)
    }
  }

  // Verifica palavras cortadas (terminam com h√≠fen)
  if (cleanLine.match(/\w+-$/)) {
    issues.push("Palavra cortada no final do verso")
  }

  // Aspas abertas sem fechar
  const openQuotes = (trimmed.match(/"/g) || []).length
  if (openQuotes % 2 !== 0) {
    issues.push("Aspas n√£o fechadas")
  }

  // Come√ßa com letra min√∫scula (pode indicar continua√ß√£o de verso anterior)
  if (cleanLine.length > 0 && cleanLine[0] === cleanLine[0].toLowerCase() && !/^[0-9]/.test(cleanLine)) {
    issues.push("Come√ßa com min√∫scula (poss√≠vel continua√ß√£o)")
  }

  // Verifica estrutura gramatical b√°sica (apenas para versos mais longos)
  if (words.length >= 4 && !hasValidStructure(cleanLine)) {
    issues.push("Estrutura gramatical fraca ou sem verbo claro")
  }

  return issues
}

/**
 * Verifica se o verso tem estrutura v√°lida (vers√£o simplificada)
 */
function hasValidStructure(text: string): boolean {
  // Padr√µes de frases completas comuns em m√∫sica brasileira
  const validPatterns = [
    // Padr√£o sujeito + verbo + complemento
    /\b(eu|voc√™|ele|ela|n√≥s|eles|a gente|o cora√ß√£o|a vida|o amor|a f√©)\s+\w+[aei](\s+\w+){1,3}/i,
    // Padr√£o verbo + complemento
    /\b(sinto|vejo|creio|acho|quero|posso|devo|vou|sei|amo|adoro|agrade√ßo)\s+\w+(\s+\w+){1,3}/i,
    // Frases com "que" completas
    /\b(que)\s+\w+\s+\w+(\s+\w+){1,2}/i,
    // Express√µes completas comuns
    /\b(√©|s√£o|era|foi|est√°|fica|vai|tem|houve)\s+\w+(\s+\w+){1,3}/i
  ]

  return validPatterns.some(pattern => pattern.test(text))
}

/**
 * Valida integridade de todos os versos da letra
 */
export function validateVerseIntegrity(lyrics: string): VerseValidationResult {
  const lines = lyrics.split("\n")
  const issues: VerseIssue[] = []
  let totalVerses = 0
  let brokenVerses = 0
  let longVerses = 0

  lines.forEach((line, index) => {
    const trimmed = line.trim()

    // ‚úÖ MESMA L√ìGICA DE IGNORAR TAGS DO REWRITER
    if (!trimmed || 
        trimmed.startsWith("### [") || 
        trimmed.startsWith("(Instrumentation)") || 
        trimmed.startsWith("(Genre)") ||
        trimmed.includes("Instrumental")) {
      return
    }

    totalVerses++
    const syllables = countPoeticSyllables(trimmed)
    const verseIssues = detectBrokenVerse(trimmed)

    // ERRO CR√çTICO: Mais de 11 s√≠labas
    if (syllables > ABSOLUTE_MAX_SYLLABLES) {
      longVerses++
      issues.push({
        line: index + 1,
        text: trimmed,
        issues: [`‚ùå ${syllables} s√≠labas (m√°ximo: ${ABSOLUTE_MAX_SYLLABLES})`],
        syllables,
        severity: "error",
      })
    }

    // AVISO: Verso quebrado/incompleto (usando regras do rewriter)
    if (verseIssues.length > 0) {
      brokenVerses++
      issues.push({
        line: index + 1,
        text: trimmed,
        issues: verseIssues,
        syllables,
        severity: verseIssues.some(issue => issue.includes("‚ùå")) ? "error" : "warning",
      })
    }
  })

  return {
    valid: issues.filter((i) => i.severity === "error").length === 0,
    issues,
    totalVerses,
    brokenVerses,
    longVerses,
  }
}

/**
 * ‚úÖ CORRETOR INTELIGENTE - REPLICA EXATAMENTE A L√ìGICA DO REWRITER
 */
export function smartFixIncompleteLines(lyrics: string): string {
  console.log("[VerseIntegrity] üîß Aplicando corre√ß√£o inteligente")
  
  const lines = lyrics.split('\n')
  const fixedLines: string[] = []
  
  let corrections = 0

  for (let i = 0; i < lines.length; i++) {
    let line = lines[i].trim()
    
    // Ignora tags e metadata - MESMA L√ìGICA DO REWRITER
    if (!line || line.startsWith('### [') || line.startsWith('(Instrumentation)') || line.startsWith('(Genre)')) {
      fixedLines.push(line)
      continue
    }

    // Remove aspas se existirem - MESMA L√ìGICA
    line = line.replace(/^"|"$/g, '').trim()
    
    const cleanLine = line.replace(/\[.*?\]/g, "").replace(/\(.*?\)/g, "").trim()
    if (!cleanLine) {
      fixedLines.push(line)
      continue
    }

    const words = cleanLine.split(/\s+/).filter(w => w.length > 0)
    
    // ‚úÖ DETECTA VERSOS INCOMPLETOS COM MESMAS REGRAS
    const isIncomplete = 
      words.length < 3 || // Menos de 3 palavras
      /[,-]$/.test(cleanLine) || // Termina com v√≠rgula ou tra√ßo
      /\b(e|do|por|me|te|em|a|o|de|da|no|na|com|se|t√£o|que|um|uma|uns|umas)\s*$/i.test(cleanLine) // Termina com preposi√ß√£o

    if (isIncomplete && words.length > 0) {
      console.log(`[VerseIntegrity] üìù Ajustando verso: "${cleanLine}"`)
      
      let fixedLine = line
      
      // Remove pontua√ß√£o problem√°tica - MESMA L√ìGICA
      fixedLine = fixedLine.replace(/[,-]\s*$/, '').trim()
      
      // ‚úÖ COMPLETAMENTO INTELIGENTE BASEADO NO CONTEXTO - MESMA L√ìGICA
      const lastWord = words[words.length - 1].toLowerCase()
      
      // Completamentos contextuais para m√∫sica brasileira - MESMA TABELA
      const completions: Record<string, string> = {
        'cora√ß√£o': 'aberto e grato',
        'vida': 'que recebo de Ti',
        'gratid√£o': 'transbordando em mim',
        'amor': 'que nunca falha',
        'f√©': 'que me sustenta',
        'alegria': 'que inunda minha alma',
        'paz': 'que acalma o cora√ß√£o',
        'for√ßa': 'para seguir em frente',
        'luz': 'que ilumina meu caminho',
        'esperan√ßa': 'que renova meus dias',
        'sorriso': 'no rosto iluminado',
        'caminho': 'aben√ßoado por Deus',
        'dom': 'divino que recebi',
        'alma': 'que se renova em paz',
        'ess√™ncia': 'divina do amor',
        'can√ß√£o': 'que canto com fervor',
        'm√£o': 'amiga que me guia',
        'raz√£o': 'do meu viver aqui',
        'lar': 'eterno nos c√©us',
        'li√ß√£o': 'que levo pra vida'
      }
      
      if (completions[lastWord]) {
        fixedLine += ' ' + completions[lastWord]
      } else {
        // Completamento gen√©rico natural para m√∫sica brasileira - MESMA L√ìGICA
        const genericCompletions = [
          'com muito amor',
          'e gratid√£o',
          'pra sempre vou lembrar',
          'nunca vou esquecer',
          '√© o que sinto agora',
          'me faz feliz demais',
          'que Deus me concedeu'
        ]
        const randomCompletion = genericCompletions[Math.floor(Math.random() * genericCompletions.length)]
        fixedLine += ' ' + randomCompletion
      }
      
      // Garante pontua√ß√£o final adequada - MESMA L√ìGICA
      if (!/[.!?]$/.test(fixedLine)) {
        fixedLine = fixedLine.replace(/[.,;:]$/, '') + '.'
      }
      
      // Restaura aspas se necess√°rio - MESMA L√ìGICA
      if (lines[i].trim().startsWith('"')) {
        fixedLine = `"${fixedLine}"`
      }
      
      console.log(`[VerseIntegrity] ‚úÖ CORRIGIDO: "${fixedLine}"`)
      fixedLines.push(fixedLine)
      corrections++
    } else {
      fixedLines.push(line)
    }
  }

  console.log(`[VerseIntegrity] üéâ CORRE√á√ÉO CONCLU√çDA: ${corrections} versos corrigidos`)
  return fixedLines.join('\n')
}

/**
 * Formata relat√≥rio de valida√ß√£o para exibi√ß√£o
 */
export function formatValidationReport(result: VerseValidationResult): string {
  if (result.valid && result.brokenVerses === 0) {
    return `‚úÖ Letra validada: ${result.totalVerses} versos OK`
  }

  let report = `‚ö†Ô∏è Problemas encontrados:\n\n`

  if (result.longVerses > 0) {
    report += `‚ùå ${result.longVerses} verso(s) com mais de ${ABSOLUTE_MAX_SYLLABLES} s√≠labas\n`
  }

  if (result.brokenVerses > 0) {
    report += `‚ö†Ô∏è ${result.brokenVerses} verso(s) incompleto(s) ou quebrado(s)\n`
  }

  report += `\nDetalhes:\n`
  result.issues.forEach((issue) => {
    const icon = issue.severity === "error" ? "‚ùå" : "‚ö†Ô∏è"
    report += `\n${icon} Linha ${issue.line}: "${issue.text}"\n`
    report += `  S√≠labas: ${issue.syllables}\n`
    issue.issues.forEach((i) => (report += `  ‚Ä¢ ${i}\n`))
  })

  return report
}

/**
 * Fun√ß√£o auxiliar para corre√ß√£o r√°pida
 */
export function quickFixLyrics(lyrics: string): { fixed: string; corrections: number } {
  const originalLines = lyrics.split('\n').filter(line => line.trim()).length
  const fixed = smartFixIncompleteLines(lyrics)
  const fixedLines = fixed.split('\n').filter(line => line.trim()).length
  
  return {
    fixed,
    corrections: Math.max(0, fixedLines - originalLines)
  }
}
