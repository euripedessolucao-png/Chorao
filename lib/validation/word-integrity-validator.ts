/**
 * VALIDADOR DE INTEGRIDADE DE PALAVRAS
 * Garante que nenhuma palavra est√° cortada ou incompleta
 */

export class WordIntegrityValidator {
  // Lista de palavras comuns que N√ÉO devem aparecer sem acentos
  private static readonly WORDS_REQUIRING_ACCENTS: Record<string, string> = {
    nao: "n√£o",
    voce: "voc√™",
    esta: "est√°",
    ate: "at√©",
    cafe: "caf√©",
    pe: "p√©",
    so: "s√≥",
    la: "l√°",
    ca: "c√°",
    ja: "j√°",
    seguranca: "seguran√ßa",
    esperanca: "esperan√ßa",
    raca: "ra√ßa",
    laco: "la√ßo",
    heranca: "heran√ßa",
    musica: "m√∫sica",
    historia: "hist√≥ria",
    memoria: "mem√≥ria",
  }

  // Padr√µes que indicam palavras cortadas
  private static readonly INCOMPLETE_WORD_PATTERNS = [
    /\b\w+√ß\b/i, // Palavras terminando em "√ß" sem "a" ou "o" (seguran√ß, esperan√ß)
    /\b\w+√£\b/i, // Palavras terminando em "√£" sem "o" (n√£)
    /\b\w+√°\b(?!s?\b)/i, // Palavras terminando em "√°" sem "s" opcional (l√°, c√° s√£o v√°lidas)
    /\b\w+√©\b(?!s?\b)/i, // Palavras terminando em "√©" sem "s" opcional (p√©, caf√© s√£o v√°lidas)
    /\b\w+√≠\b(?!s?\b)/i, // Palavras terminando em "√≠" sem "s" opcional
    /\b\w+√≥\b(?!s?\b)/i, // Palavras terminando em "√≥" sem "s" opcional (s√≥ √© v√°lida)
    /\b\w+√∫\b(?!s?\b)/i, // Palavras terminando em "√∫" sem "s" opcional
  ]

  /**
   * Valida se todas as palavras est√£o completas e com acentua√ß√£o correta
   */
  static validate(lyrics: string): {
    isValid: boolean
    errors: Array<{ line: string; word: string; suggestion?: string; lineNumber: number }>
    message: string
  } {
    const lines = lyrics.split("\n")
    const errors: Array<{ line: string; word: string; suggestion?: string; lineNumber: number }> = []

    lines.forEach((line, index) => {
      const trimmed = line.trim()

      // Ignora tags, instru√ß√µes e linhas vazias
      if (!trimmed || trimmed.startsWith("[") || trimmed.startsWith("(") || trimmed.includes("Instruments:")) {
        return
      }

      // Verifica palavras sem acentos que deveriam ter
      const words = trimmed.split(/\s+/)
      words.forEach((word) => {
        const cleanWord = word.replace(/[.,!?;:]/g, "").toLowerCase()

        // Verifica se √© uma palavra que deveria ter acento
        if (this.WORDS_REQUIRING_ACCENTS[cleanWord]) {
          errors.push({
            line: trimmed,
            word: cleanWord,
            suggestion: this.WORDS_REQUIRING_ACCENTS[cleanWord],
            lineNumber: index + 1,
          })
        }

        // Verifica padr√µes de palavras cortadas
        for (const pattern of this.INCOMPLETE_WORD_PATTERNS) {
          if (pattern.test(cleanWord)) {
            // Exce√ß√µes: palavras v√°lidas que terminam com acento
            const validExceptions = ["l√°", "c√°", "j√°", "p√©", "s√≥", "f√©", "d√≥", "r√©", "mi", "f√°", "si"]
            if (!validExceptions.includes(cleanWord)) {
              errors.push({
                line: trimmed,
                word: cleanWord,
                lineNumber: index + 1,
              })
            }
          }
        }
      })

      // Verifica se a linha termina abruptamente (sem pontua√ß√£o e sem sentido)
      const lastWord = words[words.length - 1]?.replace(/[.,!?;:]/g, "").toLowerCase()
      if (lastWord && this.seemsIncomplete(lastWord, trimmed)) {
        errors.push({
          line: trimmed,
          word: lastWord,
          lineNumber: index + 1,
        })
      }
    })

    const isValid = errors.length === 0

    let message = ""
    if (!isValid) {
      message = `‚ùå BLOQUEADO: ${errors.length} palavra(s) incompleta(s) ou sem acentua√ß√£o`
      errors.forEach((e) => {
        if (e.suggestion) {
          message += `\n  Linha ${e.lineNumber}: "${e.word}" ‚Üí "${e.suggestion}"`
        } else {
          message += `\n  Linha ${e.lineNumber}: "${e.word}" parece incompleta`
        }
      })
    } else {
      message = `‚úÖ APROVADO: Todas as palavras est√£o completas e com acentua√ß√£o correta`
    }

    return {
      isValid,
      errors,
      message,
    }
  }

  /**
   * Corrige automaticamente palavras sem acentos
   */
  static fix(lyrics: string): {
    correctedLyrics: string
    corrections: number
    details: Array<{ original: string; corrected: string }>
  } {
    let corrected = lyrics
    const details: Array<{ original: string; corrected: string }> = []
    let corrections = 0

    // Corrige palavras sem acentos
    for (const [wrong, correct] of Object.entries(this.WORDS_REQUIRING_ACCENTS)) {
      const regex = new RegExp(`\\b${wrong}\\b`, "gi")
      if (regex.test(corrected)) {
        const original = corrected
        corrected = corrected.replace(regex, correct)
        corrections++
        details.push({ original: wrong, corrected: correct })
        console.log(`[WordIntegrityValidator] üîß Corrigido: "${wrong}" ‚Üí "${correct}"`)
      }
    }

    return {
      correctedLyrics: corrected,
      corrections,
      details,
    }
  }

  /**
   * Verifica se uma palavra parece incompleta baseado no contexto
   */
  private static seemsIncomplete(word: string, line: string): boolean {
    // Se a linha termina com preposi√ß√£o, provavelmente est√° incompleta
    const endsWithPreposition = /\b(na|no|da|do|em|de|pra|pro|com|sem|por)\s*$/i.test(line)
    if (endsWithPreposition) return true

    // Se a palavra tem menos de 3 caracteres e n√£o √© comum, pode estar incompleta
    if (word.length < 3) {
      const commonShortWords = [
        "eu",
        "tu",
        "me",
        "te",
        "se",
        "l√°",
        "c√°",
        "j√°",
        "p√©",
        "s√≥",
        "f√©",
        "d√≥",
        "r√©",
        "mi",
        "f√°",
        "si",
        "√©",
        "h√°",
      ]
      if (!commonShortWords.includes(word)) return true
    }

    return false
  }
}
